testing.test=test$(test1)test$(test2)test
QueueToadlet.priority=Priority
QueueToadlet.emergency=emergency
QueueToadlet.veryhigh=very high
QueueToadlet.high=high
QueueToadlet.medium=medium
QueueToadlet.low=low
QueueToadlet.verylow=very low
QueueToadlet.willneverfinish=will never finish
QueueToadlet.failedToRemoveRequest=Failed to remove request
QueueToadlet.failedToRemove=Failed to remove ${id}: ${message}
QueueToadlet.failedToRestartRequest=Failed to restart request
QueueToadlet.failedToRestart=Failed to restart: ${id}
QueueToadlet.failedToRemoveId=Failed to remove: ${id}
QueueToadlet.fcpIsMissing=FCP server is missing
QueueToadlet.pleaseEnableFCP=You need to enable the FCP server to access this page
QueueToadlet.title=Global queue of ${nodeName}
QueueToadlet.globalQueueIsEmpty=Global queue is empty
QueueToadlet.noTaskOnGlobalQueue=There is no task queued on the global queue at the moment.
QueueToadlet.requestNavigation=Request Navigation
QueueToadlet.completedDtoTemp=Completed downloads to temp
QueueToadlet.completedDtoDisk=Completed downloads to disk
QueueToadlet.completedU=Completed uploads
QueueToadlet.completedDU=Completed directory uploads
QueueToadlet.failedD=Failed downloads
QueueToadlet.failedU=Failed uploads
QueueToadlet.failedDU=Failed directory uploads
QueueToadlet.DinProgress=Downloads in progress
QueueToadlet.UinProgress=Uploads in progress
QueueToadlet.DUinProgress=Directory uploads in progress
QueueToadlet.legend=Legend
QueueToadlet.completedDinTempDirectory=Completed: Downloads to temporary directory (${size})
QueueToadlet.completedDinDownloadDirectory=Completed: Downloads to download directory (${size})
QueueToadlet.completedU=Completed: Uploads (${size})
QueueToadlet.completedUDirectory=Completed: Directory Uploads (${size})
QueueToadlet.failedD=Failed: Downloads (${size})
QueueToadlet.failedU=Failed: Uploads (${size})
QueueToadlet.failedDU=Failed: Directory Uploads (${size})
QueueToadlet.wipD=In Progress: Downloads (${size})
QueueToadlet.wipU=In Progress: Uploads (${size})
QueueToadlet.wipDU=In Progress: Directory Uploads (${size})
QueueToadlet.unknown=Unknown
QueueToadlet.starting=STARTING
QueueToadlet.none=none
QueueToadlet.download=Download
QueueToadlet.change=Change
QueueToadlet.delete=Delete
QueueToadlet.restart=Restart
QueueToadlet.insertFile=Insert File
QueueToadlet.insertAs=Insert as: 
QueueToadlet.identifier=Identifier
QueueToadlet.size=Size
QueueToadlet.mimeType=MIME Type
QueueToadlet.key=Key
QueueToadlet.fileName=Filename
QueueToadlet.files=Files
QueueToadlet.totalSize=Total Size
QueueToadlet.progress=Progress
QueueToadlet.reason=Reason
QueueToadlet.panicButton=Panic Button
QueueToadlet.panicButtonConfirmation=Delete everything without confirmation!\u00a0
QueueToadlet.progressbarAccurate=This progress value is accurate
QueueToadlet.progressbarNotAccurate=This progress value is likely to change as the file download process has not been finalized
QueueToadlet.persistence=Persistence
QueueToadlet.persistenceForever=forever
QueueToadlet.persistenceRebootr=reboot
QueueToadlet.persistenceNone=none
QueueToadlet.errorAccessDenied=Error: Access Denied!
QueueToadlet.errorAccessDeniedFile=The current configuration of the node prohibits you from uploading the file "${file}".
QueueToadlet.errorNoKey=No key specified to download
QueueToadlet.errorNoKeyToD=You did not specify a key to download.
QueueToadlet.errorInvalidURI=Invalid URI
QueueToadlet.errorInvalidURIToD=The URI is invalid and can not be downloaded.
QueueToadlet.errorInvalidURIToU=You did not specify a valid URI to insert the file to.
QueueToadlet.errorDToDisk=Cannot download to disk
QueueToadlet.errorDToDiskConfig=The node's current configuration does not allow you to download files to the downloads directory.
QueueToadlet.errorNoFileSelected=No file selected
QueueToadlet.errorNoFileSelectedU=You did not select a file to upload.
QueueToadlet.errorDownloadNotCompleted=Download Not Completed
QueueToadlet.errorDownloadNotFound=Download Not Found
QueueToadlet.errorDownloadNotFoundExplanation=The download could not be found. Maybe it was already deleted?
QueueToadlet.warningUnsafeContent=Potentially Unsafe Content
QueueToadlet.warningUnsafeContentExplanation=The file you want to download is currently not filtered by Freenet's content filter! That means that your anonymity can be compromised by opening the file!
FcpServer.isEnabled=Is FCP server enabled ?
FcpServer.isEnabledLong=Is FCP server enabled ?
FcpServer.portNumber=FCP port number
FcpServer.portNumberLong=FCP port number.
FcpServer.bindTo=IP address to bind to
FcpServer.bindToLong=IP address to bind the FCP server to.
FcpServer.allowedHosts=Allowed hosts (read the warning!)
FcpServer.allowedHostsLong=IP addresses that are allowed to connect to the FCP server. May be a comma-separated list of single IPs and CIDR masked IPs like 192.168.0.0/24. WARNING! Anyone who has access to FCP can upload any file the node has access to, or download files to disk (but the node will try not to overwrite existing files).
FcpServer.allowedHostsFullAccess=Hosts allowed full access
FcpServer.allowedHostsFullAccessLong=IP addresses which are allowed full access to the node. Clients on these IPs may restart the node, reconfigure it, etc. Note that ALL clients are allowed to do direct disk I/O!
FcpServer.enablePersistentDownload=Enable persistent downloads?
FcpServer.enablePersistentDownloadLong=Whether to enable Persistence=forever for FCP requests. Meaning whether to support requests which persist over node restarts; they must be written to disk and this may constitute a security risk for some people.
FcpServer.filenameToStorePData=Filename to store persistent downloads in
FcpServer.filenameToStorePDataLong=Filename to store details of persistent downloads to.
FcpServer.intervalBetweenWrites=Interval between writing persistent downloads to disk
FcpServer.intervalBetweenWritesLong=Interval between writing persistent downloads to disk.
FcpServer.assumeDownloadDDAIsAllowed=Assume that download DDA is allowed ?
FcpServer.assumeDownloadDDAIsAllowedLong=Assume that download DDA is allowed ? if false, you have to issue a TestDDARequest before making any DDA access.
FcpServer.assumeUploadDDAIsAllowed=Assume that upload DDA is allowed ?
FcpServer.assumeUploadDDAIsAllowedLong=Assume that upload DDA is allowed ? if false, you have to issue a TestDDARequest before making any DDA access.