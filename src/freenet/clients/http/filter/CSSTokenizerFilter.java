/* The following code was generated by JFlex 1.4.1 on 28/09/06 15:38 */

package freenet.clients.http.filter;
import java.io.*;
import java.util.*;
/* This class tokenizes a CSS2 Reader stream, writes it out to the output Writer, and filters any URLs found */
// WARNING: this is not as thorough as the HTML parser - new versions of the standard could lead to anonymity risks. See comments in SaferFilter.java
// Mostly from http://www.w3.org/TR/REC-CSS2/grammar.html


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 28/09/06 15:38 from the specification file
 * <tt>freenet/clients/http/filter/CSSTokenizerFilter.jflex</tt>
 */
class CSSTokenizerFilter {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\3\1\0\1\3\1\3\22\0\1\5\1\45\1\11"+
    "\1\27\1\4\1\63\1\4\1\12\1\23\1\14\1\43\1\56\1\30"+
    "\1\10\1\13\1\42\12\1\1\64\1\37\1\44\1\50\1\46\1\26"+
    "\1\33\1\32\1\6\1\54\1\52\1\31\1\53\1\22\1\60\1\20"+
    "\1\7\1\62\1\25\1\34\1\21\1\36\1\35\1\7\1\17\1\15"+
    "\1\16\1\24\1\7\1\55\1\57\1\7\1\61\1\4\1\2\4\4"+
    "\1\32\1\6\1\54\1\52\1\31\1\53\1\22\1\60\1\20\1\7"+
    "\1\62\1\25\1\34\1\21\1\36\1\35\1\7\1\17\1\15\1\16"+
    "\1\24\1\7\1\55\1\57\1\7\1\61\1\40\1\51\1\41\1\47"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\2\1\4\2\1"+
    "\1\4\1\5\2\2\1\1\1\4\1\1\1\6\1\7"+
    "\1\10\1\4\4\1\3\0\1\11\1\0\1\12\1\13"+
    "\1\2\3\0\1\14\2\0\1\15\2\2\1\0\1\16"+
    "\1\0\1\16\12\0\1\17\1\20\2\0\1\2\1\21"+
    "\2\14\12\0\2\2\2\22\2\16\2\0\1\23\12\0"+
    "\1\2\2\0\1\2\1\11\1\22\1\0\1\22\1\24"+
    "\1\16\1\23\6\0\1\25\1\26\2\0\2\2\2\0"+
    "\1\27\2\22\1\30\2\16\3\0\1\31\4\0\2\2"+
    "\1\27\2\22\1\30\2\16\2\0\1\32\4\0\1\2"+
    "\1\33\2\22\1\30\1\24\1\16\6\0\2\22\1\30"+
    "\1\16\10\0\1\34\1\23\4\0\1\30\3\0\1\34"+
    "\1\23\6\0\1\23\10\0\1\30\6\0\1\34\6\0"+
    "\1\35\4\0\1\23\6\0\1\34\5\0\1\34\3\0"+
    "\1\23\2\0\1\36\15\0\1\23\7\0\1\23\1\36"+
    "\24\0\1\23\1\0\1\36\1\37\12\0\1\34\16\0"+
    "\1\23\20\0\1\34\3\0\1\34\21\0\1\23\42\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[384];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\65\0\u0212\0\u0247\0\u027c\0\65\0\u02b1"+
    "\0\65\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424"+
    "\0\237\0\u0459\0\u01dd\0\65\0\u048e\0\65\0\65\0\u04c3"+
    "\0\u04f8\0\u0173\0\u052d\0\65\0\u01a8\0\u0562\0\u0597\0\u05cc"+
    "\0\u0601\0\u0636\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774"+
    "\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\65"+
    "\0\65\0\u091c\0\u0951\0\u0986\0\65\0\u0173\0\u01a8\0\u09bb"+
    "\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63"+
    "\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b"+
    "\0\u0d40\0\65\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e"+
    "\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026"+
    "\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u070a\0\u1199"+
    "\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\65\0\65\0\u12d7"+
    "\0\u130c\0\u1341\0\u1376\0\u105b\0\u13ab\0\65\0\u13e0\0\u1415"+
    "\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u070a\0\u1588"+
    "\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691\0\u105b\0\u16c6\0\u16fb"+
    "\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804\0\u070a\0\u1839\0\u186e"+
    "\0\u18a3\0\u18d8\0\u190d\0\u0109\0\u1942\0\u1977\0\u19ac\0\u06d5"+
    "\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54"+
    "\0\65\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7"+
    "\0\u1cfc\0\u1d31\0\u1d66\0\u1d9b\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a"+
    "\0\u1e6f\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43\0\u1c5d\0\u1c5d\0\u1f78"+
    "\0\u1fad\0\u1fe2\0\u2017\0\u204c\0\u2081\0\u204c\0\u20b6\0\u1d9b"+
    "\0\u20eb\0\u2120\0\u2155\0\u218a\0\u21bf\0\u21f4\0\65\0\u2229"+
    "\0\u225e\0\u2293\0\u22c8\0\u22fd\0\u2332\0\65\0\u2367\0\u239c"+
    "\0\u23d1\0\u2406\0\u243b\0\u2470\0\u070a\0\u24a5\0\u24da\0\u250f"+
    "\0\u2544\0\u2544\0\u2579\0\u25ae\0\u25e3\0\u2618\0\u264d\0\u2682"+
    "\0\u1cfc\0\u26b7\0\u26ec\0\u2721\0\u2756\0\u278b\0\u204c\0\u27c0"+
    "\0\u27f5\0\u282a\0\u22c8\0\u285f\0\u2894\0\65\0\u28c9\0\u28fe"+
    "\0\u2933\0\u2968\0\u299d\0\u29d2\0\u2a07\0\u2a3c\0\u2a71\0\u2aa6"+
    "\0\u2adb\0\u2b10\0\u2b45\0\u2b10\0\u2b7a\0\u2baf\0\u2be4\0\u2c19"+
    "\0\u2c4e\0\u2c83\0\u2cb8\0\u2ced\0\u218a\0\u2d22\0\u2d57\0\u2d8c"+
    "\0\u2dc1\0\u2df6\0\u2e2b\0\u2e60\0\u2e95\0\u2eca\0\u2eff\0\u2f34"+
    "\0\u2f69\0\u2f9e\0\u2ced\0\u2fd3\0\u3008\0\u303d\0\u3072\0\u30a7"+
    "\0\u30dc\0\u30a7\0\u3111\0\u2544\0\65\0\u3146\0\u317b\0\u31b0"+
    "\0\u31e5\0\u321a\0\u324f\0\u3284\0\u32b9\0\u32ee\0\u3323\0\u2ced"+
    "\0\u3358\0\u338d\0\u33c2\0\u33f7\0\u342c\0\u3461\0\u3496\0\u34cb"+
    "\0\u3500\0\u3535\0\u356a\0\u359f\0\u35d4\0\u3609\0\u35d4\0\u363e"+
    "\0\u3673\0\u36a8\0\u36dd\0\u3712\0\u3747\0\u377c\0\u37b1\0\u37e6"+
    "\0\u381b\0\u3850\0\u3885\0\u38ba\0\u38ef\0\u3924\0\u3959\0\u2c83"+
    "\0\u398e\0\u39c3\0\u39f8\0\u30a7\0\u3a2d\0\u3a62\0\u3a97\0\u3acc"+
    "\0\u3b01\0\u3b36\0\u3b6b\0\u3ba0\0\u3bd5\0\u3c0a\0\u3c3f\0\u3c74"+
    "\0\u3ca9\0\u3cde\0\u3d13\0\u3d48\0\u3d7d\0\u3d48\0\u3db2\0\u3de7"+
    "\0\u3e1c\0\u3e51\0\u3e86\0\u3ebb\0\u3ef0\0\u3f25\0\u3f5a\0\u3f8f"+
    "\0\u3fc4\0\u3ff9\0\u402e\0\u4063\0\u4098\0\u40cd\0\u4102\0\u4137"+
    "\0\u416c\0\u41a1\0\u41d6\0\u420b\0\u4240\0\u4275\0\u42aa\0\u42df"+
    "\0\u4314\0\u4349\0\u437e\0\u43b3\0\u43e8\0\u441d\0\u4452\0\u4487";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[384];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\5\2\6\1\7"+
    "\1\10\1\11\1\12\1\13\2\6\1\14\3\6\1\2"+
    "\1\15\1\6\1\2\1\16\1\17\2\6\1\20\3\6"+
    "\1\21\1\22\1\23\1\24\1\17\1\25\1\26\1\17"+
    "\1\27\1\2\1\30\4\6\1\17\4\6\1\2\1\17"+
    "\66\0\1\3\1\31\1\32\1\0\1\32\3\6\2\0"+
    "\1\33\1\0\6\6\1\34\2\6\2\0\1\35\2\6"+
    "\1\0\3\6\1\36\12\0\4\6\1\0\4\6\1\37"+
    "\2\0\1\40\1\6\1\0\2\6\1\40\22\6\2\40"+
    "\17\6\3\40\10\6\3\0\1\5\1\0\1\5\32\0"+
    "\1\22\1\23\24\0\1\6\1\31\1\32\1\0\1\32"+
    "\3\6\4\0\6\6\1\34\2\6\2\0\1\35\2\6"+
    "\1\0\3\6\1\36\12\0\4\6\1\0\4\6\12\0"+
    "\1\41\54\0\2\42\1\43\6\42\1\44\53\42\2\45"+
    "\1\46\7\45\1\44\52\45\1\0\1\47\64\0\1\6"+
    "\1\31\1\32\1\0\1\32\3\6\4\0\6\6\1\34"+
    "\2\6\2\0\1\35\1\50\1\6\1\0\3\6\1\36"+
    "\12\0\4\6\1\0\4\6\3\0\1\6\1\31\1\32"+
    "\1\0\1\32\3\6\4\0\2\6\1\51\3\6\1\34"+
    "\2\6\2\0\1\35\2\6\1\0\3\6\1\36\12\0"+
    "\4\6\1\52\4\6\3\0\1\53\1\54\3\0\1\53"+
    "\2\55\4\0\6\55\1\0\2\55\3\0\2\53\1\0"+
    "\3\55\13\0\3\53\1\55\1\0\4\55\3\0\1\56"+
    "\1\57\3\0\2\56\5\0\3\56\1\60\2\56\1\0"+
    "\2\56\3\0\2\56\1\0\1\61\1\62\1\56\13\0"+
    "\1\56\1\63\1\64\1\56\1\0\4\56\5\0\1\22"+
    "\1\0\1\22\62\0\1\23\1\0\1\23\122\0\1\65"+
    "\66\0\1\66\57\0\1\67\74\0\1\70\64\0\1\71"+
    "\17\0\1\32\1\0\1\32\22\0\1\35\6\0\1\36"+
    "\26\0\1\72\1\73\1\35\1\0\1\35\2\72\5\0"+
    "\6\72\1\0\2\72\3\0\2\72\1\0\3\72\13\0"+
    "\4\72\1\0\4\72\3\0\1\74\1\31\1\6\1\0"+
    "\1\6\1\74\2\6\4\0\6\6\1\34\2\6\2\0"+
    "\1\35\2\74\1\0\3\6\1\36\12\0\3\74\1\6"+
    "\1\0\4\6\50\0\1\75\16\0\2\42\1\43\6\42"+
    "\1\76\53\42\2\45\1\46\7\45\1\77\52\45\1\0"+
    "\1\47\13\0\1\37\1\0\1\100\1\101\1\0\1\102"+
    "\6\0\1\103\2\0\1\104\1\105\14\0\1\106\1\0"+
    "\1\107\3\0\1\110\1\0\1\111\1\37\2\0\1\6"+
    "\1\31\1\32\1\0\1\32\3\6\4\0\6\6\1\34"+
    "\2\6\2\0\1\35\1\6\1\112\1\0\3\6\1\36"+
    "\12\0\4\6\1\0\4\6\3\0\1\6\1\31\1\32"+
    "\1\0\1\32\3\6\4\0\6\6\1\34\1\6\1\113"+
    "\2\0\1\35\2\6\1\0\3\6\1\36\12\0\4\6"+
    "\1\0\4\6\3\0\1\114\4\0\1\114\17\0\1\115"+
    "\2\0\2\114\17\0\3\114\11\0\1\116\1\54\3\0"+
    "\1\116\2\55\4\0\6\55\1\0\2\55\3\0\2\116"+
    "\1\0\3\55\13\0\3\116\1\55\1\0\4\55\3\0"+
    "\1\117\1\55\1\0\2\55\1\117\22\55\2\117\17\55"+
    "\3\117\10\55\1\0\1\55\1\54\3\0\3\55\4\0"+
    "\6\55\1\0\2\55\3\0\2\55\1\0\3\55\13\0"+
    "\4\55\1\0\4\55\2\0\1\120\1\56\1\121\3\120"+
    "\3\56\1\0\3\120\6\56\1\120\2\56\3\120\2\56"+
    "\1\120\3\56\1\122\1\120\1\122\10\120\4\56\1\120"+
    "\4\56\2\120\1\0\1\123\1\56\1\0\2\56\1\123"+
    "\22\56\2\123\17\56\3\123\10\56\1\120\1\56\1\121"+
    "\3\120\3\56\1\0\3\120\6\56\1\120\2\56\3\120"+
    "\2\56\1\120\1\124\2\56\1\122\1\120\1\122\10\120"+
    "\4\56\1\120\4\56\3\120\1\56\1\121\3\120\3\56"+
    "\1\0\3\120\6\56\1\120\2\56\3\120\1\125\1\56"+
    "\1\120\3\56\1\122\1\120\1\122\10\120\4\56\1\120"+
    "\4\56\3\120\1\56\1\121\3\120\3\56\1\0\3\120"+
    "\6\56\1\120\2\56\3\120\1\56\1\126\1\120\3\56"+
    "\1\122\1\120\1\122\10\120\4\56\1\120\4\56\3\120"+
    "\1\56\1\121\3\120\3\56\1\0\3\120\6\56\1\120"+
    "\2\56\3\120\2\56\1\120\2\56\1\127\1\122\1\120"+
    "\1\122\10\120\4\56\1\120\4\56\3\120\1\56\1\121"+
    "\3\120\3\56\1\0\3\120\6\56\1\120\2\56\3\120"+
    "\2\56\1\120\3\56\1\122\1\120\1\122\10\120\4\56"+
    "\1\120\1\56\1\130\2\56\2\120\43\65\1\131\21\65"+
    "\10\0\1\132\131\0\1\133\10\0\1\72\1\73\1\32"+
    "\1\0\1\32\3\72\4\0\6\72\1\0\2\72\2\0"+
    "\1\35\2\72\1\0\3\72\1\36\12\0\4\72\1\0"+
    "\4\72\3\0\1\134\1\72\1\0\2\72\1\134\22\72"+
    "\2\134\17\72\3\134\10\72\1\0\1\135\1\31\1\6"+
    "\1\0\1\6\1\135\2\6\4\0\6\6\1\34\2\6"+
    "\2\0\1\35\2\135\1\0\3\6\1\36\12\0\3\135"+
    "\1\6\1\0\4\6\34\0\1\136\53\0\1\37\62\0"+
    "\1\100\101\0\1\37\22\0\1\37\22\0\1\37\16\0"+
    "\1\37\104\0\1\37\2\0\1\37\36\0\1\137\67\0"+
    "\1\37\111\0\1\37\63\0\1\110\5\0\1\6\1\31"+
    "\1\32\1\0\1\32\3\6\4\0\6\6\1\34\1\6"+
    "\1\140\2\0\1\35\2\6\1\0\3\6\1\36\12\0"+
    "\4\6\1\0\4\6\3\0\1\6\1\31\1\32\1\0"+
    "\1\32\3\6\4\0\6\6\1\141\2\6\2\0\1\35"+
    "\2\6\1\0\3\6\1\36\12\0\4\6\1\0\4\6"+
    "\3\0\1\142\4\0\1\142\1\0\1\143\15\0\1\144"+
    "\2\0\2\142\17\0\3\142\36\0\1\144\37\0\1\145"+
    "\1\54\3\0\1\145\2\55\4\0\6\55\1\0\2\55"+
    "\3\0\2\145\1\0\3\55\13\0\3\145\1\55\1\0"+
    "\4\55\3\0\1\146\1\54\1\55\1\0\1\55\1\146"+
    "\2\55\4\0\6\55\1\0\2\55\3\0\2\146\1\0"+
    "\3\55\13\0\3\146\1\55\1\0\4\55\2\0\11\120"+
    "\1\0\25\120\1\122\1\120\1\122\24\120\1\123\1\56"+
    "\1\120\2\56\1\123\22\56\2\123\4\56\1\147\1\56"+
    "\1\147\10\56\3\123\10\56\1\120\1\150\1\121\1\56"+
    "\1\120\1\56\1\150\2\56\1\0\3\120\6\56\1\120"+
    "\2\56\3\120\2\150\1\120\3\56\1\122\1\120\1\122"+
    "\10\120\3\150\1\56\1\120\4\56\3\120\1\56\1\121"+
    "\3\120\3\56\1\0\3\120\6\56\1\120\2\56\3\120"+
    "\2\56\1\120\1\56\1\151\1\56\1\122\1\120\1\122"+
    "\10\120\4\56\1\120\4\56\3\120\1\56\1\121\3\120"+
    "\3\56\1\0\3\120\6\56\1\120\2\56\3\120\2\56"+
    "\1\120\3\56\1\122\1\120\1\122\10\120\1\152\3\56"+
    "\1\120\4\56\3\120\1\56\1\121\3\120\3\56\1\0"+
    "\3\120\5\56\1\153\1\120\2\56\3\120\2\56\1\120"+
    "\3\56\1\122\1\120\1\122\10\120\4\56\1\120\4\56"+
    "\3\120\1\56\1\121\3\120\3\56\1\0\3\120\4\56"+
    "\1\154\1\56\1\120\2\56\3\120\2\56\1\120\3\56"+
    "\1\122\1\120\1\122\10\120\4\56\1\120\4\56\3\120"+
    "\1\56\1\121\3\120\3\56\1\0\3\120\6\56\1\120"+
    "\2\56\3\120\1\56\1\155\1\120\3\56\1\122\1\120"+
    "\1\122\10\120\4\56\1\120\4\56\2\120\42\65\1\156"+
    "\1\131\21\65\10\0\1\157\115\0\1\160\24\0\1\161"+
    "\1\73\1\72\1\0\1\72\1\161\2\72\4\0\6\72"+
    "\1\0\2\72\2\0\1\35\2\161\1\0\3\72\1\36"+
    "\12\0\3\161\1\72\1\0\4\72\3\0\1\162\1\31"+
    "\1\6\1\0\1\6\1\162\2\6\4\0\6\6\1\34"+
    "\2\6\2\0\1\35\2\162\1\0\3\6\1\36\12\0"+
    "\3\162\1\6\1\0\4\6\54\0\1\37\34\0\1\37"+
    "\43\0\1\6\1\31\1\32\1\0\1\32\3\6\4\0"+
    "\6\6\1\34\1\163\1\6\2\0\1\35\2\6\1\0"+
    "\3\6\1\36\12\0\4\6\1\0\4\6\2\0\2\164"+
    "\1\165\11\164\1\166\50\164\1\0\1\167\4\0\1\167"+
    "\1\0\1\143\15\0\1\170\2\0\2\167\17\0\3\167"+
    "\11\0\1\171\4\0\1\171\22\0\2\171\17\0\3\171"+
    "\36\0\1\170\37\0\1\172\1\54\3\0\1\172\2\55"+
    "\4\0\6\55\1\0\2\55\3\0\2\172\1\0\3\55"+
    "\13\0\3\172\1\55\1\0\4\55\3\0\1\173\1\54"+
    "\1\55\1\0\1\55\1\173\2\55\4\0\6\55\1\0"+
    "\2\55\3\0\2\173\1\0\3\55\13\0\3\173\1\55"+
    "\1\0\4\55\2\0\1\120\1\174\1\121\1\56\1\120"+
    "\1\56\1\174\2\56\1\0\3\120\6\56\1\120\2\56"+
    "\3\120\2\174\1\120\3\56\1\122\1\120\1\122\10\120"+
    "\3\174\1\56\1\120\4\56\3\120\1\56\1\121\3\120"+
    "\3\56\1\0\3\120\6\56\1\120\2\56\3\120\2\56"+
    "\1\120\2\56\1\175\1\122\1\120\1\122\10\120\4\56"+
    "\1\120\4\56\3\120\1\56\1\121\3\120\3\56\1\0"+
    "\3\120\3\56\1\176\2\56\1\120\2\56\3\120\2\56"+
    "\1\120\3\56\1\122\1\120\1\122\10\120\4\56\1\120"+
    "\4\56\3\120\1\56\1\121\3\120\3\56\1\0\3\120"+
    "\6\56\1\120\2\56\3\120\1\177\1\56\1\120\3\56"+
    "\1\122\1\120\1\122\10\120\4\56\1\120\4\56\3\120"+
    "\1\56\1\121\3\120\3\56\1\0\3\120\1\56\1\200"+
    "\4\56\1\120\2\56\3\120\2\56\1\120\3\56\1\122"+
    "\1\120\1\122\10\120\4\56\1\120\4\56\3\120\1\56"+
    "\1\121\3\120\3\56\1\0\3\120\2\56\1\201\3\56"+
    "\1\120\2\56\3\120\2\56\1\120\3\56\1\122\1\120"+
    "\1\122\10\120\4\56\1\120\4\56\2\120\20\0\1\202"+
    "\45\0\1\203\1\73\1\72\1\0\1\72\1\203\2\72"+
    "\4\0\6\72\1\0\2\72\2\0\1\35\2\203\1\0"+
    "\3\72\1\36\12\0\3\203\1\72\1\0\4\72\3\0"+
    "\1\204\1\31\1\6\1\0\1\6\1\204\2\6\4\0"+
    "\6\6\1\34\2\6\2\0\1\35\2\204\1\0\3\6"+
    "\1\36\12\0\3\204\1\6\1\0\4\6\3\0\1\6"+
    "\1\31\1\32\1\0\1\32\3\6\4\0\2\6\1\205"+
    "\3\6\1\34\2\6\2\0\1\35\2\6\1\0\3\6"+
    "\1\36\12\0\4\6\1\0\4\6\2\0\2\164\1\165"+
    "\11\164\1\206\50\164\1\0\1\207\4\0\1\207\1\0"+
    "\1\143\15\0\1\210\2\0\2\207\17\0\3\207\36\0"+
    "\1\210\37\0\1\211\4\0\1\211\22\0\2\211\17\0"+
    "\3\211\11\0\1\212\1\54\3\0\1\212\2\55\4\0"+
    "\6\55\1\0\2\55\3\0\2\212\1\0\3\55\13\0"+
    "\3\212\1\55\1\0\4\55\3\0\1\213\1\54\1\55"+
    "\1\0\1\55\1\213\2\55\4\0\6\55\1\0\2\55"+
    "\3\0\2\213\1\0\3\55\13\0\3\213\1\55\1\0"+
    "\4\55\2\0\1\120\1\214\1\121\1\56\1\120\1\56"+
    "\1\214\2\56\1\0\3\120\6\56\1\120\2\56\3\120"+
    "\2\214\1\120\3\56\1\122\1\120\1\122\10\120\3\214"+
    "\1\56\1\120\4\56\3\120\1\56\1\121\3\120\3\56"+
    "\1\0\3\120\2\56\1\215\3\56\1\120\2\56\3\120"+
    "\2\56\1\120\3\56\1\122\1\120\1\122\10\120\4\56"+
    "\1\120\4\56\3\120\1\56\1\121\3\120\3\56\1\0"+
    "\3\120\6\56\1\120\2\56\3\120\1\56\1\216\1\120"+
    "\3\56\1\122\1\120\1\122\10\120\4\56\1\120\4\56"+
    "\3\120\1\56\1\121\3\120\2\56\1\217\1\0\3\120"+
    "\6\56\1\120\2\56\3\120\2\56\1\120\3\56\1\122"+
    "\1\120\1\122\10\120\4\56\1\120\4\56\3\120\1\56"+
    "\1\121\3\120\3\56\1\0\3\120\1\220\5\56\1\120"+
    "\2\56\3\120\2\56\1\120\3\56\1\122\1\120\1\122"+
    "\10\120\4\56\1\120\4\56\2\120\34\0\1\221\31\0"+
    "\1\222\1\73\1\72\1\0\1\72\1\222\2\72\4\0"+
    "\6\72\1\0\2\72\2\0\1\35\2\222\1\0\3\72"+
    "\1\36\12\0\3\222\1\72\1\0\4\72\3\0\1\223"+
    "\1\31\1\6\1\0\1\6\1\223\2\6\4\0\6\6"+
    "\1\34\2\6\2\0\1\35\2\223\1\0\3\6\1\36"+
    "\12\0\3\223\1\6\1\0\4\6\3\0\1\6\1\31"+
    "\1\32\1\0\1\32\3\6\4\0\6\6\1\34\1\6"+
    "\1\224\2\0\1\35\2\6\1\0\3\6\1\36\12\0"+
    "\4\6\1\0\4\6\3\0\1\225\4\0\1\225\1\0"+
    "\1\143\15\0\1\226\2\0\2\225\17\0\3\225\36\0"+
    "\1\226\37\0\1\227\4\0\1\227\22\0\2\227\17\0"+
    "\3\227\11\0\1\230\1\54\3\0\1\230\2\55\4\0"+
    "\6\55\1\0\2\55\3\0\2\230\1\0\3\55\13\0"+
    "\3\230\1\55\1\0\4\55\3\0\1\231\1\54\1\55"+
    "\1\0\1\55\1\231\2\55\4\0\6\55\1\0\2\55"+
    "\3\0\2\231\1\0\3\55\13\0\3\231\1\55\1\0"+
    "\4\55\2\0\1\120\1\232\1\121\1\56\1\120\1\56"+
    "\1\232\2\56\1\0\3\120\6\56\1\120\2\56\3\120"+
    "\2\232\1\120\3\56\1\122\1\120\1\122\10\120\3\232"+
    "\1\56\1\120\4\56\3\120\1\56\1\121\3\120\3\56"+
    "\1\0\3\120\1\56\1\233\4\56\1\120\2\56\3\120"+
    "\2\56\1\120\3\56\1\122\1\120\1\122\10\120\4\56"+
    "\1\120\4\56\3\120\1\56\1\121\3\120\3\56\1\0"+
    "\3\120\6\56\1\120\2\56\3\120\2\56\1\120\3\56"+
    "\1\122\1\120\1\122\10\120\1\56\1\234\2\56\1\120"+
    "\4\56\3\120\1\56\1\121\3\120\3\56\1\0\3\120"+
    "\6\56\1\120\2\56\3\120\1\235\1\56\1\120\3\56"+
    "\1\122\1\120\1\122\10\120\4\56\1\120\4\56\2\120"+
    "\35\0\1\236\30\0\1\237\1\73\1\72\1\0\1\72"+
    "\1\237\2\72\4\0\6\72\1\0\2\72\2\0\1\35"+
    "\2\237\1\0\3\72\1\36\12\0\3\237\1\72\1\0"+
    "\4\72\3\0\1\6\1\31\1\6\1\0\4\6\4\0"+
    "\6\6\1\34\2\6\2\0\1\35\2\6\1\0\3\6"+
    "\1\36\12\0\4\6\1\0\4\6\3\0\1\240\4\0"+
    "\1\240\1\0\1\143\15\0\1\241\2\0\2\240\17\0"+
    "\3\240\36\0\1\241\37\0\1\242\4\0\1\242\22\0"+
    "\2\242\17\0\3\242\11\0\1\243\1\54\1\55\1\0"+
    "\1\55\1\243\2\55\4\0\6\55\1\0\2\55\3\0"+
    "\2\243\1\0\3\55\13\0\3\243\1\55\1\0\4\55"+
    "\2\0\1\120\1\244\1\121\1\56\1\120\1\56\1\244"+
    "\2\56\1\0\3\120\6\56\1\120\2\56\3\120\2\244"+
    "\1\120\3\56\1\122\1\120\1\122\10\120\3\244\1\56"+
    "\1\120\4\56\2\120\1\245\1\246\1\247\1\250\1\245"+
    "\1\250\3\246\1\251\1\252\1\245\1\120\6\246\1\120"+
    "\1\253\1\246\3\245\2\246\1\245\3\246\1\254\1\245"+
    "\1\255\10\245\4\246\1\245\4\246\2\245\1\120\1\56"+
    "\1\121\3\120\3\56\1\0\3\120\6\56\1\120\2\56"+
    "\3\120\1\56\1\256\1\120\3\56\1\122\1\120\1\122"+
    "\10\120\4\56\1\120\4\56\3\120\1\56\1\121\3\120"+
    "\3\56\1\0\3\120\1\56\1\257\4\56\1\120\2\56"+
    "\3\120\2\56\1\120\3\56\1\122\1\120\1\122\10\120"+
    "\4\56\1\120\4\56\2\120\36\0\1\260\27\0\1\261"+
    "\1\73\1\72\1\0\1\72\1\261\2\72\4\0\6\72"+
    "\1\0\2\72\2\0\1\35\2\261\1\0\3\72\1\36"+
    "\12\0\3\261\1\72\1\0\4\72\12\0\1\143\55\0"+
    "\1\262\4\0\1\262\22\0\2\262\17\0\3\262\11\0"+
    "\1\55\1\54\1\55\1\0\4\55\4\0\6\55\1\0"+
    "\2\55\3\0\2\55\1\0\3\55\13\0\4\55\1\0"+
    "\4\55\2\0\1\120\1\56\1\121\1\56\1\120\4\56"+
    "\1\0\3\120\6\56\1\120\2\56\3\120\2\56\1\120"+
    "\3\56\1\122\1\120\1\122\10\120\4\56\1\120\4\56"+
    "\2\120\2\245\1\263\6\245\1\0\1\120\1\245\1\120"+
    "\6\245\1\120\13\245\1\254\1\245\1\255\24\245\1\246"+
    "\1\247\3\245\3\246\1\0\1\120\1\245\1\120\6\246"+
    "\1\120\2\246\3\245\2\246\1\245\3\246\1\254\1\245"+
    "\1\255\10\245\4\246\1\245\4\246\3\245\1\264\1\265"+
    "\1\245\2\246\1\264\22\246\2\264\4\246\1\266\1\246"+
    "\1\267\10\246\3\264\10\246\2\245\1\263\1\250\1\245"+
    "\1\250\3\245\1\251\1\252\1\245\1\120\6\245\1\120"+
    "\1\270\12\245\1\254\1\245\1\255\23\245\2\251\1\271"+
    "\6\251\1\272\53\251\2\252\1\273\6\252\1\274\1\275"+
    "\24\252\1\276\1\252\1\276\23\252\1\245\1\246\1\247"+
    "\3\245\3\246\1\0\1\120\1\245\1\120\2\246\1\277"+
    "\3\246\1\120\2\246\3\245\2\246\1\245\3\246\1\254"+
    "\1\245\1\255\10\245\4\246\1\245\4\246\2\245\2\300"+
    "\1\301\6\300\2\0\1\300\1\0\6\300\1\0\13\300"+
    "\1\254\25\300\1\120\1\56\1\121\3\120\3\56\1\0"+
    "\3\120\6\56\1\120\2\56\3\120\2\56\1\120\3\56"+
    "\1\122\1\120\1\122\10\120\2\56\1\302\1\56\1\120"+
    "\4\56\3\120\1\56\1\121\1\303\1\120\1\303\3\56"+
    "\1\304\1\305\2\120\6\56\1\120\2\56\3\120\2\56"+
    "\1\120\3\56\1\122\1\120\1\122\10\120\4\56\1\120"+
    "\4\56\2\120\17\0\1\306\46\0\1\72\1\73\1\72"+
    "\1\0\4\72\4\0\6\72\1\0\2\72\2\0\1\35"+
    "\2\72\1\0\3\72\1\36\12\0\4\72\1\0\4\72"+
    "\3\0\1\307\4\0\1\307\22\0\2\307\17\0\3\307"+
    "\10\0\2\245\1\263\6\245\1\300\25\245\1\254\1\245"+
    "\1\255\24\245\1\310\1\247\1\246\1\245\1\246\1\310"+
    "\2\246\1\0\1\120\1\245\1\120\6\246\1\120\2\246"+
    "\3\245\2\310\1\245\3\246\1\254\1\245\1\255\10\245"+
    "\3\310\1\246\1\245\4\246\3\245\1\246\1\247\3\245"+
    "\3\246\1\300\3\245\6\246\1\245\2\246\3\245\2\246"+
    "\1\245\3\246\1\254\1\245\1\255\10\245\4\246\1\245"+
    "\4\246\4\245\1\263\6\245\1\0\1\120\1\245\1\120"+
    "\2\245\1\311\3\245\1\120\13\245\1\254\1\245\1\255"+
    "\23\245\2\251\1\271\6\251\1\312\53\251\1\0\1\313"+
    "\1\314\1\315\1\0\1\315\2\313\5\0\6\313\1\0"+
    "\2\313\3\0\2\313\1\0\3\313\1\316\12\0\4\313"+
    "\1\0\4\313\2\0\2\252\1\273\6\252\1\274\1\317"+
    "\24\252\1\276\1\252\1\276\23\252\2\274\1\320\7\274"+
    "\1\272\52\274\1\120\1\321\1\322\1\323\1\120\1\323"+
    "\2\321\1\120\1\0\3\120\6\321\1\120\2\321\3\120"+
    "\2\321\1\120\3\321\1\316\1\120\1\122\10\120\4\321"+
    "\1\120\4\321\2\120\1\245\1\246\1\247\3\245\3\246"+
    "\1\0\1\120\1\245\1\120\6\246\1\120\1\246\1\324"+
    "\3\245\2\246\1\245\3\246\1\254\1\245\1\255\10\245"+
    "\4\246\1\245\4\246\2\245\2\300\1\301\34\300\1\254"+
    "\25\300\1\120\1\56\1\121\3\120\3\56\1\0\3\120"+
    "\6\56\1\120\2\56\3\120\1\325\1\56\1\120\3\56"+
    "\1\122\1\120\1\122\10\120\4\56\1\120\4\56\5\120"+
    "\1\303\1\120\1\303\3\120\1\304\1\305\24\120\1\122"+
    "\1\120\1\122\23\120\2\304\1\326\6\304\1\327\53\304"+
    "\2\305\1\330\6\305\1\331\1\120\24\305\1\332\1\305"+
    "\1\332\23\305\16\0\1\333\46\0\1\245\1\334\1\247"+
    "\1\246\1\245\1\246\1\334\2\246\1\0\1\120\1\245"+
    "\1\120\6\246\1\120\2\246\3\245\2\334\1\245\3\246"+
    "\1\254\1\245\1\255\10\245\3\334\1\246\1\245\4\246"+
    "\4\245\1\263\6\245\1\0\1\120\1\245\1\120\6\245"+
    "\1\120\1\245\1\335\11\245\1\254\1\245\1\255\23\245"+
    "\1\251\1\336\1\337\1\340\1\251\1\340\2\336\1\251"+
    "\1\272\3\251\6\336\1\251\2\336\3\251\2\336\1\251"+
    "\3\336\1\341\12\251\4\336\1\251\4\336\2\251\1\0"+
    "\1\313\1\314\1\342\1\0\1\342\3\313\4\0\6\313"+
    "\1\0\2\313\2\0\1\315\2\313\1\0\3\313\1\316"+
    "\12\0\4\313\1\0\4\313\3\0\1\343\1\313\1\0"+
    "\2\313\1\343\22\313\2\343\17\313\3\343\10\313\1\0"+
    "\1\313\1\314\1\315\1\0\1\315\2\313\5\0\6\313"+
    "\1\0\2\313\3\0\2\313\1\0\3\313\13\0\4\313"+
    "\1\0\4\313\2\0\1\252\1\344\1\345\1\346\1\252"+
    "\1\346\2\344\1\252\1\274\1\275\2\252\6\344\1\252"+
    "\2\344\3\252\2\344\1\252\3\344\1\347\1\252\1\276"+
    "\10\252\4\344\1\252\4\344\2\252\2\274\1\320\7\274"+
    "\1\350\52\274\1\120\1\321\1\322\1\351\1\120\1\351"+
    "\3\321\1\0\3\120\6\321\1\120\2\321\2\120\1\323"+
    "\2\321\1\120\3\321\1\316\1\120\1\122\10\120\4\321"+
    "\1\120\4\321\3\120\1\352\1\321\1\120\2\321\1\352"+
    "\2\321\1\313\17\321\2\352\4\321\1\353\1\321\1\353"+
    "\10\321\3\352\10\321\1\120\1\321\1\322\1\323\1\120"+
    "\1\323\2\321\1\120\1\0\3\120\6\321\1\120\2\321"+
    "\3\120\2\321\1\120\3\321\1\122\1\120\1\122\10\120"+
    "\4\321\1\120\4\321\2\120\1\245\1\246\1\247\3\245"+
    "\3\246\1\0\1\120\1\245\1\120\6\246\1\354\2\246"+
    "\3\245\2\246\1\245\3\246\1\254\1\245\1\255\10\245"+
    "\4\246\1\245\4\246\2\245\2\304\1\326\6\304\1\355"+
    "\53\304\3\0\1\327\1\0\1\327\31\0\1\356\25\0"+
    "\2\305\1\330\6\305\1\331\25\305\1\332\1\305\1\332"+
    "\23\305\2\331\1\357\7\331\1\327\52\331\32\0\1\360"+
    "\32\0\1\245\1\361\1\247\1\246\1\245\1\246\1\361"+
    "\2\246\1\0\1\120\1\245\1\120\6\246\1\120\2\246"+
    "\3\245\2\361\1\245\3\246\1\254\1\245\1\255\10\245"+
    "\3\361\1\246\1\245\4\246\4\245\1\263\6\245\1\0"+
    "\1\120\1\245\1\120\6\245\1\354\13\245\1\254\1\245"+
    "\1\255\23\245\1\251\1\336\1\337\1\362\1\251\1\362"+
    "\3\336\1\272\3\251\6\336\1\251\2\336\2\251\1\340"+
    "\2\336\1\251\3\336\1\341\12\251\4\336\1\251\4\336"+
    "\3\251\1\363\1\364\1\251\2\336\1\363\2\336\1\365"+
    "\17\336\2\363\17\336\3\363\10\336\1\251\1\336\1\337"+
    "\1\340\1\251\1\340\2\336\1\251\1\272\3\251\6\336"+
    "\1\251\2\336\3\251\2\336\1\251\3\336\13\251\4\336"+
    "\1\251\4\336\2\251\3\0\1\342\1\0\1\342\22\0"+
    "\1\315\6\0\1\316\26\0\1\366\1\314\1\313\1\0"+
    "\1\313\1\366\2\313\4\0\6\313\1\0\2\313\2\0"+
    "\1\315\2\366\1\0\3\313\1\316\12\0\3\366\1\313"+
    "\1\0\4\313\2\0\1\252\1\344\1\345\1\367\1\252"+
    "\1\367\3\344\1\274\1\275\2\252\6\344\1\252\2\344"+
    "\2\252\1\346\2\344\1\252\3\344\1\347\1\252\1\276"+
    "\10\252\4\344\1\252\4\344\3\252\1\370\1\371\1\252"+
    "\2\344\1\370\2\344\1\372\1\373\16\344\2\370\4\344"+
    "\1\374\1\344\1\374\10\344\3\370\10\344\1\252\1\344"+
    "\1\345\1\346\1\252\1\346\2\344\1\252\1\274\1\275"+
    "\2\252\6\344\1\252\2\344\3\252\2\344\1\252\3\344"+
    "\1\276\1\252\1\276\10\252\4\344\1\252\4\344\2\252"+
    "\1\274\1\372\1\375\1\376\1\274\1\376\2\372\2\274"+
    "\1\272\2\274\6\372\1\274\2\372\3\274\2\372\1\274"+
    "\3\372\1\347\12\274\4\372\1\274\4\372\2\274\3\120"+
    "\1\351\1\120\1\351\3\120\1\0\16\120\1\323\6\120"+
    "\1\316\1\120\1\122\24\120\1\377\1\322\1\321\1\120"+
    "\1\321\1\377\2\321\1\0\3\120\6\321\1\120\2\321"+
    "\2\120\1\323\2\377\1\120\3\321\1\316\1\120\1\122"+
    "\10\120\3\377\1\321\1\120\4\321\2\120\2\u0100\1\u0101"+
    "\1\354\1\u0100\1\354\3\u0100\1\u0102\1\u0103\1\u0100\1\275"+
    "\6\u0100\1\120\13\u0100\1\u0104\1\u0100\1\u0104\23\u0100\2\304"+
    "\1\326\1\355\1\304\1\355\3\304\1\327\25\304\1\u0105"+
    "\25\304\2\331\1\357\7\331\1\u0106\52\331\21\0\1\u0107"+
    "\43\0\1\245\1\u0108\1\247\1\246\1\245\1\246\1\u0108"+
    "\2\246\1\0\1\120\1\245\1\120\6\246\1\120\2\246"+
    "\3\245\2\u0108\1\245\3\246\1\254\1\245\1\255\10\245"+
    "\3\u0108\1\246\1\245\4\246\2\245\2\251\1\271\1\362"+
    "\1\251\1\362\3\251\1\272\16\251\1\340\6\251\1\341"+
    "\26\251\1\u0109\1\337\1\336\1\251\1\336\1\u0109\2\336"+
    "\1\272\3\251\6\336\1\251\2\336\2\251\1\340\2\u0109"+
    "\1\251\3\336\1\341\12\251\3\u0109\1\336\1\251\4\336"+
    "\3\251\1\336\1\337\1\362\1\251\1\362\3\336\1\312"+
    "\3\251\6\336\1\251\2\336\2\251\1\340\2\336\1\251"+
    "\3\336\1\341\12\251\4\336\1\251\4\336\3\251\1\336"+
    "\1\337\1\u010a\1\251\1\u010a\3\336\1\272\3\251\6\336"+
    "\1\251\2\336\2\251\1\340\2\336\1\251\3\336\1\341"+
    "\12\251\4\336\1\251\4\336\2\251\1\0\1\u010b\1\314"+
    "\1\313\1\0\1\313\1\u010b\2\313\4\0\6\313\1\0"+
    "\2\313\2\0\1\315\2\u010b\1\0\3\313\1\316\12\0"+
    "\3\u010b\1\313\1\0\4\313\2\0\2\252\1\273\1\367"+
    "\1\252\1\367\3\252\1\274\1\275\15\252\1\346\6\252"+
    "\1\347\1\252\1\276\24\252\1\u010c\1\345\1\344\1\252"+
    "\1\344\1\u010c\2\344\1\274\1\275\2\252\6\344\1\252"+
    "\2\344\2\252\1\346\2\u010c\1\252\3\344\1\347\1\252"+
    "\1\276\10\252\3\u010c\1\344\1\252\4\344\3\252\1\344"+
    "\1\345\1\367\1\252\1\367\3\344\1\274\1\317\2\252"+
    "\6\344\1\252\2\344\2\252\1\346\2\344\1\252\3\344"+
    "\1\347\1\252\1\276\10\252\4\344\1\252\4\344\2\252"+
    "\1\274\1\372\1\375\1\u010d\1\274\1\u010d\3\372\1\274"+
    "\1\272\2\274\6\372\1\274\2\372\2\274\1\376\2\372"+
    "\1\274\3\372\1\347\12\274\4\372\1\274\4\372\2\274"+
    "\1\252\1\344\1\345\1\u010e\1\252\1\u010e\3\344\1\274"+
    "\1\275\2\252\6\344\1\252\2\344\2\252\1\346\2\344"+
    "\1\252\3\344\1\347\1\252\1\276\10\252\4\344\1\252"+
    "\4\344\2\252\1\274\1\u010f\1\u0110\1\274\2\372\1\u010f"+
    "\3\372\1\u0111\16\372\2\u010f\17\372\3\u010f\10\372\1\274"+
    "\1\372\1\375\1\376\1\274\1\376\2\372\2\274\1\272"+
    "\2\274\6\372\1\274\2\372\3\274\2\372\1\274\3\372"+
    "\13\274\4\372\1\274\4\372\2\274\1\120\1\u0112\1\322"+
    "\1\321\1\120\1\321\1\u0112\2\321\1\0\3\120\6\321"+
    "\1\120\2\321\2\120\1\323\2\u0112\1\120\3\321\1\316"+
    "\1\120\1\122\10\120\3\u0112\1\321\1\120\4\321\2\120"+
    "\2\u0100\1\u0101\6\u0100\1\0\1\120\1\u0100\1\275\6\u0100"+
    "\1\120\13\u0100\1\u0104\1\u0100\1\u0104\25\u0100\1\u0101\6\u0100"+
    "\1\u0113\2\u0100\1\u0114\22\u0100\1\u0104\1\u0100\1\u0104\23\u0100"+
    "\2\u0102\1\u0115\6\u0102\1\u0116\53\u0102\2\u0103\1\u0117\6\u0103"+
    "\1\u0118\1\u0119\24\u0103\1\u011a\1\u0103\1\u011a\23\u0103\2\u0113"+
    "\1\u011b\6\u0113\2\0\1\u0113\1\272\6\u0113\1\0\41\u0113"+
    "\2\331\1\357\1\u0106\1\331\1\u0106\4\331\1\327\24\331"+
    "\1\u011c\25\331\16\0\1\u011d\46\0\1\245\1\u011e\1\247"+
    "\1\246\1\245\1\246\1\u011e\2\246\1\0\1\120\1\245"+
    "\1\120\6\246\1\120\2\246\3\245\2\u011e\1\245\3\246"+
    "\1\254\1\245\1\255\10\245\3\u011e\1\246\1\245\4\246"+
    "\2\245\1\251\1\u011f\1\337\1\336\1\251\1\336\1\u011f"+
    "\2\336\1\272\3\251\6\336\1\251\2\336\2\251\1\340"+
    "\2\u011f\1\251\3\336\1\341\12\251\3\u011f\1\336\1\251"+
    "\4\336\3\251\1\336\1\337\1\u010a\1\251\1\u010a\2\336"+
    "\1\251\1\272\3\251\6\336\1\251\2\336\2\251\1\340"+
    "\2\336\1\251\3\336\1\341\12\251\4\336\1\251\4\336"+
    "\2\251\1\0\1\u0120\1\314\1\313\1\0\1\313\1\u0120"+
    "\2\313\4\0\6\313\1\0\2\313\2\0\1\315\2\u0120"+
    "\1\0\3\313\1\316\12\0\3\u0120\1\313\1\0\4\313"+
    "\2\0\1\252\1\u0121\1\345\1\344\1\252\1\344\1\u0121"+
    "\2\344\1\274\1\275\2\252\6\344\1\252\2\344\2\252"+
    "\1\346\2\u0121\1\252\3\344\1\347\1\252\1\276\10\252"+
    "\3\u0121\1\344\1\252\4\344\2\252\2\274\1\320\1\u010d"+
    "\1\274\1\u010d\4\274\1\272\15\274\1\376\6\274\1\347"+
    "\25\274\1\252\1\344\1\345\1\u010e\1\252\1\u010e\2\344"+
    "\1\252\1\274\1\275\2\252\6\344\1\252\2\344\2\252"+
    "\1\346\2\344\1\252\3\344\1\347\1\252\1\276\10\252"+
    "\4\344\1\252\4\344\2\252\1\274\1\u0122\1\375\1\372"+
    "\1\274\1\372\1\u0122\2\372\1\274\1\272\2\274\6\372"+
    "\1\274\2\372\2\274\1\376\2\u0122\1\274\3\372\1\347"+
    "\12\274\3\u0122\1\372\1\274\4\372\3\274\1\372\1\375"+
    "\1\u010d\1\274\1\u010d\3\372\1\274\1\350\2\274\6\372"+
    "\1\274\2\372\2\274\1\376\2\372\1\274\3\372\1\347"+
    "\12\274\4\372\1\274\4\372\3\274\1\372\1\375\1\u0123"+
    "\1\274\1\u0123\3\372\1\274\1\272\2\274\6\372\1\274"+
    "\2\372\2\274\1\376\2\372\1\274\3\372\1\347\12\274"+
    "\4\372\1\274\4\372\2\274\1\120\1\u0124\1\322\1\321"+
    "\1\120\1\321\1\u0124\2\321\1\0\3\120\6\321\1\120"+
    "\2\321\2\120\1\323\2\u0124\1\120\3\321\1\316\1\120"+
    "\1\122\10\120\3\u0124\1\321\1\120\4\321\2\120\1\u0100"+
    "\1\u0125\1\u0126\1\u0127\1\u0100\1\u0127\2\u0125\1\u0100\1\0"+
    "\1\120\1\u0100\1\275\6\u0125\1\120\2\u0125\3\u0100\2\u0125"+
    "\1\u0100\3\u0125\1\u0128\1\u0100\1\u0104\10\u0100\4\u0125\1\u0100"+
    "\4\u0125\2\u0100\2\u0102\1\u0115\6\u0102\1\u0129\53\u0102\3\0"+
    "\1\u0116\1\0\1\u0116\6\0\1\272\50\0\2\u0103\1\u0117"+
    "\6\u0103\1\u0118\1\u012a\24\u0103\1\u011a\1\u0103\1\u011a\23\u0103"+
    "\2\u0118\1\u012b\7\u0118\1\u0116\52\u0118\3\120\1\u0119\1\120"+
    "\1\u0119\3\120\1\0\2\120\1\275\22\120\1\122\1\120"+
    "\1\122\23\120\2\u0113\1\u011b\11\u0113\1\u012c\50\u0113\1\245"+
    "\1\246\1\247\1\246\1\245\4\246\1\0\1\120\1\245"+
    "\1\120\6\246\1\120\2\246\3\245\2\246\1\245\3\246"+
    "\1\254\1\245\1\255\10\245\4\246\1\245\4\246\2\245"+
    "\1\251\1\u012d\1\337\1\336\1\251\1\336\1\u012d\2\336"+
    "\1\272\3\251\6\336\1\251\2\336\2\251\1\340\2\u012d"+
    "\1\251\3\336\1\341\12\251\3\u012d\1\336\1\251\4\336"+
    "\2\251\1\0\1\u012e\1\314\1\313\1\0\1\313\1\u012e"+
    "\2\313\4\0\6\313\1\0\2\313\2\0\1\315\2\u012e"+
    "\1\0\3\313\1\316\12\0\3\u012e\1\313\1\0\4\313"+
    "\2\0\1\252\1\u012f\1\345\1\344\1\252\1\344\1\u012f"+
    "\2\344\1\274\1\275\2\252\6\344\1\252\2\344\2\252"+
    "\1\346\2\u012f\1\252\3\344\1\347\1\252\1\276\10\252"+
    "\3\u012f\1\344\1\252\4\344\2\252\1\274\1\u0130\1\375"+
    "\1\372\1\274\1\372\1\u0130\2\372\1\274\1\272\2\274"+
    "\6\372\1\274\2\372\2\274\1\376\2\u0130\1\274\3\372"+
    "\1\347\12\274\3\u0130\1\372\1\274\4\372\3\274\1\372"+
    "\1\375\1\u0123\1\274\1\u0123\2\372\2\274\1\272\2\274"+
    "\6\372\1\274\2\372\2\274\1\376\2\372\1\274\3\372"+
    "\1\347\12\274\4\372\1\274\4\372\2\274\1\120\1\u0131"+
    "\1\322\1\321\1\120\1\321\1\u0131\2\321\1\0\3\120"+
    "\6\321\1\120\2\321\2\120\1\323\2\u0131\1\120\3\321"+
    "\1\316\1\120\1\122\10\120\3\u0131\1\321\1\120\4\321"+
    "\2\120\1\u0100\1\u0125\1\u0126\1\u0132\1\u0100\1\u0132\3\u0125"+
    "\1\0\1\120\1\u0100\1\275\6\u0125\1\120\2\u0125\2\u0100"+
    "\1\u0127\2\u0125\1\u0100\3\u0125\1\u0128\1\u0100\1\u0104\10\u0100"+
    "\4\u0125\1\u0100\4\u0125\3\u0100\1\u0133\1\u0134\1\u0100\2\u0125"+
    "\1\u0133\2\u0125\1\u0135\2\u0125\1\u0136\14\u0125\2\u0133\4\u0125"+
    "\1\u0137\1\u0125\1\u0137\10\u0125\3\u0133\10\u0125\1\u0100\1\u0125"+
    "\1\u0126\1\u0127\1\u0100\1\u0127\2\u0125\1\u0100\1\0\1\120"+
    "\1\u0100\1\275\6\u0125\1\120\2\u0125\3\u0100\2\u0125\1\u0100"+
    "\3\u0125\1\u0104\1\u0100\1\u0104\10\u0100\4\u0125\1\u0100\4\u0125"+
    "\2\u0100\2\u0102\1\u0115\1\u0129\1\u0102\1\u0129\3\u0102\1\u0116"+
    "\2\u0102\1\u0138\50\u0102\2\u0103\1\u0117\1\u012a\1\u0103\1\u012a"+
    "\3\u0103\1\u0118\1\u0119\1\u0103\1\u0139\22\u0103\1\u011a\1\u0103"+
    "\1\u011a\23\u0103\2\u0118\1\u012b\7\u0118\1\u013a\52\u0118\1\u0113"+
    "\1\u0135\1\u013b\1\u013c\1\u0113\1\u013c\2\u0135\1\u0113\2\0"+
    "\1\u0113\1\272\6\u0135\1\0\2\u0135\3\u0113\2\u0135\1\u0113"+
    "\3\u0135\1\u0128\12\u0113\4\u0135\1\u0113\4\u0135\2\u0113\1\251"+
    "\1\u013d\1\337\1\336\1\251\1\336\1\u013d\2\336\1\272"+
    "\3\251\6\336\1\251\2\336\2\251\1\340\2\u013d\1\251"+
    "\3\336\1\341\12\251\3\u013d\1\336\1\251\4\336\2\251"+
    "\1\0\1\u013e\1\314\1\313\1\0\1\313\1\u013e\2\313"+
    "\4\0\6\313\1\0\2\313\2\0\1\315\2\u013e\1\0"+
    "\3\313\1\316\12\0\3\u013e\1\313\1\0\4\313\2\0"+
    "\1\252\1\u013f\1\345\1\344\1\252\1\344\1\u013f\2\344"+
    "\1\274\1\275\2\252\6\344\1\252\2\344\2\252\1\346"+
    "\2\u013f\1\252\3\344\1\347\1\252\1\276\10\252\3\u013f"+
    "\1\344\1\252\4\344\2\252\1\274\1\u0140\1\375\1\372"+
    "\1\274\1\372\1\u0140\2\372\1\274\1\272\2\274\6\372"+
    "\1\274\2\372\2\274\1\376\2\u0140\1\274\3\372\1\347"+
    "\12\274\3\u0140\1\372\1\274\4\372\2\274\1\120\1\u0141"+
    "\1\322\1\321\1\120\1\321\1\u0141\2\321\1\0\3\120"+
    "\6\321\1\120\2\321\2\120\1\323\2\u0141\1\120\3\321"+
    "\1\316\1\120\1\122\10\120\3\u0141\1\321\1\120\4\321"+
    "\2\120\2\u0100\1\u0101\1\u0132\1\u0100\1\u0132\3\u0100\1\0"+
    "\1\120\1\u0100\1\275\6\u0100\1\120\4\u0100\1\u0127\6\u0100"+
    "\1\u0128\1\u0100\1\u0104\24\u0100\1\u0142\1\u0126\1\u0125\1\u0100"+
    "\1\u0125\1\u0142\2\u0125\1\0\1\120\1\u0100\1\275\6\u0125"+
    "\1\120\2\u0125\2\u0100\1\u0127\2\u0142\1\u0100\3\u0125\1\u0128"+
    "\1\u0100\1\u0104\10\u0100\3\u0142\1\u0125\1\u0100\4\u0125\3\u0100"+
    "\1\u0125\1\u0126\1\u0132\1\u0100\1\u0132\3\u0125\1\u0113\2\u0100"+
    "\1\u0114\6\u0125\1\u0100\2\u0125\2\u0100\1\u0127\2\u0125\1\u0100"+
    "\3\u0125\1\u0128\1\u0100\1\u0104\10\u0100\4\u0125\1\u0100\4\u0125"+
    "\2\u0100\1\u0113\1\u0135\1\u013b\1\u0143\1\u0113\1\u0143\3\u0135"+
    "\2\0\1\u0113\1\272\6\u0135\1\0\2\u0135\2\u0113\1\u013c"+
    "\2\u0135\1\u0113\3\u0135\1\u0128\12\u0113\4\u0135\1\u0113\4\u0135"+
    "\2\u0113\1\u0100\1\u0125\1\u0126\1\u0144\1\u0100\1\u0144\3\u0125"+
    "\1\0\1\120\1\u0100\1\275\6\u0125\1\120\2\u0125\2\u0100"+
    "\1\u0127\2\u0125\1\u0100\3\u0125\1\u0128\1\u0100\1\u0104\10\u0100"+
    "\4\u0125\1\u0100\4\u0125\2\u0100\1\u0102\1\u0145\1\u0146\1\u0147"+
    "\1\u0102\1\u0147\2\u0145\1\u0102\1\u0116\3\u0102\6\u0145\1\u0102"+
    "\2\u0145\3\u0102\2\u0145\1\u0102\3\u0145\1\u0148\12\u0102\4\u0145"+
    "\1\u0102\4\u0145\2\u0102\1\u0103\1\u0149\1\u014a\1\u014b\1\u0103"+
    "\1\u014b\2\u0149\1\u0103\1\u0118\1\u0119\2\u0103\6\u0149\1\u0103"+
    "\2\u0149\3\u0103\2\u0149\1\u0103\3\u0149\1\u014c\1\u0103\1\u011a"+
    "\10\u0103\4\u0149\1\u0103\4\u0149\2\u0103\2\u0118\1\u012b\1\u013a"+
    "\1\u0118\1\u013a\4\u0118\1\u0116\1\u0118\1\u014d\50\u0118\1\u0113"+
    "\1\u014e\1\u014f\1\u0113\2\u0135\1\u014e\5\u0135\1\u0150\14\u0135"+
    "\2\u014e\17\u0135\3\u014e\10\u0135\1\u0113\1\u0135\1\u013b\1\u013c"+
    "\1\u0113\1\u013c\2\u0135\1\u0113\2\0\1\u0113\1\272\6\u0135"+
    "\1\0\2\u0135\3\u0113\2\u0135\1\u0113\3\u0135\13\u0113\4\u0135"+
    "\1\u0113\4\u0135\2\u0113\1\251\1\u0151\1\337\1\336\1\251"+
    "\1\336\1\u0151\2\336\1\272\3\251\6\336\1\251\2\336"+
    "\2\251\1\340\2\u0151\1\251\3\336\1\341\12\251\3\u0151"+
    "\1\336\1\251\4\336\2\251\1\0\1\313\1\314\1\313"+
    "\1\0\4\313\4\0\6\313\1\0\2\313\2\0\1\315"+
    "\2\313\1\0\3\313\1\316\12\0\4\313\1\0\4\313"+
    "\2\0\1\252\1\u0152\1\345\1\344\1\252\1\344\1\u0152"+
    "\2\344\1\274\1\275\2\252\6\344\1\252\2\344\2\252"+
    "\1\346\2\u0152\1\252\3\344\1\347\1\252\1\276\10\252"+
    "\3\u0152\1\344\1\252\4\344\2\252\1\274\1\u0153\1\375"+
    "\1\372\1\274\1\372\1\u0153\2\372\1\274\1\272\2\274"+
    "\6\372\1\274\2\372\2\274\1\376\2\u0153\1\274\3\372"+
    "\1\347\12\274\3\u0153\1\372\1\274\4\372\2\274\1\120"+
    "\1\321\1\322\1\321\1\120\4\321\1\0\3\120\6\321"+
    "\1\120\2\321\2\120\1\323\2\321\1\120\3\321\1\316"+
    "\1\120\1\122\10\120\4\321\1\120\4\321\2\120\1\u0100"+
    "\1\u0154\1\u0126\1\u0125\1\u0100\1\u0125\1\u0154\2\u0125\1\0"+
    "\1\120\1\u0100\1\275\6\u0125\1\120\2\u0125\2\u0100\1\u0127"+
    "\2\u0154\1\u0100\3\u0125\1\u0128\1\u0100\1\u0104\10\u0100\3\u0154"+
    "\1\u0125\1\u0100\4\u0125\2\u0100\2\u0113\1\u011b\1\u0143\1\u0113"+
    "\1\u0143\3\u0113\2\0\1\u0113\1\272\6\u0113\1\0\4\u0113"+
    "\1\u013c\6\u0113\1\u0128\25\u0113\1\u0100\1\u0125\1\u0126\1\u0144"+
    "\1\u0100\1\u0144\2\u0125\1\u0100\1\0\1\120\1\u0100\1\275"+
    "\6\u0125\1\120\2\u0125\2\u0100\1\u0127\2\u0125\1\u0100\3\u0125"+
    "\1\u0128\1\u0100\1\u0104\10\u0100\4\u0125\1\u0100\4\u0125\2\u0100"+
    "\1\u0102\1\u0145\1\u0146\1\u0155\1\u0102\1\u0155\3\u0145\1\u0116"+
    "\3\u0102\6\u0145\1\u0102\2\u0145\2\u0102\1\u0147\2\u0145\1\u0102"+
    "\3\u0145\1\u0148\12\u0102\4\u0145\1\u0102\4\u0145\3\u0102\1\u0156"+
    "\1\u0157\1\u0102\2\u0145\1\u0156\2\u0145\1\u0158\17\u0145\2\u0156"+
    "\17\u0145\3\u0156\10\u0145\1\u0102\1\u0145\1\u0146\1\u0147\1\u0102"+
    "\1\u0147\2\u0145\1\u0102\1\u0116\3\u0102\6\u0145\1\u0102\2\u0145"+
    "\3\u0102\2\u0145\1\u0102\3\u0145\13\u0102\4\u0145\1\u0102\4\u0145"+
    "\2\u0102\1\u0103\1\u0149\1\u014a\1\u0159\1\u0103\1\u0159\3\u0149"+
    "\1\u0118\1\u0119\2\u0103\6\u0149\1\u0103\2\u0149\2\u0103\1\u014b"+
    "\2\u0149\1\u0103\3\u0149\1\u014c\1\u0103\1\u011a\10\u0103\4\u0149"+
    "\1\u0103\4\u0149\3\u0103\1\u015a\1\u015b\1\u0103\2\u0149\1\u015a"+
    "\2\u0149\1\u015c\1\u015d\16\u0149\2\u015a\4\u0149\1\u015e\1\u0149"+
    "\1\u015e\10\u0149\3\u015a\10\u0149\1\u0103\1\u0149\1\u014a\1\u014b"+
    "\1\u0103\1\u014b\2\u0149\1\u0103\1\u0118\1\u0119\2\u0103\6\u0149"+
    "\1\u0103\2\u0149\3\u0103\2\u0149\1\u0103\3\u0149\1\u011a\1\u0103"+
    "\1\u011a\10\u0103\4\u0149\1\u0103\4\u0149\2\u0103\1\u0118\1\u015c"+
    "\1\u015f\1\u0160\1\u0118\1\u0160\2\u015c\2\u0118\1\u0116\2\u0118"+
    "\6\u015c\1\u0118\2\u015c\3\u0118\2\u015c\1\u0118\3\u015c\1\u014c"+
    "\12\u0118\4\u015c\1\u0118\4\u015c\2\u0118\1\u0113\1\u0161\1\u013b"+
    "\1\u0135\1\u0113\1\u0135\1\u0161\2\u0135\2\0\1\u0113\1\272"+
    "\6\u0135\1\0\2\u0135\2\u0113\1\u013c\2\u0161\1\u0113\3\u0135"+
    "\1\u0128\12\u0113\3\u0161\1\u0135\1\u0113\4\u0135\3\u0113\1\u0135"+
    "\1\u013b\1\u0143\1\u0113\1\u0143\3\u0135\3\u0113\1\u012c\6\u0135"+
    "\1\u0113\2\u0135\2\u0113\1\u013c\2\u0135\1\u0113\3\u0135\1\u0128"+
    "\12\u0113\4\u0135\1\u0113\4\u0135\3\u0113\1\u0135\1\u013b\1\u0162"+
    "\1\u0113\1\u0162\3\u0135\2\0\1\u0113\1\272\6\u0135\1\0"+
    "\2\u0135\2\u0113\1\u013c\2\u0135\1\u0113\3\u0135\1\u0128\12\u0113"+
    "\4\u0135\1\u0113\4\u0135\2\u0113\1\251\1\336\1\337\1\336"+
    "\1\251\4\336\1\272\3\251\6\336\1\251\2\336\2\251"+
    "\1\340\2\336\1\251\3\336\1\341\12\251\4\336\1\251"+
    "\4\336\2\251\1\252\1\344\1\345\1\344\1\252\4\344"+
    "\1\274\1\275\2\252\6\344\1\252\2\344\2\252\1\346"+
    "\2\344\1\252\3\344\1\347\1\252\1\276\10\252\4\344"+
    "\1\252\4\344\2\252\1\274\1\u0163\1\375\1\372\1\274"+
    "\1\372\1\u0163\2\372\1\274\1\272\2\274\6\372\1\274"+
    "\2\372\2\274\1\376\2\u0163\1\274\3\372\1\347\12\274"+
    "\3\u0163\1\372\1\274\4\372\2\274\1\u0100\1\u0164\1\u0126"+
    "\1\u0125\1\u0100\1\u0125\1\u0164\2\u0125\1\0\1\120\1\u0100"+
    "\1\275\6\u0125\1\120\2\u0125\2\u0100\1\u0127\2\u0164\1\u0100"+
    "\3\u0125\1\u0128\1\u0100\1\u0104\10\u0100\3\u0164\1\u0125\1\u0100"+
    "\4\u0125\2\u0100\2\u0102\1\u0115\1\u0155\1\u0102\1\u0155\3\u0102"+
    "\1\u0116\16\u0102\1\u0147\6\u0102\1\u0148\26\u0102\1\u0165\1\u0146"+
    "\1\u0145\1\u0102\1\u0145\1\u0165\2\u0145\1\u0116\3\u0102\6\u0145"+
    "\1\u0102\2\u0145\2\u0102\1\u0147\2\u0165\1\u0102\3\u0145\1\u0148"+
    "\12\u0102\3\u0165\1\u0145\1\u0102\4\u0145\3\u0102\1\u0145\1\u0146"+
    "\1\u0155\1\u0102\1\u0155\3\u0145\1\u0129\3\u0102\6\u0145\1\u0102"+
    "\2\u0145\2\u0102\1\u0147\2\u0145\1\u0102\3\u0145\1\u0148\12\u0102"+
    "\4\u0145\1\u0102\4\u0145\3\u0102\1\u0145\1\u0146\1\u0166\1\u0102"+
    "\1\u0166\3\u0145\1\u0116\2\u0102\1\u0138\6\u0145\1\u0102\2\u0145"+
    "\2\u0102\1\u0147\2\u0145\1\u0102\3\u0145\1\u0148\12\u0102\4\u0145"+
    "\1\u0102\4\u0145\2\u0102\2\u0103\1\u0117\1\u0159\1\u0103\1\u0159"+
    "\3\u0103\1\u0118\1\u0119\15\u0103\1\u014b\6\u0103\1\u014c\1\u0103"+
    "\1\u011a\24\u0103\1\u0167\1\u014a\1\u0149\1\u0103\1\u0149\1\u0167"+
    "\2\u0149\1\u0118\1\u0119\2\u0103\6\u0149\1\u0103\2\u0149\2\u0103"+
    "\1\u014b\2\u0167\1\u0103\3\u0149\1\u014c\1\u0103\1\u011a\10\u0103"+
    "\3\u0167\1\u0149\1\u0103\4\u0149\3\u0103\1\u0149\1\u014a\1\u0159"+
    "\1\u0103\1\u0159\3\u0149\1\u0118\1\u012a\2\u0103\6\u0149\1\u0103"+
    "\2\u0149\2\u0103\1\u014b\2\u0149\1\u0103\3\u0149\1\u014c\1\u0103"+
    "\1\u011a\10\u0103\4\u0149\1\u0103\4\u0149\2\u0103\1\u0118\1\u015c"+
    "\1\u015f\1\u0168\1\u0118\1\u0168\3\u015c\1\u0118\1\u0116\2\u0118"+
    "\6\u015c\1\u0118\2\u015c\2\u0118\1\u0160\2\u015c\1\u0118\3\u015c"+
    "\1\u014c\12\u0118\4\u015c\1\u0118\4\u015c\2\u0118\1\u0103\1\u0149"+
    "\1\u014a\1\u0169\1\u0103\1\u0169\3\u0149\1\u0118\1\u0119\1\u0103"+
    "\1\u0139\6\u0149\1\u0103\2\u0149\2\u0103\1\u014b\2\u0149\1\u0103"+
    "\3\u0149\1\u014c\1\u0103\1\u011a\10\u0103\4\u0149\1\u0103\4\u0149"+
    "\2\u0103\1\u0118\1\u016a\1\u016b\1\u0118\2\u015c\1\u016a\3\u015c"+
    "\1\u016c\16\u015c\2\u016a\17\u015c\3\u016a\10\u015c\1\u0118\1\u015c"+
    "\1\u015f\1\u0160\1\u0118\1\u0160\2\u015c\2\u0118\1\u0116\2\u0118"+
    "\6\u015c\1\u0118\2\u015c\3\u0118\2\u015c\1\u0118\3\u015c\13\u0118"+
    "\4\u015c\1\u0118\4\u015c\2\u0118\1\u0113\1\u016d\1\u013b\1\u0135"+
    "\1\u0113\1\u0135\1\u016d\2\u0135\2\0\1\u0113\1\272\6\u0135"+
    "\1\0\2\u0135\2\u0113\1\u013c\2\u016d\1\u0113\3\u0135\1\u0128"+
    "\12\u0113\3\u016d\1\u0135\1\u0113\4\u0135\3\u0113\1\u0135\1\u013b"+
    "\1\u0162\1\u0113\1\u0162\2\u0135\1\u0113\2\0\1\u0113\1\272"+
    "\6\u0135\1\0\2\u0135\2\u0113\1\u013c\2\u0135\1\u0113\3\u0135"+
    "\1\u0128\12\u0113\4\u0135\1\u0113\4\u0135\2\u0113\1\274\1\372"+
    "\1\375\1\372\1\274\4\372\1\274\1\272\2\274\6\372"+
    "\1\274\2\372\2\274\1\376\2\372\1\274\3\372\1\347"+
    "\12\274\4\372\1\274\4\372\2\274\1\u0100\1\u016e\1\u0126"+
    "\1\u0125\1\u0100\1\u0125\1\u016e\2\u0125\1\0\1\120\1\u0100"+
    "\1\275\6\u0125\1\120\2\u0125\2\u0100\1\u0127\2\u016e\1\u0100"+
    "\3\u0125\1\u0128\1\u0100\1\u0104\10\u0100\3\u016e\1\u0125\1\u0100"+
    "\4\u0125\2\u0100\1\u0102\1\u016f\1\u0146\1\u0145\1\u0102\1\u0145"+
    "\1\u016f\2\u0145\1\u0116\3\u0102\6\u0145\1\u0102\2\u0145\2\u0102"+
    "\1\u0147\2\u016f\1\u0102\3\u0145\1\u0148\12\u0102\3\u016f\1\u0145"+
    "\1\u0102\4\u0145\4\u0102\1\u0115\1\u0166\1\u0102\1\u0166\3\u0102"+
    "\1\u0116\2\u0102\1\u0138\13\u0102\1\u0147\6\u0102\1\u0148\25\u0102"+
    "\1\u0103\1\u0170\1\u014a\1\u0149\1\u0103\1\u0149\1\u0170\2\u0149"+
    "\1\u0118\1\u0119\2\u0103\6\u0149\1\u0103\2\u0149\2\u0103\1\u014b"+
    "\2\u0170\1\u0103\3\u0149\1\u014c\1\u0103\1\u011a\10\u0103\3\u0170"+
    "\1\u0149\1\u0103\4\u0149\2\u0103\2\u0118\1\u012b\1\u0168\1\u0118"+
    "\1\u0168\4\u0118\1\u0116\15\u0118\1\u0160\6\u0118\1\u014c\25\u0118"+
    "\2\u0103\1\u0117\1\u0169\1\u0103\1\u0169\3\u0103\1\u0118\1\u0119"+
    "\1\u0103\1\u0139\13\u0103\1\u014b\6\u0103\1\u014c\1\u0103\1\u011a"+
    "\23\u0103\1\u0118\1\u0171\1\u015f\1\u015c\1\u0118\1\u015c\1\u0171"+
    "\2\u015c\1\u0118\1\u0116\2\u0118\6\u015c\1\u0118\2\u015c\2\u0118"+
    "\1\u0160\2\u0171\1\u0118\3\u015c\1\u014c\12\u0118\3\u0171\1\u015c"+
    "\1\u0118\4\u015c\3\u0118\1\u015c\1\u015f\1\u0168\1\u0118\1\u0168"+
    "\3\u015c\1\u0118\1\u013a\2\u0118\6\u015c\1\u0118\2\u015c\2\u0118"+
    "\1\u0160\2\u015c\1\u0118\3\u015c\1\u014c\12\u0118\4\u015c\1\u0118"+
    "\4\u015c\3\u0118\1\u015c\1\u015f\1\u0172\1\u0118\1\u0172\3\u015c"+
    "\1\u0118\1\u0116\1\u0118\1\u014d\6\u015c\1\u0118\2\u015c\2\u0118"+
    "\1\u0160\2\u015c\1\u0118\3\u015c\1\u014c\12\u0118\4\u015c\1\u0118"+
    "\4\u015c\2\u0118\1\u0113\1\u0173\1\u013b\1\u0135\1\u0113\1\u0135"+
    "\1\u0173\2\u0135\2\0\1\u0113\1\272\6\u0135\1\0\2\u0135"+
    "\2\u0113\1\u013c\2\u0173\1\u0113\3\u0135\1\u0128\12\u0113\3\u0173"+
    "\1\u0135\1\u0113\4\u0135\2\u0113\1\u0100\1\u0174\1\u0126\1\u0125"+
    "\1\u0100\1\u0125\1\u0174\2\u0125\1\0\1\120\1\u0100\1\275"+
    "\6\u0125\1\120\2\u0125\2\u0100\1\u0127\2\u0174\1\u0100\3\u0125"+
    "\1\u0128\1\u0100\1\u0104\10\u0100\3\u0174\1\u0125\1\u0100\4\u0125"+
    "\2\u0100\1\u0102\1\u0175\1\u0146\1\u0145\1\u0102\1\u0145\1\u0175"+
    "\2\u0145\1\u0116\3\u0102\6\u0145\1\u0102\2\u0145\2\u0102\1\u0147"+
    "\2\u0175\1\u0102\3\u0145\1\u0148\12\u0102\3\u0175\1\u0145\1\u0102"+
    "\4\u0145\2\u0102\1\u0103\1\u0176\1\u014a\1\u0149\1\u0103\1\u0149"+
    "\1\u0176\2\u0149\1\u0118\1\u0119\2\u0103\6\u0149\1\u0103\2\u0149"+
    "\2\u0103\1\u014b\2\u0176\1\u0103\3\u0149\1\u014c\1\u0103\1\u011a"+
    "\10\u0103\3\u0176\1\u0149\1\u0103\4\u0149\2\u0103\1\u0118\1\u0177"+
    "\1\u015f\1\u015c\1\u0118\1\u015c\1\u0177\2\u015c\1\u0118\1\u0116"+
    "\2\u0118\6\u015c\1\u0118\2\u015c\2\u0118\1\u0160\2\u0177\1\u0118"+
    "\3\u015c\1\u014c\12\u0118\3\u0177\1\u015c\1\u0118\4\u015c\4\u0118"+
    "\1\u012b\1\u0172\1\u0118\1\u0172\4\u0118\1\u0116\1\u0118\1\u014d"+
    "\13\u0118\1\u0160\6\u0118\1\u014c\25\u0118\1\u0113\1\u0178\1\u013b"+
    "\1\u0135\1\u0113\1\u0135\1\u0178\2\u0135\2\0\1\u0113\1\272"+
    "\6\u0135\1\0\2\u0135\2\u0113\1\u013c\2\u0178\1\u0113\3\u0135"+
    "\1\u0128\12\u0113\3\u0178\1\u0135\1\u0113\4\u0135\2\u0113\1\u0100"+
    "\1\u0125\1\u0126\1\u0125\1\u0100\4\u0125\1\0\1\120\1\u0100"+
    "\1\275\6\u0125\1\120\2\u0125\2\u0100\1\u0127\2\u0125\1\u0100"+
    "\3\u0125\1\u0128\1\u0100\1\u0104\10\u0100\4\u0125\1\u0100\4\u0125"+
    "\2\u0100\1\u0102\1\u0179\1\u0146\1\u0145\1\u0102\1\u0145\1\u0179"+
    "\2\u0145\1\u0116\3\u0102\6\u0145\1\u0102\2\u0145\2\u0102\1\u0147"+
    "\2\u0179\1\u0102\3\u0145\1\u0148\12\u0102\3\u0179\1\u0145\1\u0102"+
    "\4\u0145\2\u0102\1\u0103\1\u017a\1\u014a\1\u0149\1\u0103\1\u0149"+
    "\1\u017a\2\u0149\1\u0118\1\u0119\2\u0103\6\u0149\1\u0103\2\u0149"+
    "\2\u0103\1\u014b\2\u017a\1\u0103\3\u0149\1\u014c\1\u0103\1\u011a"+
    "\10\u0103\3\u017a\1\u0149\1\u0103\4\u0149\2\u0103\1\u0118\1\u017b"+
    "\1\u015f\1\u015c\1\u0118\1\u015c\1\u017b\2\u015c\1\u0118\1\u0116"+
    "\2\u0118\6\u015c\1\u0118\2\u015c\2\u0118\1\u0160\2\u017b\1\u0118"+
    "\3\u015c\1\u014c\12\u0118\3\u017b\1\u015c\1\u0118\4\u015c\2\u0118"+
    "\1\u0113\1\u017c\1\u013b\1\u0135\1\u0113\1\u0135\1\u017c\2\u0135"+
    "\2\0\1\u0113\1\272\6\u0135\1\0\2\u0135\2\u0113\1\u013c"+
    "\2\u017c\1\u0113\3\u0135\1\u0128\12\u0113\3\u017c\1\u0135\1\u0113"+
    "\4\u0135\2\u0113\1\u0102\1\u017d\1\u0146\1\u0145\1\u0102\1\u0145"+
    "\1\u017d\2\u0145\1\u0116\3\u0102\6\u0145\1\u0102\2\u0145\2\u0102"+
    "\1\u0147\2\u017d\1\u0102\3\u0145\1\u0148\12\u0102\3\u017d\1\u0145"+
    "\1\u0102\4\u0145\2\u0102\1\u0103\1\u017e\1\u014a\1\u0149\1\u0103"+
    "\1\u0149\1\u017e\2\u0149\1\u0118\1\u0119\2\u0103\6\u0149\1\u0103"+
    "\2\u0149\2\u0103\1\u014b\2\u017e\1\u0103\3\u0149\1\u014c\1\u0103"+
    "\1\u011a\10\u0103\3\u017e\1\u0149\1\u0103\4\u0149\2\u0103\1\u0118"+
    "\1\u017f\1\u015f\1\u015c\1\u0118\1\u015c\1\u017f\2\u015c\1\u0118"+
    "\1\u0116\2\u0118\6\u015c\1\u0118\2\u015c\2\u0118\1\u0160\2\u017f"+
    "\1\u0118\3\u015c\1\u014c\12\u0118\3\u017f\1\u015c\1\u0118\4\u015c"+
    "\2\u0118\1\u0113\1\u0135\1\u013b\1\u0135\1\u0113\4\u0135\2\0"+
    "\1\u0113\1\272\6\u0135\1\0\2\u0135\2\u0113\1\u013c\2\u0135"+
    "\1\u0113\3\u0135\1\u0128\12\u0113\4\u0135\1\u0113\4\u0135\2\u0113"+
    "\1\u0102\1\u0145\1\u0146\1\u0145\1\u0102\4\u0145\1\u0116\3\u0102"+
    "\6\u0145\1\u0102\2\u0145\2\u0102\1\u0147\2\u0145\1\u0102\3\u0145"+
    "\1\u0148\12\u0102\4\u0145\1\u0102\4\u0145\2\u0102\1\u0103\1\u0149"+
    "\1\u014a\1\u0149\1\u0103\4\u0149\1\u0118\1\u0119\2\u0103\6\u0149"+
    "\1\u0103\2\u0149\2\u0103\1\u014b\2\u0149\1\u0103\3\u0149\1\u014c"+
    "\1\u0103\1\u011a\10\u0103\4\u0149\1\u0103\4\u0149\2\u0103\1\u0118"+
    "\1\u0180\1\u015f\1\u015c\1\u0118\1\u015c\1\u0180\2\u015c\1\u0118"+
    "\1\u0116\2\u0118\6\u015c\1\u0118\2\u015c\2\u0118\1\u0160\2\u0180"+
    "\1\u0118\3\u015c\1\u014c\12\u0118\3\u0180\1\u015c\1\u0118\4\u015c"+
    "\3\u0118\1\u015c\1\u015f\1\u015c\1\u0118\4\u015c\1\u0118\1\u0116"+
    "\2\u0118\6\u015c\1\u0118\2\u015c\2\u0118\1\u0160\2\u015c\1\u0118"+
    "\3\u015c\1\u014c\12\u0118\4\u015c\1\u0118\4\u015c\2\u0118";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17596];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\1\11\3\1\1\11\1\1\1\11"+
    "\7\1\3\0\1\11\1\0\2\11\1\1\3\0\1\11"+
    "\2\0\3\1\1\0\1\1\1\0\1\1\12\0\2\11"+
    "\2\0\1\1\1\11\2\1\12\0\6\1\2\0\1\11"+
    "\12\0\1\1\2\0\3\1\1\0\4\1\6\0\2\11"+
    "\2\0\2\1\2\0\1\11\5\1\3\0\1\1\4\0"+
    "\10\1\2\0\1\1\4\0\7\1\6\0\1\1\1\11"+
    "\2\1\10\0\2\1\4\0\1\1\3\0\2\1\6\0"+
    "\1\1\10\0\1\11\6\0\1\11\6\0\1\1\4\0"+
    "\1\1\6\0\1\1\5\0\1\1\3\0\1\1\2\0"+
    "\1\11\15\0\1\1\7\0\2\1\24\0\1\1\1\0"+
    "\1\1\1\11\12\0\1\1\16\0\1\1\20\0\1\1"+
    "\3\0\1\1\21\0\1\1\42\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[384];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	// Put stuff to include in the class here
	String detectedCharset;

	// External flag
	boolean paranoidStringCheck = false;
	boolean deleteErrors = true;
	boolean debug = true;
	
	// Internal flags
	boolean postBadImportFlag = false; // both URLs and @import's
	boolean importFlag = false;
	boolean urlFlag = false;

	// Writer
	Writer w = null; // Will NPE if not initialized properly

	public void parse () throws IOException {
		while (yylex() != null);
	}
	
	CSSTokenizerFilter(Reader r, Writer w, boolean paranoidStringCheck) {
		this(r);
		this.w = w;
		this.paranoidStringCheck = paranoidStringCheck;
	}

	void throwError(String s) throws IOException {
		throw new IllegalStateException("You MUST override throwError!");
	}

	String processImportURL(String s) {
		throw new IllegalStateException("You MUST override processImportURL!");
	}

	String processURL(String s) {
		throw new IllegalStateException("You MUST override processURL!");
	}
	
	void log(String s) {
		System.err.println("CSSTokenizerFilter: "+s);
	}

	void logError(String s) {
		System.err.println("CSSTokenizerFilter ERROR: "+s);
	}
	
	static String unquote(String s, char c) {
		if(s.length() > 1) {
			if(s.charAt(s.length()-1) == c) {
				s = s.substring(1, s.length()-1);
				return s;
			} else return "";
		} else return "";
	}
	
	// This is not very efficient. The parser below knows the quoting rules too.
	
	static boolean isHexDigit(char c) {
		return ('a' <= c && c <= 'f' ||
		  	'A' <= c && c <= 'F' ||
			'0' <= c && c <= '9');
	}
	
	class DecodedStringThingy {
		char quote; // " " means not quoted
		boolean url; // in a url() ?
		String data;
		public String suffix; // includes any whitespace
		public DecodedStringThingy(String s) {
			if(s.startsWith("url(")) {
				s = s.substring("url(".length());
				url = true;
			}
			char q = s.charAt(0);
			if(q == '\'' || q == '\"') {
				quote = q;
				s = s.substring(1);
			} else quote = ' ';
			StringBuffer buffer = new StringBuffer();
			int x = 0;
			boolean justEscaping = false;
			boolean stillEscaping = false;
			StringBuffer hexEscape = new StringBuffer();
			while(x < s.length()-1) {
				char c = s.charAt(x);
				x++;
				if(justEscaping) {
					if(c == '\n') {
						buffer.append(c);
						justEscaping = false;
					} else if(isHexDigit(c)) {
						hexEscape.append(c);
						justEscaping = false;
						stillEscaping = true;
					} else {
						buffer.append(c);
						// Will need to be reencoded if quote or \n
						justEscaping = false;
					}
				} else if(stillEscaping) {
					if(isHexDigit(c) && hexEscape.length() < 6) {
						hexEscape.append(c);
					} else if(Character.isWhitespace(c)) {
						// Ignore one whitespace char after an escape
						int d = Integer.parseInt(hexEscape.toString(),
									 16);
						if(d > 0xFFFF) {
							String error = 
							    "UCS-4 CHARACTERS OVER 0xFFFF NOT SUPPORTED!";
							logError(error);
							try {
								w.write("/* "+error+"*/");
							} catch (IOException e) {};
						} else {
							c = (char)d;
							buffer.append(c);
						}
						stillEscaping = false;
						hexEscape = new StringBuffer();
					} else {
						int d = Integer.parseInt(hexEscape.toString(),
									 16);
						if(d > 0xFFFF) {
							String error = 
							    "UCS-4 CHARACTERS OVER 0xFFFF NOT SUPPORTED!";
							logError(error);
							try {
								w.write("/* "+error+"*/");
							} catch (IOException e) {};
						} else {
							char o = (char)d;
							buffer.append(o);
						}
						buffer.append(c);
						stillEscaping = false;
						hexEscape = new StringBuffer();
					}
				} else {
					if(quote != ' ' && c == quote) {
						break;
					} else if (c == '\\') {
						justEscaping = true;
					} else {
						buffer.append(c);
					}
				}
			}
			data = buffer.toString();
			if(s.length() > (x+1))
				suffix = s.substring(x+1);
			else suffix = "";
		}
		
		public String toString() {
			StringBuffer out = new StringBuffer();
			if(url) out.append("url(");
			if(quote != ' ') out.append(quote);
			out.append(unescapeData());
			if(quote != ' ') out.append(quote);
			if(url) out.append(")");
			out.append(suffix);
			return out.toString();
		}
		
		public String unescapeData() {
			StringBuffer sb = new StringBuffer();
			for(int i=0;i<data.length();i++) {
				char c = data.charAt(i);
				if(c == quote || c == '\n') {
					sb.append('\\');
				}
				sb.append(c);
			}
			return sb.toString();
		}
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CSSTokenizerFilter(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CSSTokenizerFilter(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 26: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched @media: "+s);
          }
        case 32: break;
        case 18: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched unicode: "+s);
          }
        case 33: break;
        case 8: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched close braces: "+s);
          }
        case 34: break;
        case 22: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched HTML comment: "+s);
          }
        case 35: break;
        case 15: 
          { String s = yytext();
	w.write(s); 
	if(debug) log("Matched ~=: "+s);
          }
        case 36: break;
        case 12: 
          { String s = yytext();
	if(debug) log("Matched string: "+s);
	if(paranoidStringCheck && s.indexOf(':') != -1) {
		w.write("/* Deleted disallowed string */");
		log("Deleted disallowed string: "+s);
	} else {
		w.write(s);
	}
          }
        case 37: break;
        case 25: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched @page: "+s);
          }
        case 38: break;
        case 13: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched number: "+s);
          }
        case 39: break;
        case 1: 
          { String s = yytext();
	char c = s.charAt(0);
	log("Matched anything: "+yytext()+" - ignoring");
	w.write("/* ignored unmatched char: "+c+" */"); // single char cannot break out of comment
          }
        case 40: break;
        case 6: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched semicolon: "+s);
          }
        case 41: break;
        case 20: 
          { String s = yytext();
	if(debug) log("Got hexcolor: "+s);
	w.write(s);
          }
        case 42: break;
        case 7: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched open braces: "+s);
          }
        case 43: break;
        case 2: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched ident: "+s);
          }
        case 44: break;
        case 24: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched unicode range: "+s);
          }
        case 45: break;
        case 29: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched @font-face: "+s);
          }
        case 46: break;
        case 9: 
          { String s = yytext();
	if(s.startsWith("url")) throwError("Invalid contents of url()");
	w.write(s);
	if(debug) log("Matched function start: "+s);
          }
        case 47: break;
        case 17: 
          { String s = yytext();
	w.write(s); 
	if(debug) log("Matched HTML comment: "+s);
          }
        case 48: break;
        case 3: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched whitespace: "+s);
          }
        case 49: break;
        case 23: 
          { String s = yytext();
	if(debug) log("Ignoring unrecognizable url: "+s);
	w.write("/* Ignoring unmatchable URL */url()");
          }
        case 50: break;
        case 31: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched important: "+s);
          }
        case 51: break;
        case 21: 
          { String s = yytext();
	StringBuffer sb = new StringBuffer(s.length());
	sb.append("/* ");
	boolean inPrefix = true;
	for(int i=2;i<s.length()-2;i++) {
		char c = s.charAt(i);
		if(inPrefix && Character.isWhitespace(c)) {
			continue;
		}
		inPrefix = false;
		if(Character.isDigit(c) || Character.isWhitespace(c) ||
			Character.isLetter(c) || c == '.' || c == '_' || c == '-') {
			// No @, no !, etc; IE has been known to do things with comments
			// in CSS, and other browsers may too
			sb.append(c);
		}
	}
	while(Character.isWhitespace(sb.charAt(sb.length()-1)))
		sb.deleteCharAt(sb.length()-1);
	sb.append(" */");
	w.write(sb.toString());
	if(debug) log("Matched comment: "+s+" -> "+sb.toString());
          }
        case 52: break;
        case 28: 
          { String s = yytext();
	if(debug) log("Found @import: "+s);
	s = s.substring("@import".length());
	s = s.trim();
	DecodedStringThingy dst = new DecodedStringThingy(s);
	s = dst.data;
	if(debug) log("URL: "+s);
	s = processImportURL(s);
	dst.data = s;
	if(debug) log("Processed URL: "+s);
	if (!(s == null || s.equals(""))) {
		if(debug) log("URL now: "+s);
		s = "@import "+dst.toString();
		if(debug) log("Writing: "+s);
		w.write(s);
	} else
		if(debug) log("Dropped @import");
          }
        case 53: break;
        case 19: 
          { if(!deleteErrors) {
		throwError("Unknown @identifier "+yytext());
	} else {
		String s = yytext();
		if(debug) log("Discarded identifier: "+s);
		// Ignore
	}
          }
        case 54: break;
        case 27: 
          { // This is horrible. However it seems that there is no other way to do it with either jflex or CUP, as {URL} cannot be an unambiguous token :(
	String s = yytext();
	if(debug) log("Recognized URL: "+s);
	
	DecodedStringThingy dst = new DecodedStringThingy(s);
	
	if(!dst.url) {
		throw new IllegalStateException("parsing url().. isn't a url()");
	}
	if(dst.suffix.length() > 0) {
		yypushback(dst.suffix.length());
		dst.suffix = "";
	}
	
	s = dst.data;
	if(debug) log("URL now: "+s);
	s = processURL(s);
	dst.data = s;
	if(s == null || s.equals("")) {
		if(debug) log("URL invalid");
		w.write("url()");
	} else {
		s = dst.toString();
		if(debug) log("Writing: "+s);
		w.write(s);
	}
          }
        case 55: break;
        case 11: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched measurement: "+s);
          }
        case 56: break;
        case 16: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched |=: "+s);
          }
        case 57: break;
        case 30: 
          { String s = yytext();
	detectedCharset = s;
	if(debug) log("Matched and ignoring charset: "+s);
	// Ignore
          }
        case 58: break;
        case 10: 
          { if(postBadImportFlag) {
		// Ignore
		postBadImportFlag = false;
		if(debug) log("Ignoring mediums list because after bad import: "+
			yytext());
	} else {
		String s = yytext();
		w.write(s);
		if(debug) log("Matched and passing on mediums list: "+s);
	}
          }
        case 59: break;
        case 4: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched single char: "+s);
          }
        case 60: break;
        case 14: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched #name: "+s);
          }
        case 61: break;
        case 5: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched function end: "+s);
          }
        case 62: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
