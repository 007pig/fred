/* The following code was generated by JFlex 1.4.1 on 29/09/06 20:17 */

/* This code is part of Freenet. It is distributed under the GNU General
 * Public License, version 2 (or at your option any later version). See
 * http://www.gnu.org/ for further details of the GPL. */ 
package freenet.clients.http.filter;
import java.io.*;
import java.util.*;
/* This class tokenizes a CSS2 Reader stream, writes it out to the output Writer, and filters any URLs found */
// WARNING: this is not as thorough as the HTML parser - new versions of the standard could lead to anonymity risks. See comments in SaferFilter.java
// Mostly from http://www.w3.org/TR/REC-CSS2/grammar.html


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 29/09/06 20:17 from the specification file
 * <tt>freenet/clients/http/filter/CSSTokenizerFilter.jflex</tt>
 */
class CSSTokenizerFilter {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\3\1\0\1\3\1\3\22\0\1\5\1\43\1\11"+
    "\1\25\1\4\1\62\1\4\1\12\1\23\1\14\1\41\1\55\1\30"+
    "\1\10\1\13\1\40\12\1\1\63\1\35\1\42\1\46\1\44\1\24"+
    "\1\31\1\50\1\6\1\54\1\52\1\51\1\53\1\22\1\57\1\20"+
    "\1\7\1\61\1\27\1\32\1\21\1\34\1\33\1\7\1\17\1\15"+
    "\1\16\1\26\2\7\1\56\1\7\1\60\1\4\1\2\4\4\1\50"+
    "\1\6\1\54\1\52\1\51\1\53\1\22\1\57\1\20\1\7\1\61"+
    "\1\27\1\32\1\21\1\34\1\33\1\7\1\17\1\15\1\16\1\26"+
    "\2\7\1\56\1\7\1\60\1\36\1\47\1\37\1\45\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\2\1\4\2\1"+
    "\1\4\1\5\1\1\1\2\1\4\1\1\1\6\1\7"+
    "\1\10\1\4\4\1\3\0\1\11\1\0\1\12\1\13"+
    "\1\2\3\0\1\14\2\0\1\15\1\16\1\0\1\16"+
    "\1\2\12\0\1\17\1\20\2\0\1\2\1\21\2\14"+
    "\12\0\2\16\1\2\2\22\11\0\1\2\2\0\1\23"+
    "\1\16\1\11\1\22\1\0\1\22\5\0\1\24\1\25"+
    "\2\0\1\2\2\16\5\0\1\26\2\22\1\27\2\0"+
    "\1\30\4\0\1\2\2\16\1\26\3\0\2\22\1\27"+
    "\6\0\1\2\1\23\1\16\2\0\2\22\1\27\1\0"+
    "\1\31\5\0\1\16\2\26\2\22\1\27\5\0\1\32"+
    "\2\31\4\0\1\27\4\0\1\31\4\0\1\27\4\0"+
    "\1\32\2\0\1\31\1\33\3\0\1\34\3\0\1\32"+
    "\5\0\1\32\1\0\1\31\1\0\1\35\16\0\1\31"+
    "\2\35\11\0\1\31\6\0\1\32\23\0\1\32\3\0"+
    "\1\32\32\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[292];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\64\0\u0208\0\u023c\0\64\0\u0270\0\64"+
    "\0\u02a4\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\234"+
    "\0\u0410\0\u01d4\0\64\0\u0444\0\64\0\64\0\u0478\0\u04ac"+
    "\0\u016c\0\u04e0\0\64\0\u01a0\0\u0514\0\u0548\0\u057c\0\u05b0"+
    "\0\u05e4\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750"+
    "\0\u0784\0\u07b8\0\u0374\0\u07ec\0\64\0\64\0\u0820\0\u0854"+
    "\0\u0888\0\64\0\u016c\0\u01a0\0\u08bc\0\u08f0\0\u0924\0\u0958"+
    "\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8"+
    "\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98"+
    "\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38"+
    "\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8"+
    "\0\u100c\0\u1040\0\64\0\64\0\u1074\0\u10a8\0\u10dc\0\u1110"+
    "\0\u1144\0\u1178\0\u11ac\0\u0ea0\0\u11e0\0\u1214\0\64\0\u1248"+
    "\0\u127c\0\u12b0\0\u12e4\0\u1318\0\64\0\u134c\0\u1380\0\u13b4"+
    "\0\u13e8\0\u141c\0\u1450\0\u1484\0\u1178\0\u14b8\0\u14ec\0\u1520"+
    "\0\u1554\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1658\0\u168c\0\u16c0"+
    "\0\u16f4\0\u1728\0\u05e4\0\u175c\0\u1790\0\u17c4\0\u17f8\0\u182c"+
    "\0\u1860\0\u1894\0\u18c8\0\u18fc\0\u1930\0\u1964\0\u1998\0\u19cc"+
    "\0\u1a00\0\u11e0\0\u1214\0\u1a34\0\64\0\u1a68\0\u1a9c\0\u1ad0"+
    "\0\u1b04\0\u1b38\0\u1b6c\0\u1a9c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c"+
    "\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74\0\u1da8\0\u1ddc"+
    "\0\u1e10\0\u1e44\0\u1e78\0\u1eac\0\64\0\u1ee0\0\u1f14\0\u1f48"+
    "\0\u1f7c\0\64\0\u1fb0\0\u1fe4\0\u2018\0\64\0\u204c\0\u2080"+
    "\0\u20b4\0\64\0\u20e8\0\u211c\0\u2150\0\u1b04\0\u2184\0\u21b8"+
    "\0\u21ec\0\u2220\0\u2254\0\u1b38\0\u2288\0\u22bc\0\u22f0\0\64"+
    "\0\u2324\0\u2358\0\u238c\0\u23c0\0\u23f4\0\u2428\0\u245c\0\u2490"+
    "\0\u24c4\0\u24f8\0\u252c\0\u2560\0\u2594\0\u25c8\0\u25fc\0\u1e44"+
    "\0\u1e78\0\u2630\0\u2664\0\u2698\0\u26cc\0\u2700\0\u2734\0\u2768"+
    "\0\u279c\0\u27d0\0\u2804\0\u2838\0\u286c\0\u28a0\0\u28d4\0\u2908"+
    "\0\u293c\0\u252c\0\u2970\0\u29a4\0\u29d8\0\u2a0c\0\u2a40\0\u2a74"+
    "\0\u2aa8\0\u2adc\0\u2b10\0\u2b44\0\u2b78\0\u2bac\0\u2be0\0\u2c14"+
    "\0\u2c48\0\u2c7c\0\u2cb0\0\u2ce4\0\u2d18\0\u2594\0\u2d4c\0\u2d80"+
    "\0\u2db4\0\u25c8\0\u2de8\0\u2e1c\0\u2e50\0\u2e84\0\u2eb8\0\u2eec"+
    "\0\u2f20\0\u2f54\0\u2f88\0\u2fbc\0\u2ff0\0\u3024\0\u3058\0\u308c"+
    "\0\u30c0\0\u30f4\0\u3128\0\u315c\0\u3190\0\u31c4\0\u31f8\0\u322c"+
    "\0\u3260\0\u3294\0\u32c8\0\u32fc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[292];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\5\2\6\1\7"+
    "\1\10\1\11\1\12\1\13\6\6\2\2\1\14\1\15"+
    "\1\6\1\16\1\17\3\6\1\20\1\21\1\22\1\23"+
    "\1\16\1\24\1\25\1\16\1\26\1\2\1\27\5\6"+
    "\1\16\4\6\1\2\1\16\65\0\1\3\1\30\1\31"+
    "\1\0\1\31\3\6\2\0\1\32\1\0\6\6\1\33"+
    "\2\0\2\6\1\34\1\0\3\6\1\35\12\0\5\6"+
    "\1\0\4\6\1\36\2\0\1\37\1\6\1\0\2\6"+
    "\1\37\41\6\5\37\7\6\3\0\1\5\1\0\1\5"+
    "\30\0\1\21\1\22\25\0\1\6\1\30\1\31\1\0"+
    "\1\31\3\6\4\0\6\6\1\33\2\0\2\6\1\34"+
    "\1\0\3\6\1\35\12\0\5\6\1\0\4\6\12\0"+
    "\1\40\53\0\2\41\1\42\6\41\1\43\52\41\2\44"+
    "\1\45\7\44\1\43\51\44\1\0\1\46\63\0\1\47"+
    "\1\50\3\0\1\47\2\51\4\0\6\51\3\0\2\51"+
    "\2\0\3\51\13\0\5\47\1\0\4\51\3\0\1\6"+
    "\1\30\1\31\1\0\1\31\3\6\4\0\2\6\1\52"+
    "\3\6\1\33\2\0\2\6\1\34\1\0\3\6\1\35"+
    "\12\0\5\6\1\53\4\6\22\0\1\54\11\0\1\55"+
    "\1\56\17\0\1\57\1\60\12\0\1\21\1\0\1\21"+
    "\61\0\1\22\1\0\1\22\117\0\1\61\65\0\1\62"+
    "\23\0\1\63\1\0\1\63\12\0\1\64\111\0\1\65"+
    "\63\0\1\66\20\0\1\31\1\0\1\31\22\0\1\34"+
    "\4\0\1\35\27\0\1\67\1\70\1\34\1\0\1\34"+
    "\2\67\5\0\6\67\3\0\2\67\2\0\3\67\13\0"+
    "\5\67\1\0\4\67\3\0\1\71\1\30\1\6\1\0"+
    "\1\6\1\71\2\6\4\0\6\6\1\33\2\0\2\6"+
    "\1\34\1\0\3\6\1\35\12\0\5\71\1\0\4\6"+
    "\46\0\1\72\17\0\2\41\1\42\6\41\1\73\52\41"+
    "\2\44\1\45\7\44\1\74\51\44\1\0\1\46\13\0"+
    "\1\36\1\0\1\75\1\76\1\0\1\77\7\0\1\100"+
    "\1\101\15\0\1\102\1\103\1\0\1\104\2\0\1\105"+
    "\1\0\1\106\1\36\2\0\1\107\1\50\3\0\1\107"+
    "\2\51\4\0\6\51\3\0\2\51\2\0\3\51\13\0"+
    "\5\107\1\0\4\51\3\0\1\110\1\51\1\0\2\51"+
    "\1\110\41\51\5\110\7\51\1\0\1\51\1\50\3\0"+
    "\3\51\4\0\6\51\3\0\2\51\2\0\3\51\13\0"+
    "\5\51\1\0\4\51\3\0\1\6\1\30\1\31\1\0"+
    "\1\31\3\6\4\0\6\6\1\33\2\0\1\6\1\111"+
    "\1\34\1\0\3\6\1\35\12\0\5\6\1\0\4\6"+
    "\3\0\1\112\4\0\1\112\15\0\1\113\23\0\5\112"+
    "\41\0\1\114\102\0\1\115\62\0\1\116\47\0\1\117"+
    "\106\0\1\120\4\0\41\61\1\121\22\61\10\0\1\122"+
    "\105\0\1\123\32\0\1\67\1\70\1\31\1\0\1\31"+
    "\3\67\4\0\6\67\3\0\2\67\1\34\1\0\3\67"+
    "\1\35\12\0\5\67\1\0\4\67\3\0\1\124\1\67"+
    "\1\0\2\67\1\124\41\67\5\124\7\67\1\0\1\125"+
    "\1\30\1\6\1\0\1\6\1\125\2\6\4\0\6\6"+
    "\1\33\2\0\2\6\1\34\1\0\3\6\1\35\12\0"+
    "\5\125\1\0\4\6\52\0\1\126\34\0\1\36\61\0"+
    "\1\75\61\0\1\36\14\0\1\36\105\0\1\36\1\0"+
    "\1\36\37\0\1\36\23\0\1\36\56\0\1\127\44\0"+
    "\1\36\111\0\1\36\62\0\1\105\5\0\1\130\1\50"+
    "\3\0\1\130\2\51\4\0\6\51\3\0\2\51\2\0"+
    "\3\51\13\0\5\130\1\0\4\51\3\0\1\131\1\50"+
    "\1\51\1\0\1\51\1\131\2\51\4\0\6\51\3\0"+
    "\2\51\2\0\3\51\13\0\5\131\1\0\4\51\3\0"+
    "\1\6\1\30\1\31\1\0\1\31\3\6\4\0\6\6"+
    "\1\132\2\0\2\6\1\34\1\0\3\6\1\35\12\0"+
    "\5\6\1\0\4\6\3\0\1\133\4\0\1\133\1\0"+
    "\1\134\13\0\1\135\23\0\5\133\33\0\1\135\72\0"+
    "\1\136\102\0\1\137\33\0\1\140\62\0\1\141\112\0"+
    "\1\142\13\0\40\61\1\143\1\121\22\61\10\0\1\144"+
    "\106\0\1\145\31\0\1\146\1\70\1\67\1\0\1\67"+
    "\1\146\2\67\4\0\6\67\3\0\2\67\1\34\1\0"+
    "\3\67\1\35\12\0\5\146\1\0\4\67\3\0\1\147"+
    "\1\30\1\6\1\0\1\6\1\147\2\6\4\0\6\6"+
    "\1\33\2\0\2\6\1\34\1\0\3\6\1\35\12\0"+
    "\5\147\1\0\4\6\54\0\1\36\33\0\1\36\42\0"+
    "\1\150\1\50\3\0\1\150\2\51\4\0\6\51\3\0"+
    "\2\51\2\0\3\51\13\0\5\150\1\0\4\51\3\0"+
    "\1\151\1\50\1\51\1\0\1\51\1\151\2\51\4\0"+
    "\6\51\3\0\2\51\2\0\3\51\13\0\5\151\1\0"+
    "\4\51\2\0\2\152\1\153\1\154\1\152\1\154\3\152"+
    "\1\155\1\156\1\152\1\157\6\152\1\0\40\152\1\0"+
    "\1\160\4\0\1\160\1\0\1\134\13\0\1\161\23\0"+
    "\5\160\10\0\1\162\4\0\1\162\41\0\5\162\33\0"+
    "\1\161\73\0\1\163\47\0\1\164\114\0\1\165\30\0"+
    "\1\166\64\0\1\167\100\0\1\170\30\0\1\171\1\70"+
    "\1\67\1\0\1\67\1\171\2\67\4\0\6\67\3\0"+
    "\2\67\1\34\1\0\3\67\1\35\12\0\5\171\1\0"+
    "\4\67\3\0\1\172\1\30\1\6\1\0\1\6\1\172"+
    "\2\6\4\0\6\6\1\33\2\0\2\6\1\34\1\0"+
    "\3\6\1\35\12\0\5\172\1\0\4\6\3\0\1\173"+
    "\1\50\3\0\1\173\2\51\4\0\6\51\3\0\2\51"+
    "\2\0\3\51\13\0\5\173\1\0\4\51\3\0\1\174"+
    "\1\50\1\51\1\0\1\51\1\174\2\51\4\0\6\51"+
    "\3\0\2\51\2\0\3\51\13\0\5\174\1\0\4\51"+
    "\2\0\2\152\1\153\6\152\2\0\1\152\1\157\6\152"+
    "\1\0\42\152\1\153\11\152\1\175\47\152\2\155\1\176"+
    "\6\155\1\177\52\155\2\156\1\200\7\156\1\177\51\156"+
    "\1\0\1\201\4\0\1\201\1\0\1\134\13\0\1\202"+
    "\23\0\5\201\33\0\1\202\40\0\1\203\4\0\1\203"+
    "\41\0\5\203\26\0\1\204\114\0\1\205\23\0\1\206"+
    "\70\0\1\207\65\0\1\210\45\0\1\211\1\70\1\67"+
    "\1\0\1\67\1\211\2\67\4\0\6\67\3\0\2\67"+
    "\1\34\1\0\3\67\1\35\12\0\5\211\1\0\4\67"+
    "\3\0\1\212\1\30\1\6\1\0\1\6\1\212\2\6"+
    "\4\0\6\6\1\33\2\0\2\6\1\34\1\0\3\6"+
    "\1\35\12\0\5\212\1\0\4\6\3\0\1\213\1\50"+
    "\3\0\1\213\2\51\4\0\6\51\3\0\2\51\2\0"+
    "\3\51\13\0\5\213\1\0\4\51\3\0\1\214\1\50"+
    "\1\51\1\0\1\51\1\214\2\51\4\0\6\51\3\0"+
    "\2\51\2\0\3\51\13\0\5\214\1\0\4\51\2\0"+
    "\2\155\1\176\6\155\1\215\52\155\3\0\1\177\1\0"+
    "\1\177\6\0\1\157\47\0\2\156\1\200\7\156\1\216"+
    "\51\156\1\0\1\217\4\0\1\217\1\0\1\134\13\0"+
    "\1\220\23\0\5\217\33\0\1\220\40\0\1\221\4\0"+
    "\1\221\41\0\5\221\25\0\1\222\46\0\1\223\1\224"+
    "\1\205\1\0\1\205\2\223\5\0\6\223\3\0\2\223"+
    "\2\0\3\223\13\0\5\223\1\0\4\223\55\0\1\225"+
    "\61\0\1\226\30\0\1\227\46\0\1\230\1\70\1\67"+
    "\1\0\1\67\1\230\2\67\4\0\6\67\3\0\2\67"+
    "\1\34\1\0\3\67\1\35\12\0\5\230\1\0\4\67"+
    "\3\0\1\6\1\30\1\6\1\0\4\6\4\0\6\6"+
    "\1\33\2\0\2\6\1\34\1\0\3\6\1\35\12\0"+
    "\5\6\1\0\4\6\3\0\1\231\1\50\1\51\1\0"+
    "\1\51\1\231\2\51\4\0\6\51\3\0\2\51\2\0"+
    "\3\51\13\0\5\231\1\0\4\51\2\0\2\155\1\176"+
    "\1\215\1\155\1\215\3\155\1\177\2\155\1\232\47\155"+
    "\2\156\1\200\1\216\1\156\1\216\4\156\1\177\1\156"+
    "\1\233\47\156\1\0\1\234\4\0\1\234\1\0\1\134"+
    "\13\0\1\235\23\0\5\234\33\0\1\235\40\0\1\236"+
    "\4\0\1\236\41\0\5\236\7\0\2\237\1\240\1\222"+
    "\1\237\1\222\3\237\1\241\1\242\1\237\1\0\6\237"+
    "\1\0\2\237\1\243\6\237\1\244\26\237\1\0\1\223"+
    "\1\224\1\245\1\0\1\245\3\223\4\0\6\223\3\0"+
    "\2\223\1\205\1\0\3\223\13\0\5\223\1\0\4\223"+
    "\3\0\1\246\1\223\1\0\2\223\1\246\41\223\5\246"+
    "\7\223\50\0\1\247\31\0\1\250\115\0\1\251\14\0"+
    "\1\252\1\70\1\67\1\0\1\67\1\252\2\67\4\0"+
    "\6\67\3\0\2\67\1\34\1\0\3\67\1\35\12\0"+
    "\5\252\1\0\4\67\3\0\1\51\1\50\1\51\1\0"+
    "\4\51\4\0\6\51\3\0\2\51\2\0\3\51\13\0"+
    "\5\51\1\0\4\51\12\0\1\134\54\0\1\253\4\0"+
    "\1\253\41\0\5\253\7\0\2\237\1\240\6\237\2\0"+
    "\1\237\1\0\6\237\1\0\11\237\1\244\30\237\1\240"+
    "\32\237\1\244\26\237\2\241\1\254\6\241\1\255\52\241"+
    "\2\242\1\256\7\242\1\255\51\242\2\237\1\240\6\237"+
    "\2\0\1\237\1\0\2\237\1\257\3\237\1\0\11\237"+
    "\1\244\26\237\3\0\1\245\1\0\1\245\22\0\1\205"+
    "\34\0\1\260\1\224\1\223\1\0\1\223\1\260\2\223"+
    "\4\0\6\223\3\0\2\223\1\205\1\0\3\223\13\0"+
    "\5\260\1\0\4\223\56\0\1\261\12\0\1\250\1\0"+
    "\1\250\3\0\1\262\1\263\72\0\1\264\43\0\1\67"+
    "\1\70\1\67\1\0\4\67\4\0\6\67\3\0\2\67"+
    "\1\34\1\0\3\67\1\35\12\0\5\67\1\0\4\67"+
    "\3\0\1\265\4\0\1\265\41\0\5\265\7\0\2\241"+
    "\1\254\6\241\1\266\52\241\1\0\1\267\1\270\1\271"+
    "\1\0\1\271\2\267\5\0\6\267\3\0\2\267\2\0"+
    "\3\267\1\272\12\0\5\267\1\0\4\267\2\0\2\242"+
    "\1\256\7\242\1\273\51\242\2\237\1\240\6\237\2\0"+
    "\1\237\1\0\6\237\1\0\3\237\1\274\5\237\1\244"+
    "\26\237\1\0\1\275\1\224\1\223\1\0\1\223\1\275"+
    "\2\223\4\0\6\223\3\0\2\223\1\205\1\0\3\223"+
    "\13\0\5\275\1\0\4\223\53\0\1\276\12\0\2\262"+
    "\1\277\6\262\1\300\52\262\2\263\1\301\7\263\1\300"+
    "\51\263\16\0\1\302\45\0\1\241\1\303\1\304\1\305"+
    "\1\241\1\305\2\303\1\241\1\255\3\241\6\303\3\241"+
    "\2\303\2\241\3\303\1\306\12\241\5\303\1\241\4\303"+
    "\2\241\1\0\1\267\1\270\1\307\1\0\1\307\3\267"+
    "\4\0\6\267\3\0\2\267\1\271\1\0\3\267\1\272"+
    "\12\0\5\267\1\0\4\267\3\0\1\310\1\267\1\0"+
    "\2\267\1\310\41\267\5\310\7\267\1\0\1\267\1\270"+
    "\1\271\1\0\1\271\2\267\5\0\6\267\3\0\2\267"+
    "\2\0\3\267\13\0\5\267\1\0\4\267\2\0\1\242"+
    "\1\311\1\312\1\313\1\242\1\313\2\311\2\242\1\255"+
    "\2\242\6\311\3\242\2\311\2\242\3\311\1\314\12\242"+
    "\5\311\1\242\4\311\2\242\2\237\1\240\6\237\2\0"+
    "\1\237\1\0\6\237\1\315\11\237\1\244\26\237\1\0"+
    "\1\316\1\224\1\223\1\0\1\223\1\316\2\223\4\0"+
    "\6\223\3\0\2\223\1\205\1\0\3\223\13\0\5\316"+
    "\1\0\4\223\2\0\2\262\1\277\6\262\1\317\52\262"+
    "\3\0\1\300\1\0\1\300\27\0\1\320\26\0\2\263"+
    "\1\301\7\263\1\321\51\263\1\241\1\303\1\304\1\322"+
    "\1\241\1\322\3\303\1\255\3\241\6\303\3\241\2\303"+
    "\1\305\1\241\3\303\1\306\12\241\5\303\1\241\4\303"+
    "\3\241\1\323\1\324\1\241\2\303\1\323\2\303\1\325"+
    "\36\303\5\323\7\303\1\241\1\303\1\304\1\305\1\241"+
    "\1\305\2\303\1\241\1\255\3\241\6\303\3\241\2\303"+
    "\2\241\3\303\13\241\5\303\1\241\4\303\2\241\3\0"+
    "\1\307\1\0\1\307\22\0\1\271\4\0\1\272\27\0"+
    "\1\326\1\270\1\267\1\0\1\267\1\326\2\267\4\0"+
    "\6\267\3\0\2\267\1\271\1\0\3\267\1\272\12\0"+
    "\5\326\1\0\4\267\2\0\1\242\1\311\1\312\1\327"+
    "\1\242\1\327\3\311\1\242\1\255\2\242\6\311\3\242"+
    "\2\311\1\313\1\242\3\311\1\314\12\242\5\311\1\242"+
    "\4\311\3\242\1\330\1\331\1\242\2\311\1\330\3\311"+
    "\1\332\35\311\5\330\7\311\1\242\1\311\1\312\1\313"+
    "\1\242\1\313\2\311\2\242\1\255\2\242\6\311\3\242"+
    "\2\311\2\242\3\311\13\242\5\311\1\242\4\311\2\242"+
    "\2\333\1\334\1\315\1\333\1\315\3\333\1\335\1\336"+
    "\1\333\1\255\6\333\1\0\40\333\1\0\1\337\1\224"+
    "\1\223\1\0\1\223\1\337\2\223\4\0\6\223\3\0"+
    "\2\223\1\205\1\0\3\223\13\0\5\337\1\0\4\223"+
    "\2\0\2\262\1\277\1\317\1\262\1\317\3\262\1\300"+
    "\23\262\1\340\26\262\2\263\1\301\1\321\1\263\1\321"+
    "\4\263\1\300\22\263\1\341\26\263\2\241\1\254\1\322"+
    "\1\241\1\322\3\241\1\255\16\241\1\305\4\241\1\306"+
    "\27\241\1\342\1\304\1\303\1\241\1\303\1\342\2\303"+
    "\1\255\3\241\6\303\3\241\2\303\1\305\1\241\3\303"+
    "\1\306\12\241\5\342\1\241\4\303\3\241\1\303\1\304"+
    "\1\322\1\241\1\322\3\303\1\266\3\241\6\303\3\241"+
    "\2\303\1\305\1\241\3\303\1\306\12\241\5\303\1\241"+
    "\4\303\3\241\1\303\1\304\1\343\1\241\1\343\3\303"+
    "\1\255\3\241\6\303\3\241\2\303\1\305\1\241\3\303"+
    "\1\306\12\241\5\303\1\241\4\303\2\241\1\0\1\344"+
    "\1\270\1\267\1\0\1\267\1\344\2\267\4\0\6\267"+
    "\3\0\2\267\1\271\1\0\3\267\1\272\12\0\5\344"+
    "\1\0\4\267\2\0\2\242\1\256\1\327\1\242\1\327"+
    "\4\242\1\255\15\242\1\313\4\242\1\314\27\242\1\345"+
    "\1\312\1\311\1\242\1\311\1\345\2\311\1\242\1\255"+
    "\2\242\6\311\3\242\2\311\1\313\1\242\3\311\1\314"+
    "\12\242\5\345\1\242\4\311\3\242\1\311\1\312\1\327"+
    "\1\242\1\327\3\311\1\242\1\273\2\242\6\311\3\242"+
    "\2\311\1\313\1\242\3\311\1\314\12\242\5\311\1\242"+
    "\4\311\3\242\1\311\1\312\1\346\1\242\1\346\3\311"+
    "\1\242\1\255\2\242\6\311\3\242\2\311\1\313\1\242"+
    "\3\311\1\314\12\242\5\311\1\242\4\311\2\242\2\333"+
    "\1\334\6\333\2\0\1\333\1\255\6\333\1\0\42\333"+
    "\1\334\11\333\1\347\47\333\2\335\1\350\6\335\1\351"+
    "\52\335\2\336\1\352\7\336\1\351\51\336\1\0\1\353"+
    "\1\224\1\223\1\0\1\223\1\353\2\223\4\0\6\223"+
    "\3\0\2\223\1\205\1\0\3\223\13\0\5\353\1\0"+
    "\4\223\2\0\1\241\1\354\1\304\1\303\1\241\1\303"+
    "\1\354\2\303\1\255\3\241\6\303\3\241\2\303\1\305"+
    "\1\241\3\303\1\306\12\241\5\354\1\241\4\303\3\241"+
    "\1\303\1\304\1\343\1\241\1\343\2\303\1\241\1\255"+
    "\3\241\6\303\3\241\2\303\1\305\1\241\3\303\1\306"+
    "\12\241\5\303\1\241\4\303\2\241\1\0\1\355\1\270"+
    "\1\267\1\0\1\267\1\355\2\267\4\0\6\267\3\0"+
    "\2\267\1\271\1\0\3\267\1\272\12\0\5\355\1\0"+
    "\4\267\2\0\1\242\1\356\1\312\1\311\1\242\1\311"+
    "\1\356\2\311\1\242\1\255\2\242\6\311\3\242\2\311"+
    "\1\313\1\242\3\311\1\314\12\242\5\356\1\242\4\311"+
    "\3\242\1\311\1\312\1\346\1\242\1\346\2\311\2\242"+
    "\1\255\2\242\6\311\3\242\2\311\1\313\1\242\3\311"+
    "\1\314\12\242\5\311\1\242\4\311\2\242\1\333\1\357"+
    "\1\360\1\361\1\333\1\361\2\357\1\333\2\0\1\333"+
    "\1\255\6\357\1\0\2\333\2\357\2\333\3\357\1\362"+
    "\12\333\5\357\1\333\4\357\2\333\2\335\1\350\6\335"+
    "\1\363\52\335\3\0\1\351\1\0\1\351\6\0\1\255"+
    "\47\0\2\336\1\352\7\336\1\364\51\336\1\0\1\223"+
    "\1\224\1\223\1\0\4\223\4\0\6\223\3\0\2\223"+
    "\1\205\1\0\3\223\13\0\5\223\1\0\4\223\2\0"+
    "\1\241\1\365\1\304\1\303\1\241\1\303\1\365\2\303"+
    "\1\255\3\241\6\303\3\241\2\303\1\305\1\241\3\303"+
    "\1\306\12\241\5\365\1\241\4\303\2\241\1\0\1\366"+
    "\1\270\1\267\1\0\1\267\1\366\2\267\4\0\6\267"+
    "\3\0\2\267\1\271\1\0\3\267\1\272\12\0\5\366"+
    "\1\0\4\267\2\0\1\242\1\367\1\312\1\311\1\242"+
    "\1\311\1\367\2\311\1\242\1\255\2\242\6\311\3\242"+
    "\2\311\1\313\1\242\3\311\1\314\12\242\5\367\1\242"+
    "\4\311\2\242\1\333\1\357\1\360\1\370\1\333\1\370"+
    "\3\357\2\0\1\333\1\255\6\357\1\0\2\333\2\357"+
    "\1\361\1\333\3\357\1\362\12\333\5\357\1\333\4\357"+
    "\3\333\1\371\1\372\1\333\2\357\1\371\5\357\1\373"+
    "\33\357\5\371\7\357\1\333\1\357\1\360\1\361\1\333"+
    "\1\361\2\357\1\333\2\0\1\333\1\255\6\357\1\0"+
    "\2\333\2\357\2\333\3\357\13\333\5\357\1\333\4\357"+
    "\2\333\2\335\1\350\1\363\1\335\1\363\3\335\1\351"+
    "\2\335\1\374\47\335\2\336\1\352\1\364\1\336\1\364"+
    "\4\336\1\351\1\336\1\375\47\336\1\241\1\376\1\304"+
    "\1\303\1\241\1\303\1\376\2\303\1\255\3\241\6\303"+
    "\3\241\2\303\1\305\1\241\3\303\1\306\12\241\5\376"+
    "\1\241\4\303\2\241\1\0\1\377\1\270\1\267\1\0"+
    "\1\267\1\377\2\267\4\0\6\267\3\0\2\267\1\271"+
    "\1\0\3\267\1\272\12\0\5\377\1\0\4\267\2\0"+
    "\1\242\1\u0100\1\312\1\311\1\242\1\311\1\u0100\2\311"+
    "\1\242\1\255\2\242\6\311\3\242\2\311\1\313\1\242"+
    "\3\311\1\314\12\242\5\u0100\1\242\4\311\2\242\2\333"+
    "\1\334\1\370\1\333\1\370\3\333\2\0\1\333\1\255"+
    "\6\333\1\0\4\333\1\361\4\333\1\362\27\333\1\u0101"+
    "\1\360\1\357\1\333\1\357\1\u0101\2\357\2\0\1\333"+
    "\1\255\6\357\1\0\2\333\2\357\1\361\1\333\3\357"+
    "\1\362\12\333\5\u0101\1\333\4\357\3\333\1\357\1\360"+
    "\1\370\1\333\1\370\3\357\3\333\1\347\6\357\3\333"+
    "\2\357\1\361\1\333\3\357\1\362\12\333\5\357\1\333"+
    "\4\357\3\333\1\357\1\360\1\u0102\1\333\1\u0102\3\357"+
    "\2\0\1\333\1\255\6\357\1\0\2\333\2\357\1\361"+
    "\1\333\3\357\1\362\12\333\5\357\1\333\4\357\2\333"+
    "\1\335\1\u0103\1\u0104\1\u0105\1\335\1\u0105\2\u0103\1\335"+
    "\1\351\3\335\6\u0103\3\335\2\u0103\2\335\3\u0103\1\u0106"+
    "\12\335\5\u0103\1\335\4\u0103\2\335\1\336\1\u0107\1\u0108"+
    "\1\u0109\1\336\1\u0109\2\u0107\2\336\1\351\2\336\6\u0107"+
    "\3\336\2\u0107\2\336\3\u0107\1\u010a\12\336\5\u0107\1\336"+
    "\4\u0107\2\336\1\241\1\u010b\1\304\1\303\1\241\1\303"+
    "\1\u010b\2\303\1\255\3\241\6\303\3\241\2\303\1\305"+
    "\1\241\3\303\1\306\12\241\5\u010b\1\241\4\303\2\241"+
    "\1\0\1\267\1\270\1\267\1\0\4\267\4\0\6\267"+
    "\3\0\2\267\1\271\1\0\3\267\1\272\12\0\5\267"+
    "\1\0\4\267\2\0\1\242\1\u010c\1\312\1\311\1\242"+
    "\1\311\1\u010c\2\311\1\242\1\255\2\242\6\311\3\242"+
    "\2\311\1\313\1\242\3\311\1\314\12\242\5\u010c\1\242"+
    "\4\311\2\242\1\333\1\u010d\1\360\1\357\1\333\1\357"+
    "\1\u010d\2\357\2\0\1\333\1\255\6\357\1\0\2\333"+
    "\2\357\1\361\1\333\3\357\1\362\12\333\5\u010d\1\333"+
    "\4\357\3\333\1\357\1\360\1\u0102\1\333\1\u0102\2\357"+
    "\1\333\2\0\1\333\1\255\6\357\1\0\2\333\2\357"+
    "\1\361\1\333\3\357\1\362\12\333\5\357\1\333\4\357"+
    "\2\333\1\335\1\u0103\1\u0104\1\u010e\1\335\1\u010e\3\u0103"+
    "\1\351\3\335\6\u0103\3\335\2\u0103\1\u0105\1\335\3\u0103"+
    "\1\u0106\12\335\5\u0103\1\335\4\u0103\3\335\1\u010f\1\u0110"+
    "\1\335\2\u0103\1\u010f\2\u0103\1\u0111\36\u0103\5\u010f\7\u0103"+
    "\1\335\1\u0103\1\u0104\1\u0105\1\335\1\u0105\2\u0103\1\335"+
    "\1\351\3\335\6\u0103\3\335\2\u0103\2\335\3\u0103\13\335"+
    "\5\u0103\1\335\4\u0103\2\335\1\336\1\u0107\1\u0108\1\u0112"+
    "\1\336\1\u0112\3\u0107\1\336\1\351\2\336\6\u0107\3\336"+
    "\2\u0107\1\u0109\1\336\3\u0107\1\u010a\12\336\5\u0107\1\336"+
    "\4\u0107\3\336\1\u0113\1\u0114\1\336\2\u0107\1\u0113\3\u0107"+
    "\1\u0115\35\u0107\5\u0113\7\u0107\1\336\1\u0107\1\u0108\1\u0109"+
    "\1\336\1\u0109\2\u0107\2\336\1\351\2\336\6\u0107\3\336"+
    "\2\u0107\2\336\3\u0107\13\336\5\u0107\1\336\4\u0107\2\336"+
    "\1\241\1\303\1\304\1\303\1\241\4\303\1\255\3\241"+
    "\6\303\3\241\2\303\1\305\1\241\3\303\1\306\12\241"+
    "\5\303\1\241\4\303\2\241\1\242\1\311\1\312\1\311"+
    "\1\242\4\311\1\242\1\255\2\242\6\311\3\242\2\311"+
    "\1\313\1\242\3\311\1\314\12\242\5\311\1\242\4\311"+
    "\2\242\1\333\1\u0116\1\360\1\357\1\333\1\357\1\u0116"+
    "\2\357\2\0\1\333\1\255\6\357\1\0\2\333\2\357"+
    "\1\361\1\333\3\357\1\362\12\333\5\u0116\1\333\4\357"+
    "\2\333\2\335\1\350\1\u010e\1\335\1\u010e\3\335\1\351"+
    "\16\335\1\u0105\4\335\1\u0106\27\335\1\u0117\1\u0104\1\u0103"+
    "\1\335\1\u0103\1\u0117\2\u0103\1\351\3\335\6\u0103\3\335"+
    "\2\u0103\1\u0105\1\335\3\u0103\1\u0106\12\335\5\u0117\1\335"+
    "\4\u0103\3\335\1\u0103\1\u0104\1\u010e\1\335\1\u010e\3\u0103"+
    "\1\363\3\335\6\u0103\3\335\2\u0103\1\u0105\1\335\3\u0103"+
    "\1\u0106\12\335\5\u0103\1\335\4\u0103\3\335\1\u0103\1\u0104"+
    "\1\u0118\1\335\1\u0118\3\u0103\1\351\2\335\1\374\6\u0103"+
    "\3\335\2\u0103\1\u0105\1\335\3\u0103\1\u0106\12\335\5\u0103"+
    "\1\335\4\u0103\2\335\2\336\1\352\1\u0112\1\336\1\u0112"+
    "\4\336\1\351\15\336\1\u0109\4\336\1\u010a\27\336\1\u0119"+
    "\1\u0108\1\u0107\1\336\1\u0107\1\u0119\2\u0107\1\336\1\351"+
    "\2\336\6\u0107\3\336\2\u0107\1\u0109\1\336\3\u0107\1\u010a"+
    "\12\336\5\u0119\1\336\4\u0107\3\336\1\u0107\1\u0108\1\u0112"+
    "\1\336\1\u0112\3\u0107\1\336\1\364\2\336\6\u0107\3\336"+
    "\2\u0107\1\u0109\1\336\3\u0107\1\u010a\12\336\5\u0107\1\336"+
    "\4\u0107\3\336\1\u0107\1\u0108\1\u011a\1\336\1\u011a\3\u0107"+
    "\1\336\1\351\1\336\1\375\6\u0107\3\336\2\u0107\1\u0109"+
    "\1\336\3\u0107\1\u010a\12\336\5\u0107\1\336\4\u0107\2\336"+
    "\1\333\1\u011b\1\360\1\357\1\333\1\357\1\u011b\2\357"+
    "\2\0\1\333\1\255\6\357\1\0\2\333\2\357\1\361"+
    "\1\333\3\357\1\362\12\333\5\u011b\1\333\4\357\2\333"+
    "\1\335\1\u011c\1\u0104\1\u0103\1\335\1\u0103\1\u011c\2\u0103"+
    "\1\351\3\335\6\u0103\3\335\2\u0103\1\u0105\1\335\3\u0103"+
    "\1\u0106\12\335\5\u011c\1\335\4\u0103\4\335\1\350\1\u0118"+
    "\1\335\1\u0118\3\335\1\351\2\335\1\374\13\335\1\u0105"+
    "\4\335\1\u0106\26\335\1\336\1\u011d\1\u0108\1\u0107\1\336"+
    "\1\u0107\1\u011d\2\u0107\1\336\1\351\2\336\6\u0107\3\336"+
    "\2\u0107\1\u0109\1\336\3\u0107\1\u010a\12\336\5\u011d\1\336"+
    "\4\u0107\4\336\1\352\1\u011a\1\336\1\u011a\4\336\1\351"+
    "\1\336\1\375\13\336\1\u0109\4\336\1\u010a\26\336\1\333"+
    "\1\u011e\1\360\1\357\1\333\1\357\1\u011e\2\357\2\0"+
    "\1\333\1\255\6\357\1\0\2\333\2\357\1\361\1\333"+
    "\3\357\1\362\12\333\5\u011e\1\333\4\357\2\333\1\335"+
    "\1\u011f\1\u0104\1\u0103\1\335\1\u0103\1\u011f\2\u0103\1\351"+
    "\3\335\6\u0103\3\335\2\u0103\1\u0105\1\335\3\u0103\1\u0106"+
    "\12\335\5\u011f\1\335\4\u0103\2\335\1\336\1\u0120\1\u0108"+
    "\1\u0107\1\336\1\u0107\1\u0120\2\u0107\1\336\1\351\2\336"+
    "\6\u0107\3\336\2\u0107\1\u0109\1\336\3\u0107\1\u010a\12\336"+
    "\5\u0120\1\336\4\u0107\2\336\1\333\1\357\1\360\1\357"+
    "\1\333\4\357\2\0\1\333\1\255\6\357\1\0\2\333"+
    "\2\357\1\361\1\333\3\357\1\362\12\333\5\357\1\333"+
    "\4\357\2\333\1\335\1\u0121\1\u0104\1\u0103\1\335\1\u0103"+
    "\1\u0121\2\u0103\1\351\3\335\6\u0103\3\335\2\u0103\1\u0105"+
    "\1\335\3\u0103\1\u0106\12\335\5\u0121\1\335\4\u0103\2\335"+
    "\1\336\1\u0122\1\u0108\1\u0107\1\336\1\u0107\1\u0122\2\u0107"+
    "\1\336\1\351\2\336\6\u0107\3\336\2\u0107\1\u0109\1\336"+
    "\3\u0107\1\u010a\12\336\5\u0122\1\336\4\u0107\2\336\1\335"+
    "\1\u0123\1\u0104\1\u0103\1\335\1\u0103\1\u0123\2\u0103\1\351"+
    "\3\335\6\u0103\3\335\2\u0103\1\u0105\1\335\3\u0103\1\u0106"+
    "\12\335\5\u0123\1\335\4\u0103\2\335\1\336\1\u0124\1\u0108"+
    "\1\u0107\1\336\1\u0107\1\u0124\2\u0107\1\336\1\351\2\336"+
    "\6\u0107\3\336\2\u0107\1\u0109\1\336\3\u0107\1\u010a\12\336"+
    "\5\u0124\1\336\4\u0107\2\336\1\335\1\u0103\1\u0104\1\u0103"+
    "\1\335\4\u0103\1\351\3\335\6\u0103\3\335\2\u0103\1\u0105"+
    "\1\335\3\u0103\1\u0106\12\335\5\u0103\1\335\4\u0103\2\335"+
    "\1\336\1\u0107\1\u0108\1\u0107\1\336\4\u0107\1\336\1\351"+
    "\2\336\6\u0107\3\336\2\u0107\1\u0109\1\336\3\u0107\1\u010a"+
    "\12\336\5\u0107\1\336\4\u0107\2\336";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13104];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\1\11\2\1\1\11\1\1\1\11"+
    "\7\1\3\0\1\11\1\0\2\11\1\1\3\0\1\11"+
    "\2\0\2\1\1\0\2\1\12\0\2\11\2\0\1\1"+
    "\1\11\2\1\12\0\5\1\11\0\1\1\2\0\4\1"+
    "\1\0\1\1\5\0\2\11\2\0\3\1\5\0\1\11"+
    "\3\1\2\0\1\11\4\0\4\1\3\0\3\1\6\0"+
    "\3\1\2\0\3\1\1\0\1\1\5\0\4\1\1\11"+
    "\1\1\5\0\3\1\4\0\1\1\4\0\1\1\4\0"+
    "\1\11\4\0\1\11\2\0\1\1\1\11\3\0\1\11"+
    "\3\0\1\1\5\0\1\1\1\0\1\1\1\0\1\11"+
    "\16\0\3\1\11\0\1\1\6\0\1\1\23\0\1\1"+
    "\3\0\1\1\32\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[292];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	// Put stuff to include in the class here
	String detectedCharset;

	// External flag
	boolean paranoidStringCheck = false;
	boolean deleteErrors = true;
	boolean debug = true;
	
	// Internal flags
	boolean postBadImportFlag = false; // both URLs and @import's
	boolean importFlag = false;
	boolean urlFlag = false;

	// Writer
	Writer w = null; // Will NPE if not initialized properly

	public void parse () throws IOException {
		while (yylex() != null);
	}
	
	CSSTokenizerFilter(Reader r, Writer w, boolean paranoidStringCheck) {
		this(r);
		this.w = w;
		this.paranoidStringCheck = paranoidStringCheck;
	}

	void throwError(String s) throws IOException {
		throw new IllegalStateException("You MUST override throwError!");
	}

	String processImportURL(String s) {
		throw new IllegalStateException("You MUST override processImportURL!");
	}

	String processURL(String s) {
		throw new IllegalStateException("You MUST override processURL!");
	}
	
	void log(String s) {
		System.err.println("CSSTokenizerFilter: "+s);
	}

	void logError(String s) {
		System.err.println("CSSTokenizerFilter ERROR: "+s);
	}
	
	static String unquote(String s, char c) {
		if(s.length() > 1) {
			if(s.charAt(s.length()-1) == c) {
				s = s.substring(1, s.length()-1);
				return s;
			} else return "";
		} else return "";
	}
	
	// This is not very efficient. The parser below knows the quoting rules too.
	
	static boolean isHexDigit(char c) {
		return ('a' <= c && c <= 'f' ||
		  	'A' <= c && c <= 'F' ||
			'0' <= c && c <= '9');
	}
	
	class DecodedStringThingy {
		char quote; // " " means not quoted
		boolean url; // in a url() ?
		String data;
		public String suffix; // includes any whitespace
		public DecodedStringThingy(String s) {
			if(s.startsWith("url(")) {
				s = s.substring("url(".length());
				url = true;
			}
			char q = s.charAt(0);
			if(q == '\'' || q == '\"') {
				quote = q;
				s = s.substring(1);
			} else quote = ' ';
			StringBuffer buffer = new StringBuffer();
			int x = 0;
			boolean justEscaping = false;
			boolean stillEscaping = false;
			StringBuffer hexEscape = new StringBuffer();
			while(x < s.length()) {
				char c = s.charAt(x);
				x++;
				if(justEscaping) {
					if(c == '\n') {
						buffer.append(c);
						justEscaping = false;
					} else if(isHexDigit(c)) {
						hexEscape.append(c);
						justEscaping = false;
						stillEscaping = true;
					} else {
						buffer.append(c);
						// Will need to be reencoded if quote or \n
						justEscaping = false;
					}
				} else if(stillEscaping) {
					if(isHexDigit(c) && hexEscape.length() < 6) {
						hexEscape.append(c);
					} else if(Character.isWhitespace(c)) {
						// Ignore one whitespace char after an escape
						int d = Integer.parseInt(hexEscape.toString(),
									 16);
						if(d > 0xFFFF) {
							String error = 
							    "UCS-4 CHARACTERS OVER 0xFFFF NOT SUPPORTED!";
							logError(error);
							try {
								w.write("/* "+error+"*/");
							} catch (IOException e) {};
						} else {
							c = (char)d;
							buffer.append(c);
						}
						stillEscaping = false;
						hexEscape = new StringBuffer();
					} else {
						int d = Integer.parseInt(hexEscape.toString(),
									 16);
						if(d > 0xFFFF) {
							String error = 
							    "UCS-4 CHARACTERS OVER 0xFFFF NOT SUPPORTED!";
							logError(error);
							try {
								w.write("/* "+error+"*/");
							} catch (IOException e) {};
						} else {
							char o = (char)d;
							buffer.append(o);
						}
						buffer.append(c);
						stillEscaping = false;
						hexEscape = new StringBuffer();
					}
				} else {
					if(quote != ' ' && c == quote) {
						break;
					} else if (c == '\\') {
						justEscaping = true;
					} else {
						buffer.append(c);
					}
				}
			}
			x++;
			data = buffer.toString();
			if(url && s.length() > x+1 && s.charAt(x) == ')')
				x++;
			suffix = s.substring(x);
		}
		
		public String toString() {
			StringBuffer out = new StringBuffer();
			if(url) out.append("url(");
			if(quote != ' ') out.append(quote);
			out.append(unescapeData());
			if(quote != ' ') out.append(quote);
			if(url) out.append(")");
			out.append(suffix);
			return out.toString();
		}
		
		public String unescapeData() {
			StringBuffer sb = new StringBuffer();
			for(int i=0;i<data.length();i++) {
				char c = data.charAt(i);
				if(c == quote || c == '\n') {
					sb.append('\\');
				}
				sb.append(c);
			}
			return sb.toString();
		}
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CSSTokenizerFilter(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CSSTokenizerFilter(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 18: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched unicode: "+s);
          }
        case 30: break;
        case 8: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched close braces: "+s);
          }
        case 31: break;
        case 21: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched HTML comment: "+s);
          }
        case 32: break;
        case 15: 
          { String s = yytext();
	w.write(s); 
	if(debug) log("Matched ~=: "+s);
          }
        case 33: break;
        case 12: 
          { String s = yytext();
	if(debug) log("Matched string: "+s);
	if(paranoidStringCheck && s.indexOf(':') != -1) {
		w.write("/* Deleted disallowed string */");
		log("Deleted disallowed string: "+s);
	} else {
		w.write(s);
	}
          }
        case 34: break;
        case 24: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched @page: "+s);
          }
        case 35: break;
        case 13: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched number: "+s);
          }
        case 36: break;
        case 1: 
          { String s = yytext();
	char c = s.charAt(0);
	log("Matched anything: "+yytext()+" - ignoring");
	w.write("/* ignored unmatched char: "+c+" */"); // single char cannot break out of comment
          }
        case 37: break;
        case 6: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched semicolon: "+s);
          }
        case 38: break;
        case 19: 
          { String s = yytext();
	if(debug) log("Got hexcolor: "+s);
	w.write(s);
          }
        case 39: break;
        case 7: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched open braces: "+s);
          }
        case 40: break;
        case 25: 
          { String s = yytext();
	s = s.substring("@media".length()).trim();
	w.write("@media "+s+" ");
	if(debug) log("Matched @media: "+s);
          }
        case 41: break;
        case 2: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched ident: "+s);
          }
        case 42: break;
        case 23: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched unicode range: "+s);
          }
        case 43: break;
        case 27: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched @font-face: "+s);
          }
        case 44: break;
        case 9: 
          { String s = yytext();
	if(s.startsWith("url")) throwError("Invalid contents of url()");
	w.write(s);
	if(debug) log("Matched function start: "+s);
          }
        case 45: break;
        case 17: 
          { String s = yytext();
	w.write(s); 
	if(debug) log("Matched HTML comment: "+s);
          }
        case 46: break;
        case 3: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched whitespace: "+s);
          }
        case 47: break;
        case 26: 
          { String s = yytext();
	if(debug) log("Found @import: "+s);
	s = s.substring("@import".length());
	s = s.trim();
	DecodedStringThingy dst = new DecodedStringThingy(s);
	s = dst.data;
	if(debug) log("URL: "+s);
	s = processImportURL(s);
	dst.data = s;
	if(debug) log("Processed URL: "+s);
	if(dst.quote == ' ') dst.quote = '\"';
	if (!(s == null || s.equals(""))) {
		if(debug) log("URL now: "+s);
		s = "@import "+dst.toString();
		if(debug) log("Writing: "+s);
		w.write(s);
	} else
		if(debug) log("Dropped @import");
          }
        case 48: break;
        case 28: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched important: "+s);
          }
        case 49: break;
        case 20: 
          { String s = yytext();
	StringBuffer sb = new StringBuffer(s.length());
	sb.append("/* ");
	boolean inPrefix = true;
	for(int i=2;i<s.length()-2;i++) {
		char c = s.charAt(i);
		if(inPrefix && Character.isWhitespace(c)) {
			continue;
		}
		inPrefix = false;
		if(Character.isDigit(c) || Character.isWhitespace(c) ||
			Character.isLetter(c) || c == '.' || c == '_' || c == '-') {
			// No @, no !, etc; IE has been known to do things with comments
			// in CSS, and other browsers may too
			sb.append(c);
		}
	}
	while(Character.isWhitespace(sb.charAt(sb.length()-1)))
		sb.deleteCharAt(sb.length()-1);
	sb.append(" */");
	w.write(sb.toString());
	if(debug) log("Matched comment: "+s+" -> "+sb.toString());
          }
        case 50: break;
        case 22: 
          { // This is horrible. However it seems that there is no other way to do it with either jflex or CUP, as {URL} cannot be an unambiguous token :(
	String s = yytext();
	if(debug) log("Recognized URL: "+s);
	
	DecodedStringThingy dst = new DecodedStringThingy(s);
	
	if(!dst.url) {
		throw new IllegalStateException("parsing url().. isn't a url()");
	}
	if(dst.suffix.length() > 0) {
		yypushback(dst.suffix.length());
		dst.suffix = "";
	}
	
	s = dst.data;
	if(debug) log("URL now: "+s);
	s = processURL(s);
	dst.data = s;
	if(s == null || s.equals("")) {
		if(debug) log("URL invalid");
		w.write("url()");
	} else {
		s = dst.toString();
		if(debug) log("Writing: "+s);
		w.write(s);
	}
          }
        case 51: break;
        case 11: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched measurement: "+s);
          }
        case 52: break;
        case 16: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched |=: "+s);
          }
        case 53: break;
        case 29: 
          { String s = yytext();
	detectedCharset = s;
	if(debug) log("Matched and ignoring charset: "+s);
	// Ignore
          }
        case 54: break;
        case 10: 
          { if(postBadImportFlag) {
		// Ignore
		postBadImportFlag = false;
		if(debug) log("Ignoring mediums list because after bad import: "+
			yytext());
	} else {
		String s = yytext();
		w.write(s);
		if(debug) log("Matched and passing on mediums list: "+s);
	}
          }
        case 55: break;
        case 4: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched single char: "+s);
          }
        case 56: break;
        case 14: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched #name: "+s);
          }
        case 57: break;
        case 5: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched function end: "+s);
          }
        case 58: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
