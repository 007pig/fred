/* The following code was generated by JFlex 1.4.1 on 29/09/06 22:11 */

/* This code is part of Freenet. It is distributed under the GNU General
 * Public License, version 2 (or at your option any later version). See
 * http://www.gnu.org/ for further details of the GPL. */ 
package freenet.clients.http.filter;
import java.io.*;
import java.util.*;
/* This class tokenizes a CSS2 Reader stream, writes it out to the output Writer, and filters any URLs found */
// WARNING: this is not as thorough as the HTML parser - new versions of the standard could lead to anonymity risks. See comments in SaferFilter.java
// Mostly from http://www.w3.org/TR/REC-CSS2/grammar.html


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 29/09/06 22:11 from the specification file
 * <tt>freenet/clients/http/filter/CSSTokenizerFilter.jflex</tt>
 */
class CSSTokenizerFilter {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\3\1\0\1\3\1\3\22\0\1\5\1\40\1\11"+
    "\1\16\1\4\1\63\1\4\1\12\1\22\1\14\1\36\1\55\1\23"+
    "\1\41\1\13\1\35\12\1\1\64\1\32\1\37\1\44\1\42\1\15"+
    "\1\24\1\46\1\6\1\54\1\51\1\50\1\52\1\47\1\60\1\25"+
    "\1\7\1\62\1\21\1\26\1\53\1\30\1\27\1\7\1\20\1\57"+
    "\1\31\1\17\2\7\1\56\1\7\1\61\1\4\1\2\2\4\1\10"+
    "\1\4\1\46\1\6\1\54\1\51\1\50\1\52\1\47\1\60\1\25"+
    "\1\7\1\62\1\21\1\26\1\53\1\30\1\27\1\7\1\20\1\57"+
    "\1\31\1\17\2\7\1\56\1\7\1\61\1\33\1\45\1\34\1\43"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\2\2\1\1\4"+
    "\1\5\1\1\1\2\1\4\1\1\1\6\1\7\1\10"+
    "\1\4\2\1\1\4\2\1\3\0\1\11\1\0\1\12"+
    "\1\13\1\2\2\0\1\14\2\0\1\15\1\16\1\0"+
    "\1\16\1\2\1\0\1\17\1\0\5\17\5\0\1\20"+
    "\1\21\2\0\1\2\2\14\12\0\2\16\1\2\2\22"+
    "\6\17\3\0\1\23\1\0\1\2\2\0\1\24\1\16"+
    "\1\11\2\22\1\0\6\17\1\25\1\26\2\0\1\2"+
    "\2\16\5\0\1\27\2\22\1\30\3\17\1\31\2\17"+
    "\2\0\1\2\2\16\1\27\3\0\2\22\1\30\5\17"+
    "\2\0\1\2\1\24\1\16\2\0\2\22\1\30\2\17"+
    "\1\32\2\0\2\17\2\0\1\16\2\27\2\22\1\30"+
    "\1\17\1\0\1\17\4\0\1\17\1\33\2\32\2\17"+
    "\2\0\1\30\1\0\2\17\1\33\4\0\1\17\1\32"+
    "\1\17\4\0\1\30\1\17\5\0\1\33\1\0\1\17"+
    "\1\32\1\34\3\0\1\35\1\17\4\0\1\33\5\0"+
    "\1\33\1\0\1\32\1\0\1\36\1\0\1\17\15\0"+
    "\1\32\2\36\1\17\11\0\1\32\1\17\6\0\1\33"+
    "\23\0\1\33\3\0\1\33\32\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[316];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\65\0\u01dd\0\u0212\0\65\0\u0247\0\65\0\u027c"+
    "\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\237"+
    "\0\u0424\0\u01a8\0\65\0\u0459\0\65\0\65\0\u048e\0\u013e"+
    "\0\u04c3\0\65\0\u0173\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc"+
    "\0\u0601\0\u0636\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774"+
    "\0\u07a9\0\u07de\0\u0813\0\u0350\0\u0848\0\u087d\0\65\0\65"+
    "\0\u08b2\0\u08e7\0\u091c\0\u013e\0\u0173\0\u0951\0\u0986\0\u09bb"+
    "\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63"+
    "\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b"+
    "\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\65\0\u0e49\0\u0e7e"+
    "\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026"+
    "\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\65\0\65"+
    "\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u0f87"+
    "\0\u130c\0\u1341\0\65\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a"+
    "\0\u147f\0\u066b\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd"+
    "\0\u15f2\0\u12a2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730"+
    "\0\u1765\0\u179a\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3\0\u18d8"+
    "\0\u05cc\0\u190d\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b"+
    "\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3"+
    "\0\u1c28\0\u130c\0\u1341\0\u1c5d\0\65\0\u1c92\0\u1cc7\0\u1cfc"+
    "\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1cfc\0\u1e6f"+
    "\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u2017"+
    "\0\u204c\0\u1d31\0\u2081\0\u20b6\0\u20eb\0\u2120\0\u2155\0\u218a"+
    "\0\u21bf\0\u21f4\0\u2229\0\u225e\0\u2293\0\65\0\u22c8\0\u22fd"+
    "\0\u2332\0\u2367\0\u239c\0\u23d1\0\65\0\u2406\0\u243b\0\u2470"+
    "\0\u066b\0\u24a5\0\u24da\0\u250f\0\65\0\u2544\0\u2579\0\u25ae"+
    "\0\u25e3\0\u2618\0\u1dd0\0\u264d\0\u2682\0\u26b7\0\u26ec\0\u2721"+
    "\0\u1e05\0\u2756\0\u278b\0\u27c0\0\65\0\u27f5\0\u282a\0\u285f"+
    "\0\u2894\0\u28c9\0\u28fe\0\u2933\0\u2968\0\u299d\0\u29d2\0\u2a07"+
    "\0\u2a3c\0\u2a71\0\u2aa6\0\u2adb\0\u2b10\0\u2229\0\u225e\0\u2b45"+
    "\0\u2b7a\0\u2baf\0\u2be4\0\u2c19\0\u2c4e\0\u2c83\0\u2cb8\0\u2ced"+
    "\0\u2d22\0\u2d57\0\u2d8c\0\u2dc1\0\u2df6\0\u2e2b\0\u2e60\0\u2e95"+
    "\0\u2eca\0\u2a3c\0\u2eff\0\u2f34\0\u2f69\0\u2f9e\0\u2fd3\0\u3008"+
    "\0\u303d\0\u3072\0\u30a7\0\u30dc\0\u3111\0\u3146\0\u317b\0\u31b0"+
    "\0\u31e5\0\u321a\0\u324f\0\u3284\0\u32b9\0\u2aa6\0\u32ee\0\u3323"+
    "\0\u3358\0\u2adb\0\u338d\0\u33c2\0\u33f7\0\u342c\0\u3461\0\u3496"+
    "\0\u34cb\0\u3500\0\u3535\0\u356a\0\u359f\0\u35d4\0\u3609\0\u363e"+
    "\0\u3673\0\u36a8\0\u36dd\0\u3712\0\u3747\0\u377c\0\u37b1\0\u37e6"+
    "\0\u381b\0\u3850\0\u3885\0\u38ba";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[316];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\5\2\6\1\2"+
    "\1\7\1\10\1\11\1\12\1\2\1\13\1\14\2\6"+
    "\1\2\1\15\1\16\5\6\1\17\1\20\1\21\1\22"+
    "\1\15\1\23\1\24\1\25\1\15\1\26\1\2\1\27"+
    "\7\6\1\15\5\6\1\2\1\15\66\0\1\3\1\30"+
    "\1\31\1\0\1\31\3\6\2\0\1\32\3\0\3\6"+
    "\1\33\1\34\1\0\5\6\1\35\6\0\1\6\4\0"+
    "\7\6\1\0\5\6\1\36\2\0\1\37\1\6\1\0"+
    "\2\6\1\37\37\6\1\37\1\6\3\37\1\6\1\37"+
    "\10\6\3\0\1\5\1\0\1\5\25\0\1\20\1\21"+
    "\31\0\1\6\1\30\1\31\1\0\1\31\3\6\6\0"+
    "\3\6\1\33\1\34\1\0\5\6\1\35\6\0\1\6"+
    "\4\0\7\6\1\0\5\6\2\0\2\40\1\41\6\40"+
    "\1\42\53\40\2\43\1\44\7\43\1\42\52\43\1\0"+
    "\1\45\64\0\1\46\1\47\3\0\1\46\2\50\6\0"+
    "\3\50\3\0\5\50\7\0\1\50\4\0\1\46\1\50"+
    "\3\46\1\50\1\46\1\0\5\50\3\0\1\6\1\30"+
    "\1\31\1\0\1\31\3\6\6\0\1\6\1\51\1\6"+
    "\1\33\1\34\1\0\5\6\1\35\6\0\1\6\4\0"+
    "\7\6\1\52\5\6\3\0\1\53\1\54\3\0\2\53"+
    "\7\0\3\53\3\0\1\55\1\56\1\57\2\53\14\0"+
    "\4\53\1\60\1\53\1\61\1\0\5\53\5\0\1\20"+
    "\1\0\1\20\62\0\1\21\1\0\1\21\115\0\1\62"+
    "\66\0\1\63\27\0\1\64\1\0\1\64\17\0\1\65"+
    "\100\0\1\66\67\0\1\67\64\0\1\70\23\0\1\31"+
    "\1\0\1\31\15\0\1\34\6\0\1\35\33\0\1\71"+
    "\1\72\1\34\1\0\1\34\2\71\7\0\3\71\3\0"+
    "\5\71\14\0\7\71\1\0\5\71\3\0\1\73\1\30"+
    "\1\6\1\0\1\6\1\73\2\6\6\0\3\6\1\33"+
    "\1\34\1\0\5\6\1\35\6\0\1\6\4\0\1\73"+
    "\1\6\3\73\1\6\1\73\1\0\5\6\2\0\2\40"+
    "\1\41\6\40\1\74\53\40\2\43\1\44\7\43\1\75"+
    "\52\43\1\0\1\45\16\0\1\76\4\0\1\77\1\100"+
    "\1\101\17\0\1\102\1\103\1\104\2\0\1\105\2\0"+
    "\1\36\1\106\1\0\1\107\1\36\2\0\1\110\1\47"+
    "\3\0\1\110\2\50\6\0\3\50\3\0\5\50\7\0"+
    "\1\50\4\0\1\110\1\50\3\110\1\50\1\110\1\0"+
    "\5\50\3\0\1\111\1\50\1\0\2\50\1\111\37\50"+
    "\1\111\1\50\3\111\1\50\1\111\10\50\1\0\1\50"+
    "\1\47\3\0\3\50\6\0\3\50\3\0\5\50\7\0"+
    "\1\50\4\0\7\50\1\0\5\50\3\0\1\6\1\30"+
    "\1\31\1\0\1\31\3\6\6\0\2\6\1\112\1\33"+
    "\1\34\1\0\5\6\1\35\6\0\1\6\4\0\7\6"+
    "\1\0\5\6\3\0\1\113\4\0\1\113\6\0\1\114"+
    "\30\0\1\113\1\0\3\113\1\0\1\113\11\0\1\53"+
    "\1\54\3\0\3\53\6\0\3\53\3\0\5\53\7\0"+
    "\1\53\4\0\7\53\1\0\5\53\3\0\1\115\1\53"+
    "\1\0\2\53\1\115\37\53\1\115\1\53\3\115\1\53"+
    "\1\115\10\53\1\0\1\53\1\54\3\0\3\53\6\0"+
    "\3\53\3\0\1\53\1\116\3\53\7\0\1\53\4\0"+
    "\7\53\1\0\5\53\3\0\1\53\1\54\3\0\3\53"+
    "\6\0\3\53\3\0\5\53\7\0\1\53\4\0\2\53"+
    "\1\117\4\53\1\0\5\53\3\0\1\53\1\54\3\0"+
    "\3\53\6\0\3\53\3\0\5\53\7\0\1\53\4\0"+
    "\1\120\6\53\1\0\5\53\3\0\1\53\1\54\3\0"+
    "\3\53\6\0\3\53\3\0\3\53\1\121\1\53\7\0"+
    "\1\53\4\0\7\53\1\0\5\53\3\0\1\53\1\54"+
    "\3\0\3\53\6\0\3\53\3\0\5\53\7\0\1\53"+
    "\4\0\7\53\1\0\2\53\1\122\2\53\2\0\36\62"+
    "\1\123\26\62\41\0\1\124\51\0\1\125\100\0\1\126"+
    "\23\0\1\71\1\72\1\31\1\0\1\31\3\71\6\0"+
    "\3\71\1\0\1\34\1\0\5\71\1\35\6\0\1\71"+
    "\4\0\7\71\1\0\5\71\3\0\1\127\1\71\1\0"+
    "\2\71\1\127\37\71\1\127\1\71\3\127\1\71\1\127"+
    "\10\71\1\0\1\130\1\30\1\6\1\0\1\6\1\130"+
    "\2\6\6\0\3\6\1\33\1\34\1\0\5\6\1\35"+
    "\6\0\1\6\4\0\1\130\1\6\3\130\1\6\1\130"+
    "\1\0\5\6\50\0\1\131\71\0\1\36\37\0\1\36"+
    "\30\0\1\36\61\0\1\36\1\0\1\36\26\0\1\76"+
    "\72\0\1\36\27\0\1\36\56\0\1\132\42\0\1\36"+
    "\117\0\1\36\63\0\1\106\5\0\1\133\1\47\3\0"+
    "\1\133\2\50\6\0\3\50\3\0\5\50\7\0\1\50"+
    "\4\0\1\133\1\50\3\133\1\50\1\133\1\0\5\50"+
    "\3\0\1\134\1\47\1\50\1\0\1\50\1\134\2\50"+
    "\6\0\3\50\3\0\5\50\7\0\1\50\4\0\1\134"+
    "\1\50\3\134\1\50\1\134\1\0\5\50\3\0\1\6"+
    "\1\30\1\31\1\0\1\31\3\6\6\0\3\6\1\135"+
    "\1\34\1\0\5\6\1\35\6\0\1\6\4\0\7\6"+
    "\1\0\5\6\3\0\1\136\4\0\1\136\6\0\1\137"+
    "\23\0\1\140\4\0\1\136\1\0\3\136\1\0\1\136"+
    "\25\0\1\137\50\0\1\141\1\54\1\53\1\0\1\53"+
    "\1\141\2\53\6\0\3\53\3\0\5\53\7\0\1\53"+
    "\4\0\1\141\1\53\3\141\1\53\1\141\1\0\5\53"+
    "\3\0\1\53\1\54\3\0\3\53\6\0\3\53\3\0"+
    "\2\53\1\142\2\53\7\0\1\53\4\0\7\53\1\0"+
    "\5\53\3\0\1\53\1\54\3\0\3\53\6\0\3\53"+
    "\3\0\5\53\7\0\1\53\4\0\3\53\1\143\3\53"+
    "\1\0\5\53\3\0\1\53\1\54\3\0\3\53\6\0"+
    "\3\53\3\0\5\53\7\0\1\53\4\0\1\53\1\144"+
    "\5\53\1\0\5\53\3\0\1\53\1\54\3\0\3\53"+
    "\6\0\3\53\3\0\5\53\7\0\1\53\4\0\5\53"+
    "\1\145\1\53\1\0\5\53\3\0\1\53\1\54\3\0"+
    "\3\53\6\0\3\53\3\0\5\53\7\0\1\53\4\0"+
    "\1\146\6\53\1\0\5\53\2\0\35\62\1\147\1\123"+
    "\26\62\41\0\1\150\52\0\1\151\36\0\1\152\1\72"+
    "\1\71\1\0\1\71\1\152\2\71\6\0\3\71\1\0"+
    "\1\34\1\0\5\71\1\35\6\0\1\71\4\0\1\152"+
    "\1\71\3\152\1\71\1\152\1\0\5\71\3\0\1\153"+
    "\1\30\1\6\1\0\1\6\1\153\2\6\6\0\3\6"+
    "\1\33\1\34\1\0\5\6\1\35\6\0\1\6\4\0"+
    "\1\153\1\6\3\153\1\6\1\153\1\0\5\6\53\0"+
    "\1\36\62\0\1\36\16\0\1\154\1\47\3\0\1\154"+
    "\2\50\6\0\3\50\3\0\5\50\7\0\1\50\4\0"+
    "\1\154\1\50\3\154\1\50\1\154\1\0\5\50\3\0"+
    "\1\155\1\47\1\50\1\0\1\50\1\155\2\50\6\0"+
    "\3\50\3\0\5\50\7\0\1\50\4\0\1\155\1\50"+
    "\3\155\1\50\1\155\1\0\5\50\2\0\2\156\1\157"+
    "\1\160\1\156\1\160\3\156\1\161\1\162\1\156\1\163"+
    "\5\156\1\0\42\156\1\0\1\164\4\0\1\164\6\0"+
    "\1\165\23\0\1\140\4\0\1\164\1\0\3\164\1\0"+
    "\1\164\25\0\1\165\50\0\1\166\4\0\1\166\37\0"+
    "\1\166\1\0\3\166\1\0\1\166\11\0\1\167\1\54"+
    "\1\53\1\0\1\53\1\167\2\53\6\0\3\53\3\0"+
    "\5\53\7\0\1\53\4\0\1\167\1\53\3\167\1\53"+
    "\1\167\1\0\5\53\3\0\1\53\1\54\3\0\3\53"+
    "\6\0\3\53\3\0\3\53\1\170\1\53\7\0\1\53"+
    "\4\0\7\53\1\0\5\53\3\0\1\53\1\54\3\0"+
    "\3\53\6\0\3\53\3\0\1\171\4\53\7\0\1\53"+
    "\4\0\7\53\1\0\5\53\3\0\1\53\1\54\3\0"+
    "\3\53\6\0\3\53\3\0\5\53\7\0\1\53\4\0"+
    "\2\53\1\172\4\53\1\0\5\53\3\0\1\53\1\54"+
    "\3\0\3\53\6\0\3\53\3\0\4\53\1\173\7\0"+
    "\1\53\4\0\7\53\1\0\5\53\3\0\1\53\1\54"+
    "\3\0\3\53\6\0\1\53\1\174\1\53\3\0\5\53"+
    "\7\0\1\53\4\0\7\53\1\0\5\53\32\0\1\175"+
    "\35\0\1\176\1\72\1\71\1\0\1\71\1\176\2\71"+
    "\6\0\3\71\1\0\1\34\1\0\5\71\1\35\6\0"+
    "\1\71\4\0\1\176\1\71\3\176\1\71\1\176\1\0"+
    "\5\71\3\0\1\177\1\30\1\6\1\0\1\6\1\177"+
    "\2\6\6\0\3\6\1\33\1\34\1\0\5\6\1\35"+
    "\6\0\1\6\4\0\1\177\1\6\3\177\1\6\1\177"+
    "\1\0\5\6\3\0\1\200\1\47\3\0\1\200\2\50"+
    "\6\0\3\50\3\0\5\50\7\0\1\50\4\0\1\200"+
    "\1\50\3\200\1\50\1\200\1\0\5\50\3\0\1\201"+
    "\1\47\1\50\1\0\1\50\1\201\2\50\6\0\3\50"+
    "\3\0\5\50\7\0\1\50\4\0\1\201\1\50\3\201"+
    "\1\50\1\201\1\0\5\50\2\0\2\156\1\157\6\156"+
    "\2\0\1\156\1\163\5\156\1\0\44\156\1\157\11\156"+
    "\1\202\50\156\2\161\1\203\6\161\1\204\53\161\2\162"+
    "\1\205\7\162\1\204\52\162\1\0\1\206\4\0\1\206"+
    "\6\0\1\207\23\0\1\140\4\0\1\206\1\0\3\206"+
    "\1\0\1\206\25\0\1\207\50\0\1\210\4\0\1\210"+
    "\37\0\1\210\1\0\3\210\1\0\1\210\11\0\1\211"+
    "\1\54\1\53\1\0\1\53\1\211\2\53\6\0\3\53"+
    "\3\0\5\53\7\0\1\53\4\0\1\211\1\53\3\211"+
    "\1\53\1\211\1\0\5\53\3\0\1\53\1\54\3\0"+
    "\3\53\6\0\1\53\1\212\1\53\3\0\5\53\7\0"+
    "\1\53\4\0\7\53\1\0\5\53\3\0\1\53\1\54"+
    "\3\0\3\53\6\0\3\53\3\0\5\53\7\0\1\53"+
    "\4\0\1\213\6\53\1\0\5\53\3\0\1\53\1\54"+
    "\3\0\3\53\6\0\3\53\3\0\5\53\7\0\1\214"+
    "\4\0\7\53\1\0\5\53\3\0\1\53\1\54\3\0"+
    "\3\53\6\0\3\53\3\0\5\53\7\0\1\53\4\0"+
    "\7\53\1\0\1\53\1\215\3\53\22\0\1\216\45\0"+
    "\1\217\1\72\1\71\1\0\1\71\1\217\2\71\6\0"+
    "\3\71\1\0\1\34\1\0\5\71\1\35\6\0\1\71"+
    "\4\0\1\217\1\71\3\217\1\71\1\217\1\0\5\71"+
    "\3\0\1\220\1\30\1\6\1\0\1\6\1\220\2\6"+
    "\6\0\3\6\1\33\1\34\1\0\5\6\1\35\6\0"+
    "\1\6\4\0\1\220\1\6\3\220\1\6\1\220\1\0"+
    "\5\6\3\0\1\221\1\47\3\0\1\221\2\50\6\0"+
    "\3\50\3\0\5\50\7\0\1\50\4\0\1\221\1\50"+
    "\3\221\1\50\1\221\1\0\5\50\3\0\1\222\1\47"+
    "\1\50\1\0\1\50\1\222\2\50\6\0\3\50\3\0"+
    "\5\50\7\0\1\50\4\0\1\222\1\50\3\222\1\50"+
    "\1\222\1\0\5\50\2\0\2\161\1\203\6\161\1\223"+
    "\53\161\3\0\1\204\1\0\1\204\6\0\1\163\50\0"+
    "\2\162\1\205\7\162\1\224\52\162\1\0\1\225\4\0"+
    "\1\225\6\0\1\226\23\0\1\140\4\0\1\225\1\0"+
    "\3\225\1\0\1\225\25\0\1\226\50\0\1\227\4\0"+
    "\1\227\37\0\1\227\1\0\3\227\1\0\1\227\11\0"+
    "\1\230\1\54\1\53\1\0\1\53\1\230\2\53\6\0"+
    "\3\53\3\0\5\53\7\0\1\53\4\0\1\230\1\53"+
    "\3\230\1\53\1\230\1\0\5\53\3\0\1\53\1\54"+
    "\3\0\3\53\6\0\3\53\3\0\4\53\1\231\7\0"+
    "\1\53\4\0\7\53\1\0\5\53\3\0\1\232\1\233"+
    "\1\234\1\0\1\234\2\232\1\53\6\0\3\232\3\0"+
    "\5\232\7\0\1\53\4\0\7\232\1\0\5\232\3\0"+
    "\1\53\1\54\3\0\3\53\6\0\3\53\3\0\5\53"+
    "\7\0\1\53\4\0\4\53\1\235\2\53\1\0\5\53"+
    "\3\0\1\53\1\54\3\0\3\53\6\0\3\53\3\0"+
    "\5\53\7\0\1\53\4\0\2\53\1\236\4\53\1\0"+
    "\5\53\33\0\1\237\34\0\1\240\1\72\1\71\1\0"+
    "\1\71\1\240\2\71\6\0\3\71\1\0\1\34\1\0"+
    "\5\71\1\35\6\0\1\71\4\0\1\240\1\71\3\240"+
    "\1\71\1\240\1\0\5\71\3\0\1\6\1\30\1\6"+
    "\1\0\4\6\6\0\3\6\1\33\1\34\1\0\5\6"+
    "\1\35\6\0\1\6\4\0\7\6\1\0\5\6\3\0"+
    "\1\241\1\47\1\50\1\0\1\50\1\241\2\50\6\0"+
    "\3\50\3\0\5\50\7\0\1\50\4\0\1\241\1\50"+
    "\3\241\1\50\1\241\1\0\5\50\2\0\2\161\1\203"+
    "\1\223\1\161\1\223\3\161\1\204\2\161\1\242\50\161"+
    "\2\162\1\205\1\224\1\162\1\224\4\162\1\204\1\162"+
    "\1\243\50\162\1\0\1\244\4\0\1\244\6\0\1\245"+
    "\23\0\1\140\4\0\1\244\1\0\3\244\1\0\1\244"+
    "\25\0\1\245\50\0\1\246\4\0\1\246\37\0\1\246"+
    "\1\0\3\246\1\0\1\246\11\0\1\247\1\54\1\53"+
    "\1\0\1\53\1\247\2\53\6\0\3\53\3\0\5\53"+
    "\7\0\1\53\4\0\1\247\1\53\3\247\1\53\1\247"+
    "\1\0\5\53\2\0\1\250\1\251\1\252\1\253\1\250"+
    "\1\253\3\251\1\254\1\255\1\250\1\0\2\250\1\256"+
    "\2\251\1\0\2\250\5\251\1\257\6\250\1\251\4\250"+
    "\7\251\1\250\5\251\2\250\1\0\1\232\1\233\1\260"+
    "\1\0\1\260\3\232\6\0\3\232\1\0\1\234\1\0"+
    "\5\232\7\0\1\232\4\0\7\232\1\0\5\232\3\0"+
    "\1\261\1\232\1\0\2\232\1\261\37\232\1\261\1\232"+
    "\3\261\1\232\1\261\10\232\1\0\1\232\1\233\1\234"+
    "\1\0\1\234\2\232\7\0\3\232\3\0\5\232\14\0"+
    "\7\232\1\0\5\232\3\0\1\53\1\54\3\0\3\53"+
    "\6\0\3\53\3\0\5\53\7\0\1\53\4\0\1\262"+
    "\6\53\1\0\5\53\3\0\1\53\1\54\3\0\3\53"+
    "\6\0\3\53\3\0\4\53\1\263\7\0\1\53\4\0"+
    "\7\53\1\0\5\53\50\0\1\264\17\0\1\265\1\72"+
    "\1\71\1\0\1\71\1\265\2\71\6\0\3\71\1\0"+
    "\1\34\1\0\5\71\1\35\6\0\1\71\4\0\1\265"+
    "\1\71\3\265\1\71\1\265\1\0\5\71\3\0\1\50"+
    "\1\47\1\50\1\0\4\50\6\0\3\50\3\0\5\50"+
    "\7\0\1\50\4\0\7\50\1\0\5\50\43\0\1\140"+
    "\24\0\1\266\4\0\1\266\37\0\1\266\1\0\3\266"+
    "\1\0\1\266\11\0\1\53\1\54\1\53\1\0\4\53"+
    "\6\0\3\53\3\0\5\53\7\0\1\53\4\0\7\53"+
    "\1\0\5\53\2\0\2\250\1\267\6\250\2\0\1\250"+
    "\1\0\5\250\1\0\7\250\1\257\33\250\1\251\1\252"+
    "\3\250\3\251\2\0\1\250\1\0\2\250\3\251\1\0"+
    "\2\250\5\251\1\257\6\250\1\251\4\250\7\251\1\250"+
    "\5\251\3\250\1\270\1\271\1\250\2\251\1\270\23\251"+
    "\1\272\13\251\1\270\1\251\3\270\1\251\1\270\10\251"+
    "\2\250\1\267\1\253\1\250\1\253\3\250\1\254\1\255"+
    "\1\250\1\0\2\250\1\273\2\250\1\0\7\250\1\257"+
    "\32\250\2\254\1\274\6\254\1\275\53\254\2\255\1\276"+
    "\7\255\1\275\52\255\1\250\1\251\1\252\3\250\3\251"+
    "\2\0\1\250\1\0\2\250\1\251\1\277\1\251\1\0"+
    "\2\250\5\251\1\257\6\250\1\251\4\250\7\251\1\250"+
    "\5\251\2\250\3\0\1\260\1\0\1\260\15\0\1\234"+
    "\42\0\1\300\1\233\1\232\1\0\1\232\1\300\2\232"+
    "\6\0\3\232\1\0\1\234\1\0\5\232\7\0\1\232"+
    "\4\0\1\300\1\232\3\300\1\232\1\300\1\0\5\232"+
    "\3\0\1\53\1\54\3\0\3\53\6\0\3\53\3\0"+
    "\5\53\7\0\1\53\4\0\6\53\1\301\1\0\5\53"+
    "\3\0\1\53\1\54\1\302\1\0\1\302\3\53\1\303"+
    "\1\304\4\0\3\53\3\0\5\53\7\0\1\53\4\0"+
    "\7\53\1\0\5\53\55\0\1\305\12\0\1\71\1\72"+
    "\1\71\1\0\4\71\6\0\3\71\1\0\1\34\1\0"+
    "\5\71\1\35\6\0\1\71\4\0\7\71\1\0\5\71"+
    "\3\0\1\306\4\0\1\306\37\0\1\306\1\0\3\306"+
    "\1\0\1\306\10\0\2\250\1\267\27\250\1\257\33\250"+
    "\1\307\1\252\1\251\1\250\1\251\1\307\2\251\2\0"+
    "\1\250\1\0\2\250\3\251\1\0\2\250\5\251\1\257"+
    "\6\250\1\251\4\250\1\307\1\251\3\307\1\251\1\307"+
    "\1\250\5\251\3\250\1\251\1\252\3\250\3\251\6\250"+
    "\3\251\3\250\5\251\1\257\6\250\1\251\4\250\7\251"+
    "\1\250\5\251\4\250\1\267\6\250\2\0\1\250\1\0"+
    "\3\250\1\310\1\250\1\0\7\250\1\257\32\250\2\254"+
    "\1\274\6\254\1\311\53\254\1\0\1\312\1\313\1\314"+
    "\1\0\1\314\2\312\7\0\3\312\3\0\5\312\1\315"+
    "\13\0\7\312\1\0\5\312\2\0\2\255\1\276\7\255"+
    "\1\316\52\255\1\250\1\251\1\252\3\250\3\251\2\0"+
    "\1\250\1\0\2\250\2\251\1\317\1\0\2\250\5\251"+
    "\1\257\6\250\1\251\4\250\7\251\1\250\5\251\2\250"+
    "\1\0\1\320\1\233\1\232\1\0\1\232\1\320\2\232"+
    "\6\0\3\232\1\0\1\234\1\0\5\232\7\0\1\232"+
    "\4\0\1\320\1\232\3\320\1\232\1\320\1\0\5\232"+
    "\3\0\1\53\1\54\3\0\3\53\6\0\3\53\3\0"+
    "\5\53\7\0\1\53\4\0\2\53\1\321\4\53\1\0"+
    "\5\53\5\0\1\302\1\0\1\302\3\0\1\303\1\304"+
    "\52\0\2\303\1\322\6\303\1\323\53\303\2\304\1\324"+
    "\7\304\1\323\52\304\31\0\1\325\33\0\1\250\1\326"+
    "\1\252\1\251\1\250\1\251\1\326\2\251\2\0\1\250"+
    "\1\0\2\250\3\251\1\0\2\250\5\251\1\257\6\250"+
    "\1\251\4\250\1\326\1\251\3\326\1\251\1\326\1\250"+
    "\5\251\4\250\1\267\6\250\2\0\1\250\1\0\4\250"+
    "\1\327\1\0\7\250\1\257\32\250\1\254\1\330\1\331"+
    "\1\332\1\254\1\332\2\330\1\254\1\275\5\254\3\330"+
    "\3\254\5\330\1\333\13\254\7\330\1\254\5\330\2\254"+
    "\1\0\1\312\1\313\1\334\1\0\1\334\3\312\6\0"+
    "\3\312\1\0\1\314\1\0\5\312\1\315\6\0\1\312"+
    "\4\0\7\312\1\0\5\312\3\0\1\335\1\312\1\0"+
    "\2\312\1\335\37\312\1\335\1\312\3\335\1\312\1\335"+
    "\10\312\1\0\1\312\1\313\1\314\1\0\1\314\2\312"+
    "\7\0\3\312\3\0\5\312\14\0\7\312\1\0\5\312"+
    "\2\0\1\255\1\336\1\337\1\340\1\255\1\340\2\336"+
    "\2\255\1\275\4\255\3\336\3\255\5\336\1\341\13\255"+
    "\7\336\1\255\5\336\2\255\1\250\1\251\1\252\3\250"+
    "\3\251\2\0\1\250\1\0\2\250\3\251\1\342\2\250"+
    "\5\251\1\257\6\250\1\251\4\250\7\251\1\250\5\251"+
    "\2\250\1\0\1\343\1\233\1\232\1\0\1\232\1\343"+
    "\2\232\6\0\3\232\1\0\1\234\1\0\5\232\7\0"+
    "\1\232\4\0\1\343\1\232\3\343\1\232\1\343\1\0"+
    "\5\232\2\0\2\303\1\322\6\303\1\344\53\303\3\0"+
    "\1\323\1\0\1\323\24\0\1\345\32\0\2\304\1\324"+
    "\7\304\1\346\52\304\1\250\1\347\1\252\1\251\1\250"+
    "\1\251\1\347\2\251\2\0\1\250\1\0\2\250\3\251"+
    "\1\0\2\250\5\251\1\257\6\250\1\251\4\250\1\347"+
    "\1\251\3\347\1\251\1\347\1\250\5\251\4\250\1\267"+
    "\6\250\2\0\1\250\1\0\5\250\1\342\7\250\1\257"+
    "\32\250\1\254\1\330\1\331\1\350\1\254\1\350\3\330"+
    "\1\275\5\254\3\330\1\254\1\332\1\254\5\330\1\333"+
    "\6\254\1\330\4\254\7\330\1\254\5\330\3\254\1\351"+
    "\1\352\1\254\2\330\1\351\2\330\1\353\34\330\1\351"+
    "\1\330\3\351\1\330\1\351\10\330\1\254\1\330\1\331"+
    "\1\332\1\254\1\332\2\330\1\254\1\275\5\254\3\330"+
    "\3\254\5\330\14\254\7\330\1\254\5\330\2\254\3\0"+
    "\1\334\1\0\1\334\15\0\1\314\6\0\1\315\33\0"+
    "\1\354\1\313\1\312\1\0\1\312\1\354\2\312\6\0"+
    "\3\312\1\0\1\314\1\0\5\312\1\315\6\0\1\312"+
    "\4\0\1\354\1\312\3\354\1\312\1\354\1\0\5\312"+
    "\2\0\1\255\1\336\1\337\1\355\1\255\1\355\3\336"+
    "\1\255\1\275\4\255\3\336\1\255\1\340\1\255\5\336"+
    "\1\341\6\255\1\336\4\255\7\336\1\255\5\336\3\255"+
    "\1\356\1\357\1\255\2\336\1\356\3\336\1\360\33\336"+
    "\1\356\1\336\3\356\1\336\1\356\10\336\1\255\1\336"+
    "\1\337\1\340\1\255\1\340\2\336\2\255\1\275\4\255"+
    "\3\336\3\255\5\336\14\255\7\336\1\255\5\336\2\255"+
    "\2\361\1\362\1\342\1\361\1\342\3\361\1\363\1\364"+
    "\1\361\1\275\5\361\1\0\42\361\1\0\1\365\1\233"+
    "\1\232\1\0\1\232\1\365\2\232\6\0\3\232\1\0"+
    "\1\234\1\0\5\232\7\0\1\232\4\0\1\365\1\232"+
    "\3\365\1\232\1\365\1\0\5\232\2\0\2\303\1\322"+
    "\1\344\1\303\1\344\3\303\1\323\20\303\1\366\32\303"+
    "\2\304\1\324\1\346\1\304\1\346\4\304\1\323\17\304"+
    "\1\367\32\304\1\250\1\370\1\252\1\251\1\250\1\251"+
    "\1\370\2\251\2\0\1\250\1\0\2\250\3\251\1\0"+
    "\2\250\5\251\1\257\6\250\1\251\4\250\1\370\1\251"+
    "\3\370\1\251\1\370\1\250\5\251\2\250\2\254\1\274"+
    "\1\350\1\254\1\350\3\254\1\275\11\254\1\332\6\254"+
    "\1\333\33\254\1\371\1\331\1\330\1\254\1\330\1\371"+
    "\2\330\1\275\5\254\3\330\1\254\1\332\1\254\5\330"+
    "\1\333\6\254\1\330\4\254\1\371\1\330\3\371\1\330"+
    "\1\371\1\254\5\330\3\254\1\330\1\331\1\350\1\254"+
    "\1\350\3\330\1\311\5\254\3\330\1\254\1\332\1\254"+
    "\5\330\1\333\6\254\1\330\4\254\7\330\1\254\5\330"+
    "\3\254\1\330\1\331\1\372\1\254\1\372\3\330\1\275"+
    "\5\254\3\330\1\254\1\332\1\254\5\330\1\333\6\254"+
    "\1\330\4\254\7\330\1\254\5\330\2\254\1\0\1\373"+
    "\1\313\1\312\1\0\1\312\1\373\2\312\6\0\3\312"+
    "\1\0\1\314\1\0\5\312\1\315\6\0\1\312\4\0"+
    "\1\373\1\312\3\373\1\312\1\373\1\0\5\312\2\0"+
    "\2\255\1\276\1\355\1\255\1\355\4\255\1\275\10\255"+
    "\1\340\6\255\1\341\33\255\1\374\1\337\1\336\1\255"+
    "\1\336\1\374\2\336\1\255\1\275\4\255\3\336\1\255"+
    "\1\340\1\255\5\336\1\341\6\255\1\336\4\255\1\374"+
    "\1\336\3\374\1\336\1\374\1\255\5\336\3\255\1\336"+
    "\1\337\1\355\1\255\1\355\3\336\1\255\1\316\4\255"+
    "\3\336\1\255\1\340\1\255\5\336\1\341\6\255\1\336"+
    "\4\255\7\336\1\255\5\336\3\255\1\336\1\337\1\375"+
    "\1\255\1\375\3\336\1\255\1\275\4\255\3\336\1\255"+
    "\1\340\1\255\5\336\1\341\6\255\1\336\4\255\7\336"+
    "\1\255\5\336\2\255\2\361\1\362\6\361\2\0\1\361"+
    "\1\275\5\361\1\0\44\361\1\362\11\361\1\376\50\361"+
    "\2\363\1\377\6\363\1\u0100\53\363\2\364\1\u0101\7\364"+
    "\1\u0100\52\364\1\0\1\u0102\1\233\1\232\1\0\1\232"+
    "\1\u0102\2\232\6\0\3\232\1\0\1\234\1\0\5\232"+
    "\7\0\1\232\4\0\1\u0102\1\232\3\u0102\1\232\1\u0102"+
    "\1\0\5\232\2\0\1\250\1\u0103\1\252\1\251\1\250"+
    "\1\251\1\u0103\2\251\2\0\1\250\1\0\2\250\3\251"+
    "\1\0\2\250\5\251\1\257\6\250\1\251\4\250\1\u0103"+
    "\1\251\3\u0103\1\251\1\u0103\1\250\5\251\2\250\1\254"+
    "\1\u0104\1\331\1\330\1\254\1\330\1\u0104\2\330\1\275"+
    "\5\254\3\330\1\254\1\332\1\254\5\330\1\333\6\254"+
    "\1\330\4\254\1\u0104\1\330\3\u0104\1\330\1\u0104\1\254"+
    "\5\330\3\254\1\330\1\331\1\372\1\254\1\372\2\330"+
    "\1\254\1\275\5\254\3\330\1\254\1\332\1\254\5\330"+
    "\1\333\13\254\7\330\1\254\5\330\2\254\1\0\1\u0105"+
    "\1\313\1\312\1\0\1\312\1\u0105\2\312\6\0\3\312"+
    "\1\0\1\314\1\0\5\312\1\315\6\0\1\312\4\0"+
    "\1\u0105\1\312\3\u0105\1\312\1\u0105\1\0\5\312\2\0"+
    "\1\255\1\u0106\1\337\1\336\1\255\1\336\1\u0106\2\336"+
    "\1\255\1\275\4\255\3\336\1\255\1\340\1\255\5\336"+
    "\1\341\6\255\1\336\4\255\1\u0106\1\336\3\u0106\1\336"+
    "\1\u0106\1\255\5\336\3\255\1\336\1\337\1\375\1\255"+
    "\1\375\2\336\2\255\1\275\4\255\3\336\1\255\1\340"+
    "\1\255\5\336\1\341\13\255\7\336\1\255\5\336\2\255"+
    "\1\361\1\u0107\1\u0108\1\u0109\1\361\1\u0109\2\u0107\1\361"+
    "\2\0\1\361\1\275\2\361\3\u0107\1\0\2\361\5\u0107"+
    "\1\u010a\13\361\7\u0107\1\361\5\u0107\2\361\2\363\1\377"+
    "\6\363\1\u010b\53\363\3\0\1\u0100\1\0\1\u0100\6\0"+
    "\1\275\50\0\2\364\1\u0101\7\364\1\u010c\52\364\1\0"+
    "\1\232\1\233\1\232\1\0\4\232\6\0\3\232\1\0"+
    "\1\234\1\0\5\232\7\0\1\232\4\0\7\232\1\0"+
    "\5\232\2\0\1\250\1\251\1\252\1\251\1\250\4\251"+
    "\2\0\1\250\1\0\2\250\3\251\1\0\2\250\5\251"+
    "\1\257\6\250\1\251\4\250\7\251\1\250\5\251\2\250"+
    "\1\254\1\u010d\1\331\1\330\1\254\1\330\1\u010d\2\330"+
    "\1\275\5\254\3\330\1\254\1\332\1\254\5\330\1\333"+
    "\6\254\1\330\4\254\1\u010d\1\330\3\u010d\1\330\1\u010d"+
    "\1\254\5\330\2\254\1\0\1\u010e\1\313\1\312\1\0"+
    "\1\312\1\u010e\2\312\6\0\3\312\1\0\1\314\1\0"+
    "\5\312\1\315\6\0\1\312\4\0\1\u010e\1\312\3\u010e"+
    "\1\312\1\u010e\1\0\5\312\2\0\1\255\1\u010f\1\337"+
    "\1\336\1\255\1\336\1\u010f\2\336\1\255\1\275\4\255"+
    "\3\336\1\255\1\340\1\255\5\336\1\341\6\255\1\336"+
    "\4\255\1\u010f\1\336\3\u010f\1\336\1\u010f\1\255\5\336"+
    "\2\255\1\361\1\u0107\1\u0108\1\u0110\1\361\1\u0110\3\u0107"+
    "\2\0\1\361\1\275\2\361\3\u0107\1\0\1\u0109\1\361"+
    "\5\u0107\1\u010a\6\361\1\u0107\4\361\7\u0107\1\361\5\u0107"+
    "\3\361\1\u0111\1\u0112\1\361\2\u0107\1\u0111\5\u0107\1\u0113"+
    "\31\u0107\1\u0111\1\u0107\3\u0111\1\u0107\1\u0111\10\u0107\1\361"+
    "\1\u0107\1\u0108\1\u0109\1\361\1\u0109\2\u0107\1\361\2\0"+
    "\1\361\1\275\2\361\3\u0107\1\0\2\361\5\u0107\14\361"+
    "\7\u0107\1\361\5\u0107\2\361\2\363\1\377\1\u010b\1\363"+
    "\1\u010b\3\363\1\u0100\2\363\1\u0114\50\363\2\364\1\u0101"+
    "\1\u010c\1\364\1\u010c\4\364\1\u0100\1\364\1\u0115\50\364"+
    "\1\254\1\u0116\1\331\1\330\1\254\1\330\1\u0116\2\330"+
    "\1\275\5\254\3\330\1\254\1\332\1\254\5\330\1\333"+
    "\6\254\1\330\4\254\1\u0116\1\330\3\u0116\1\330\1\u0116"+
    "\1\254\5\330\2\254\1\0\1\u0117\1\313\1\312\1\0"+
    "\1\312\1\u0117\2\312\6\0\3\312\1\0\1\314\1\0"+
    "\5\312\1\315\6\0\1\312\4\0\1\u0117\1\312\3\u0117"+
    "\1\312\1\u0117\1\0\5\312\2\0\1\255\1\u0118\1\337"+
    "\1\336\1\255\1\336\1\u0118\2\336\1\255\1\275\4\255"+
    "\3\336\1\255\1\340\1\255\5\336\1\341\6\255\1\336"+
    "\4\255\1\u0118\1\336\3\u0118\1\336\1\u0118\1\255\5\336"+
    "\2\255\2\361\1\362\1\u0110\1\361\1\u0110\3\361\2\0"+
    "\1\361\1\275\5\361\1\0\1\u0109\6\361\1\u010a\33\361"+
    "\1\u0119\1\u0108\1\u0107\1\361\1\u0107\1\u0119\2\u0107\2\0"+
    "\1\361\1\275\2\361\3\u0107\1\0\1\u0109\1\361\5\u0107"+
    "\1\u010a\6\361\1\u0107\4\361\1\u0119\1\u0107\3\u0119\1\u0107"+
    "\1\u0119\1\361\5\u0107\3\361\1\u0107\1\u0108\1\u0110\1\361"+
    "\1\u0110\3\u0107\3\361\1\376\2\361\3\u0107\1\361\1\u0109"+
    "\1\361\5\u0107\1\u010a\6\361\1\u0107\4\361\7\u0107\1\361"+
    "\5\u0107\3\361\1\u0107\1\u0108\1\u011a\1\361\1\u011a\3\u0107"+
    "\2\0\1\361\1\275\2\361\3\u0107\1\0\1\u0109\1\361"+
    "\5\u0107\1\u010a\6\361\1\u0107\4\361\7\u0107\1\361\5\u0107"+
    "\2\361\1\363\1\u011b\1\u011c\1\u011d\1\363\1\u011d\2\u011b"+
    "\1\363\1\u0100\5\363\3\u011b\3\363\5\u011b\1\u011e\13\363"+
    "\7\u011b\1\363\5\u011b\2\363\1\364\1\u011f\1\u0120\1\u0121"+
    "\1\364\1\u0121\2\u011f\2\364\1\u0100\4\364\3\u011f\3\364"+
    "\5\u011f\1\u0122\13\364\7\u011f\1\364\5\u011f\2\364\1\254"+
    "\1\u0123\1\331\1\330\1\254\1\330\1\u0123\2\330\1\275"+
    "\5\254\3\330\1\254\1\332\1\254\5\330\1\333\6\254"+
    "\1\330\4\254\1\u0123\1\330\3\u0123\1\330\1\u0123\1\254"+
    "\5\330\2\254\1\0\1\312\1\313\1\312\1\0\4\312"+
    "\6\0\3\312\1\0\1\314\1\0\5\312\1\315\6\0"+
    "\1\312\4\0\7\312\1\0\5\312\2\0\1\255\1\u0124"+
    "\1\337\1\336\1\255\1\336\1\u0124\2\336\1\255\1\275"+
    "\4\255\3\336\1\255\1\340\1\255\5\336\1\341\6\255"+
    "\1\336\4\255\1\u0124\1\336\3\u0124\1\336\1\u0124\1\255"+
    "\5\336\2\255\1\361\1\u0125\1\u0108\1\u0107\1\361\1\u0107"+
    "\1\u0125\2\u0107\2\0\1\361\1\275\2\361\3\u0107\1\0"+
    "\1\u0109\1\361\5\u0107\1\u010a\6\361\1\u0107\4\361\1\u0125"+
    "\1\u0107\3\u0125\1\u0107\1\u0125\1\361\5\u0107\3\361\1\u0107"+
    "\1\u0108\1\u011a\1\361\1\u011a\2\u0107\1\361\2\0\1\361"+
    "\1\275\2\361\3\u0107\1\0\1\u0109\1\361\5\u0107\1\u010a"+
    "\13\361\7\u0107\1\361\5\u0107\2\361\1\363\1\u011b\1\u011c"+
    "\1\u0126\1\363\1\u0126\3\u011b\1\u0100\5\363\3\u011b\1\363"+
    "\1\u011d\1\363\5\u011b\1\u011e\6\363\1\u011b\4\363\7\u011b"+
    "\1\363\5\u011b\3\363\1\u0127\1\u0128\1\363\2\u011b\1\u0127"+
    "\2\u011b\1\u0129\34\u011b\1\u0127\1\u011b\3\u0127\1\u011b\1\u0127"+
    "\10\u011b\1\363\1\u011b\1\u011c\1\u011d\1\363\1\u011d\2\u011b"+
    "\1\363\1\u0100\5\363\3\u011b\3\363\5\u011b\14\363\7\u011b"+
    "\1\363\5\u011b\2\363\1\364\1\u011f\1\u0120\1\u012a\1\364"+
    "\1\u012a\3\u011f\1\364\1\u0100\4\364\3\u011f\1\364\1\u0121"+
    "\1\364\5\u011f\1\u0122\6\364\1\u011f\4\364\7\u011f\1\364"+
    "\5\u011f\3\364\1\u012b\1\u012c\1\364\2\u011f\1\u012b\3\u011f"+
    "\1\u012d\33\u011f\1\u012b\1\u011f\3\u012b\1\u011f\1\u012b\10\u011f"+
    "\1\364\1\u011f\1\u0120\1\u0121\1\364\1\u0121\2\u011f\2\364"+
    "\1\u0100\4\364\3\u011f\3\364\5\u011f\14\364\7\u011f\1\364"+
    "\5\u011f\2\364\1\254\1\330\1\331\1\330\1\254\4\330"+
    "\1\275\5\254\3\330\1\254\1\332\1\254\5\330\1\333"+
    "\6\254\1\330\4\254\7\330\1\254\5\330\2\254\1\255"+
    "\1\336\1\337\1\336\1\255\4\336\1\255\1\275\4\255"+
    "\3\336\1\255\1\340\1\255\5\336\1\341\6\255\1\336"+
    "\4\255\7\336\1\255\5\336\2\255\1\361\1\u012e\1\u0108"+
    "\1\u0107\1\361\1\u0107\1\u012e\2\u0107\2\0\1\361\1\275"+
    "\2\361\3\u0107\1\0\1\u0109\1\361\5\u0107\1\u010a\6\361"+
    "\1\u0107\4\361\1\u012e\1\u0107\3\u012e\1\u0107\1\u012e\1\361"+
    "\5\u0107\2\361\2\363\1\377\1\u0126\1\363\1\u0126\3\363"+
    "\1\u0100\11\363\1\u011d\6\363\1\u011e\33\363\1\u012f\1\u011c"+
    "\1\u011b\1\363\1\u011b\1\u012f\2\u011b\1\u0100\5\363\3\u011b"+
    "\1\363\1\u011d\1\363\5\u011b\1\u011e\6\363\1\u011b\4\363"+
    "\1\u012f\1\u011b\3\u012f\1\u011b\1\u012f\1\363\5\u011b\3\363"+
    "\1\u011b\1\u011c\1\u0126\1\363\1\u0126\3\u011b\1\u010b\5\363"+
    "\3\u011b\1\363\1\u011d\1\363\5\u011b\1\u011e\6\363\1\u011b"+
    "\4\363\7\u011b\1\363\5\u011b\3\363\1\u011b\1\u011c\1\u0130"+
    "\1\363\1\u0130\3\u011b\1\u0100\2\363\1\u0114\2\363\3\u011b"+
    "\1\363\1\u011d\1\363\5\u011b\1\u011e\6\363\1\u011b\4\363"+
    "\7\u011b\1\363\5\u011b\2\363\2\364\1\u0101\1\u012a\1\364"+
    "\1\u012a\4\364\1\u0100\10\364\1\u0121\6\364\1\u0122\33\364"+
    "\1\u0131\1\u0120\1\u011f\1\364\1\u011f\1\u0131\2\u011f\1\364"+
    "\1\u0100\4\364\3\u011f\1\364\1\u0121\1\364\5\u011f\1\u0122"+
    "\6\364\1\u011f\4\364\1\u0131\1\u011f\3\u0131\1\u011f\1\u0131"+
    "\1\364\5\u011f\3\364\1\u011f\1\u0120\1\u012a\1\364\1\u012a"+
    "\3\u011f\1\364\1\u010c\4\364\3\u011f\1\364\1\u0121\1\364"+
    "\5\u011f\1\u0122\6\364\1\u011f\4\364\7\u011f\1\364\5\u011f"+
    "\3\364\1\u011f\1\u0120\1\u0132\1\364\1\u0132\3\u011f\1\364"+
    "\1\u0100\1\364\1\u0115\2\364\3\u011f\1\364\1\u0121\1\364"+
    "\5\u011f\1\u0122\6\364\1\u011f\4\364\7\u011f\1\364\5\u011f"+
    "\2\364\1\361\1\u0133\1\u0108\1\u0107\1\361\1\u0107\1\u0133"+
    "\2\u0107\2\0\1\361\1\275\2\361\3\u0107\1\0\1\u0109"+
    "\1\361\5\u0107\1\u010a\6\361\1\u0107\4\361\1\u0133\1\u0107"+
    "\3\u0133\1\u0107\1\u0133\1\361\5\u0107\2\361\1\363\1\u0134"+
    "\1\u011c\1\u011b\1\363\1\u011b\1\u0134\2\u011b\1\u0100\5\363"+
    "\3\u011b\1\363\1\u011d\1\363\5\u011b\1\u011e\6\363\1\u011b"+
    "\4\363\1\u0134\1\u011b\3\u0134\1\u011b\1\u0134\1\363\5\u011b"+
    "\4\363\1\377\1\u0130\1\363\1\u0130\3\363\1\u0100\2\363"+
    "\1\u0114\6\363\1\u011d\6\363\1\u011e\32\363\1\364\1\u0135"+
    "\1\u0120\1\u011f\1\364\1\u011f\1\u0135\2\u011f\1\364\1\u0100"+
    "\4\364\3\u011f\1\364\1\u0121\1\364\5\u011f\1\u0122\6\364"+
    "\1\u011f\4\364\1\u0135\1\u011f\3\u0135\1\u011f\1\u0135\1\364"+
    "\5\u011f\4\364\1\u0101\1\u0132\1\364\1\u0132\4\364\1\u0100"+
    "\1\364\1\u0115\6\364\1\u0121\6\364\1\u0122\32\364\1\361"+
    "\1\u0136\1\u0108\1\u0107\1\361\1\u0107\1\u0136\2\u0107\2\0"+
    "\1\361\1\275\2\361\3\u0107\1\0\1\u0109\1\361\5\u0107"+
    "\1\u010a\6\361\1\u0107\4\361\1\u0136\1\u0107\3\u0136\1\u0107"+
    "\1\u0136\1\361\5\u0107\2\361\1\363\1\u0137\1\u011c\1\u011b"+
    "\1\363\1\u011b\1\u0137\2\u011b\1\u0100\5\363\3\u011b\1\363"+
    "\1\u011d\1\363\5\u011b\1\u011e\6\363\1\u011b\4\363\1\u0137"+
    "\1\u011b\3\u0137\1\u011b\1\u0137\1\363\5\u011b\2\363\1\364"+
    "\1\u0138\1\u0120\1\u011f\1\364\1\u011f\1\u0138\2\u011f\1\364"+
    "\1\u0100\4\364\3\u011f\1\364\1\u0121\1\364\5\u011f\1\u0122"+
    "\6\364\1\u011f\4\364\1\u0138\1\u011f\3\u0138\1\u011f\1\u0138"+
    "\1\364\5\u011f\2\364\1\361\1\u0107\1\u0108\1\u0107\1\361"+
    "\4\u0107\2\0\1\361\1\275\2\361\3\u0107\1\0\1\u0109"+
    "\1\361\5\u0107\1\u010a\6\361\1\u0107\4\361\7\u0107\1\361"+
    "\5\u0107\2\361\1\363\1\u0139\1\u011c\1\u011b\1\363\1\u011b"+
    "\1\u0139\2\u011b\1\u0100\5\363\3\u011b\1\363\1\u011d\1\363"+
    "\5\u011b\1\u011e\6\363\1\u011b\4\363\1\u0139\1\u011b\3\u0139"+
    "\1\u011b\1\u0139\1\363\5\u011b\2\363\1\364\1\u013a\1\u0120"+
    "\1\u011f\1\364\1\u011f\1\u013a\2\u011f\1\364\1\u0100\4\364"+
    "\3\u011f\1\364\1\u0121\1\364\5\u011f\1\u0122\6\364\1\u011f"+
    "\4\364\1\u013a\1\u011f\3\u013a\1\u011f\1\u013a\1\364\5\u011f"+
    "\2\364\1\363\1\u013b\1\u011c\1\u011b\1\363\1\u011b\1\u013b"+
    "\2\u011b\1\u0100\5\363\3\u011b\1\363\1\u011d\1\363\5\u011b"+
    "\1\u011e\6\363\1\u011b\4\363\1\u013b\1\u011b\3\u013b\1\u011b"+
    "\1\u013b\1\363\5\u011b\2\363\1\364\1\u013c\1\u0120\1\u011f"+
    "\1\364\1\u011f\1\u013c\2\u011f\1\364\1\u0100\4\364\3\u011f"+
    "\1\364\1\u0121\1\364\5\u011f\1\u0122\6\364\1\u011f\4\364"+
    "\1\u013c\1\u011f\3\u013c\1\u011f\1\u013c\1\364\5\u011f\2\364"+
    "\1\363\1\u011b\1\u011c\1\u011b\1\363\4\u011b\1\u0100\5\363"+
    "\3\u011b\1\363\1\u011d\1\363\5\u011b\1\u011e\6\363\1\u011b"+
    "\4\363\7\u011b\1\363\5\u011b\2\363\1\364\1\u011f\1\u0120"+
    "\1\u011f\1\364\4\u011f\1\364\1\u0100\4\364\3\u011f\1\364"+
    "\1\u0121\1\364\5\u011f\1\u0122\6\364\1\u011f\4\364\7\u011f"+
    "\1\364\5\u011f\2\364";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14575];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\1\11\2\1\1\11\1\1\1\11"+
    "\10\1\3\0\1\11\1\0\2\11\1\1\2\0\1\11"+
    "\2\0\2\1\1\0\2\1\1\0\1\1\1\0\5\1"+
    "\5\0\2\11\2\0\3\1\12\0\13\1\3\0\1\11"+
    "\1\0\1\1\2\0\5\1\1\0\6\1\2\11\2\0"+
    "\3\1\5\0\1\11\11\1\2\0\4\1\3\0\10\1"+
    "\2\0\3\1\2\0\6\1\2\0\2\1\2\0\4\1"+
    "\1\11\2\1\1\0\1\1\4\0\6\1\2\0\1\1"+
    "\1\0\3\1\4\0\3\1\4\0\1\11\1\1\5\0"+
    "\1\11\1\0\3\1\3\0\1\11\1\1\4\0\1\1"+
    "\5\0\1\1\1\0\1\1\1\0\1\11\1\0\1\1"+
    "\15\0\4\1\11\0\2\1\6\0\1\1\23\0\1\1"+
    "\3\0\1\1\32\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[316];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	// Put stuff to include in the class here
	String detectedCharset;

	// External flag
	boolean paranoidStringCheck = false;
	boolean deleteErrors = true;
	boolean debug = true;
	
	// Internal flags
	boolean postBadImportFlag = false; // both URLs and @import's
	boolean importFlag = false;
	boolean urlFlag = false;

	// Writer
	Writer w = null; // Will NPE if not initialized properly

	public void parse () throws IOException {
		while (yylex() != null);
	}
	
	CSSTokenizerFilter(Reader r, Writer w, boolean paranoidStringCheck) {
		this(r);
		this.w = w;
		this.paranoidStringCheck = paranoidStringCheck;
	}

	void throwError(String s) throws IOException {
		throw new IllegalStateException("You MUST override throwError!");
	}

	String processImportURL(String s) {
		throw new IllegalStateException("You MUST override processImportURL!");
	}

	String processURL(String s) {
		throw new IllegalStateException("You MUST override processURL!");
	}
	
	void log(String s) {
		System.err.println("CSSTokenizerFilter: "+s);
	}

	void logError(String s) {
		System.err.println("CSSTokenizerFilter ERROR: "+s);
	}
	
	static String unquote(String s, char c) {
		if(s.length() > 1) {
			if(s.charAt(s.length()-1) == c) {
				s = s.substring(1, s.length()-1);
				return s;
			} else return "";
		} else return "";
	}
	
	// This is not very efficient. The parser below knows the quoting rules too.
	
	static boolean isHexDigit(char c) {
		return ('a' <= c && c <= 'f' ||
		  	'A' <= c && c <= 'F' ||
			'0' <= c && c <= '9');
	}
	
	class DecodedStringThingy {
		char quote; // " " means not quoted
		boolean url; // in a url() ?
		String data;
		public String suffix; // includes any whitespace
		public DecodedStringThingy(String s) {
			if(s.startsWith("url(")) {
				s = s.substring("url(".length());
				url = true;
			}
			char q = s.charAt(0);
			if(q == '\'' || q == '\"') {
				quote = q;
				s = s.substring(1);
			} else quote = ' ';
			StringBuffer buffer = new StringBuffer();
			int x = 0;
			boolean justEscaping = false;
			boolean stillEscaping = false;
			StringBuffer hexEscape = new StringBuffer();
			while(x < s.length()) {
				char c = s.charAt(x);
				x++;
				if(justEscaping) {
					if(c == '\n') {
						buffer.append(c);
						justEscaping = false;
					} else if(isHexDigit(c)) {
						hexEscape.append(c);
						justEscaping = false;
						stillEscaping = true;
					} else {
						buffer.append(c);
						// Will need to be reencoded if quote or \n
						justEscaping = false;
					}
				} else if(stillEscaping) {
					if(isHexDigit(c) && hexEscape.length() < 6) {
						hexEscape.append(c);
					} else if(Character.isWhitespace(c)) {
						// Ignore one whitespace char after an escape
						int d = Integer.parseInt(hexEscape.toString(),
									 16);
						if(d > 0xFFFF) {
							String error = 
							    "UCS-4 CHARACTERS OVER 0xFFFF NOT SUPPORTED!";
							logError(error);
							try {
								w.write("/* "+error+"*/");
							} catch (IOException e) {};
						} else {
							c = (char)d;
							buffer.append(c);
						}
						stillEscaping = false;
						hexEscape = new StringBuffer();
					} else {
						int d = Integer.parseInt(hexEscape.toString(),
									 16);
						if(d > 0xFFFF) {
							String error = 
							    "UCS-4 CHARACTERS OVER 0xFFFF NOT SUPPORTED!";
							logError(error);
							try {
								w.write("/* "+error+"*/");
							} catch (IOException e) {};
						} else {
							char o = (char)d;
							buffer.append(o);
						}
						buffer.append(c);
						stillEscaping = false;
						hexEscape = new StringBuffer();
					}
				} else {
					if(quote != ' ' && c == quote) {
						break;
					} else if (c == '\\') {
						justEscaping = true;
					} else {
						buffer.append(c);
					}
				}
			}
			x++;
			data = buffer.toString();
			if(url && s.length() > x+1 && s.charAt(x) == ')')
				x++;
			suffix = s.substring(x);
		}
		
		public String toString() {
			StringBuffer out = new StringBuffer();
			if(url) out.append("url(");
			if(quote != ' ') out.append(quote);
			out.append(unescapeData());
			if(quote != ' ') out.append(quote);
			if(url) out.append(")");
			out.append(suffix);
			return out.toString();
		}
		
		public String unescapeData() {
			StringBuffer sb = new StringBuffer();
			for(int i=0;i<data.length();i++) {
				char c = data.charAt(i);
				if(c == quote || c == '\n') {
					sb.append('\\');
				}
				sb.append(c);
			}
			return sb.toString();
		}
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CSSTokenizerFilter(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CSSTokenizerFilter(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 18: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched unicode: "+s);
          }
        case 31: break;
        case 8: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched close braces: "+s);
          }
        case 32: break;
        case 22: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched HTML comment: "+s);
          }
        case 33: break;
        case 16: 
          { String s = yytext();
	w.write(s); 
	if(debug) log("Matched ~=: "+s);
          }
        case 34: break;
        case 12: 
          { String s = yytext();
	if(debug) log("Matched string: "+s);
	if(paranoidStringCheck && s.indexOf(':') != -1) {
		w.write("/* Deleted disallowed string */");
		log("Deleted disallowed string: "+s);
	} else {
		w.write(s);
	}
          }
        case 35: break;
        case 25: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched @page: "+s);
          }
        case 36: break;
        case 13: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched number: "+s);
          }
        case 37: break;
        case 1: 
          { String s = yytext();
	char c = s.charAt(0);
	log("Matched anything: "+yytext()+" - ignoring");
	w.write("/* ignored unmatched char: "+c+" */"); // single char cannot break out of comment
          }
        case 38: break;
        case 6: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched semicolon: "+s);
          }
        case 39: break;
        case 20: 
          { String s = yytext();
	if(debug) log("Got hexcolor: "+s);
	w.write(s);
          }
        case 40: break;
        case 7: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched open braces: "+s);
          }
        case 41: break;
        case 26: 
          { String s = yytext();
	s = s.substring("@media".length()).trim();
	w.write("@media "+s+" ");
	if(debug) log("Matched @media: "+s);
          }
        case 42: break;
        case 2: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched ident: "+s);
          }
        case 43: break;
        case 24: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched unicode range: "+s);
          }
        case 44: break;
        case 28: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched @font-face: "+s);
          }
        case 45: break;
        case 19: 
          { String s = yytext();
	w.write(s); 
	if(debug) log("Matched HTML comment: "+s);
          }
        case 46: break;
        case 9: 
          { String s = yytext();
	if(s.startsWith("url")) throwError("Invalid contents of url()");
	w.write(s);
	if(debug) log("Matched function start: "+s);
          }
        case 47: break;
        case 3: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched whitespace: "+s);
          }
        case 48: break;
        case 27: 
          { String s = yytext();
	if(debug) log("Found @import: "+s);
	s = s.substring("@import".length());
	s = s.trim();
	DecodedStringThingy dst = new DecodedStringThingy(s);
	s = dst.data;
	if(debug) log("URL: "+s);
	s = processImportURL(s);
	dst.data = s;
	if(debug) log("Processed URL: "+s);
	if(dst.quote == ' ') dst.quote = '\"';
	if (!(s == null || s.equals(""))) {
		if(debug) log("URL now: "+s);
		s = "@import "+dst.toString();
		if(debug) log("Writing: "+s);
		w.write(s);
	} else
		if(debug) log("Dropped @import");
          }
        case 49: break;
        case 29: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched important: "+s);
          }
        case 50: break;
        case 21: 
          { String s = yytext();
	StringBuffer sb = new StringBuffer(s.length());
	sb.append("/* ");
	boolean inPrefix = true;
	for(int i=2;i<s.length()-2;i++) {
		char c = s.charAt(i);
		if(inPrefix && Character.isWhitespace(c)) {
			continue;
		}
		inPrefix = false;
		if(Character.isDigit(c) || Character.isWhitespace(c) ||
			Character.isLetter(c) || c == '.' || c == '_' || c == '-') {
			// No @, no !, etc; IE has been known to do things with comments
			// in CSS, and other browsers may too
			sb.append(c);
		}
	}
	while(Character.isWhitespace(sb.charAt(sb.length()-1)))
		sb.deleteCharAt(sb.length()-1);
	sb.append(" */");
	w.write(sb.toString());
	if(debug) log("Matched comment: "+s+" -> "+sb.toString());
          }
        case 51: break;
        case 15: 
          { if(!deleteErrors) {
		throwError("Unknown @identifier "+yytext());
	} else {
		String s = yytext();
		if(debug) log("Discarded identifier: "+s);
		// Ignore
	}
          }
        case 52: break;
        case 23: 
          { // This is horrible. However it seems that there is no other way to do it with either jflex or CUP, as {URL} cannot be an unambiguous token :(
	String s = yytext();
	if(debug) log("Recognized URL: "+s);
	
	DecodedStringThingy dst = new DecodedStringThingy(s);
	
	if(!dst.url) {
		throw new IllegalStateException("parsing url().. isn't a url()");
	}
	if(dst.suffix.length() > 0) {
		yypushback(dst.suffix.length());
		dst.suffix = "";
	}
	
	s = dst.data;
	if(debug) log("URL now: "+s);
	s = processURL(s);
	dst.data = s;
	if(s == null || s.equals("")) {
		if(debug) log("URL invalid");
		w.write("url()");
	} else {
		s = dst.toString();
		if(debug) log("Writing: "+s);
		w.write(s);
	}
          }
        case 53: break;
        case 11: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched measurement: "+s);
          }
        case 54: break;
        case 17: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched |=: "+s);
          }
        case 55: break;
        case 30: 
          { String s = yytext();
	detectedCharset = s;
	if(debug) log("Matched and ignoring charset: "+s);
	// Ignore
          }
        case 56: break;
        case 10: 
          { if(postBadImportFlag) {
		// Ignore
		postBadImportFlag = false;
		if(debug) log("Ignoring mediums list because after bad import: "+
			yytext());
	} else {
		String s = yytext();
		w.write(s);
		if(debug) log("Matched and passing on mediums list: "+s);
	}
          }
        case 57: break;
        case 4: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched single char: "+s);
          }
        case 58: break;
        case 14: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched #name: "+s);
          }
        case 59: break;
        case 5: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched function end: "+s);
          }
        case 60: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
