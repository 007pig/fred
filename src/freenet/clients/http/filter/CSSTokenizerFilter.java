/*
  CSSTokenizerFilter.java / Freenet
  Copyright (C) 2005-2006 The Free Network project
  
  The following code was generated by JFlex 1.3.5 on 03/09/06 00:24

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License as
  published by the Free Software Foundation; either version 2 of
  the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/

package freenet.clients.http.filter;
import java.io.*;
/* This class tokenizes a CSS2 Reader stream, writes it out to the output Writer, and filters any URLs found */
// WARNING: this is not as thorough as the HTML parser - new versions of the standard could lead to anonymity risks. See comments in SaferFilter.java
// Mostly from http://www.w3.org/TR/REC-CSS2/grammar.html


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 03/09/06 00:24 from the specification file
 * <tt>file:/usr/src/cvs/eclipse-workspace/Freenet 0.7/src/freenet/clients/http/filter/CSSTokenizerFilter.jflex</tt>
 */
class CSSTokenizerFilter {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\3\1\3\1\0\1\3\1\3\22\0\1\5\1\43\1\11"+
    "\1\25\1\4\1\63\1\4\1\12\1\23\1\14\1\41\1\56\1\26"+
    "\1\10\1\13\1\40\12\1\1\64\1\35\1\42\1\46\1\44\1\24"+
    "\1\31\1\50\1\6\1\54\1\52\1\51\1\53\1\22\1\60\1\20"+
    "\1\7\1\62\1\30\1\32\1\21\1\34\1\33\1\7\1\17\1\15"+
    "\1\16\1\27\1\7\1\55\1\57\1\7\1\61\1\4\1\2\4\4"+
    "\1\50\1\6\1\54\1\52\1\51\1\53\1\22\1\60\1\20\1\7"+
    "\1\62\1\30\1\32\1\21\1\34\1\33\1\7\1\17\1\15\1\16"+
    "\1\27\1\7\1\55\1\57\1\7\1\61\1\36\1\47\1\37\1\45"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    53,   106,   159,   212,   265,   318,   371,   424,   477, 
       53,   530,    53,   583,   636,    53,   689,   742,   795,   848, 
      901,   954,  1007,   159,  1060,   477,    53,  1113,    53,    53, 
     1166,  1219,   371,  1272,    53,   424,  1325,  1378,  1431,  1484, 
     1537,  1590,  1643,  1696,  1749,  1802,  1855,  1908,  1961,  2014, 
     2067,  2120,  2173,    53,    53,  2226,  2279,  2332,    53,   371, 
      424,  2385,  2438,  2491,  2544,  2597,  2650,  2703,  2756,  2809, 
     2862,  2915,  2968,  3021,  3074,  3127,  3180,  3233,    53,  3286, 
     3339,  3392,  3445,  3498,  3551,  3604,  3657,  3710,  3763,  3816, 
     3869,  3922,  3975,  4028,  4081,  4134,  4187,  4240,  1696,  4293, 
     4346,  4399,  4452,  4505,  4558,    53,    53,  4611,  4664,  4717, 
     4770,  4823,  4876,  4929,  4081,  4982,  5035,    53,  5088,  5141, 
     5194,  5247,  5300,  5353,  5406,  1696,  5459,  5512,  5565,  5618, 
     5671,  5724,  5777,  4876,  5830,  5883,  5936,  5989,  6042,  6095, 
       53,  6148,  6201,  6254,  6307,  6360,  1696,  6413,  6466,  6519, 
     6572,  6625,  1537,  6678,  6731,  4982,  5936,  6784,  6837,  6890, 
     5035,  6042,  6943,  5088,  6996,  7049,  7102,  7155,  7208,  7261, 
     7314,  7367,  7420,  7473,  5936,  7526,  6042,  7579,  7632,    53, 
     7685,  7738,  7791,  7844,  7897,  7950,  8003,  8056,  8109,  8109, 
     8162,  8215,  8268,  8321,  8374,  8427,  8480,  8533,  7844,  7844, 
     8586,  8639,  8692,  8745,  8798,  8745,  8109,  8851,  8904,  8957, 
     9010,  9063,  9116,    53,  9169,  9222,  9275,  9328,  9381,    53, 
     9434,  9487,  9540,  9593,  9646,  1696,  9699,  9752,  9805,  9858, 
     9858,  9911,  9964, 10017, 10070, 10123,  8003, 10176, 10229, 10282, 
    10335, 10388,  8745, 10441, 10494, 10547,  9275, 10600,    53, 10653, 
    10706, 10759, 10812, 10865, 10918, 10971, 11024, 11077, 11130, 11183, 
    11236, 11289, 11236, 11342, 11395, 11448,  9010, 11501, 11554, 11607, 
    11660, 11713, 11766, 11819, 11872, 11925, 11978, 12031, 12084, 12137, 
     9858,    53, 12190, 12243, 12296, 12349, 12402, 12455, 12508, 12561, 
    12614, 12667, 12720, 12773, 12826, 12879, 12932, 12985, 13038, 13091, 
    13144, 13197, 13250
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\2\1\3\1\4\1\5\1\2\1\5\2\6\1\7"+
    "\1\10\1\11\1\12\1\13\6\6\2\2\1\14\1\15"+
    "\1\16\1\6\1\17\3\6\1\20\1\21\1\22\1\23"+
    "\1\15\1\24\1\25\1\15\1\26\1\2\1\27\6\6"+
    "\1\15\4\6\1\2\1\15\66\0\1\3\1\30\1\31"+
    "\1\0\1\31\3\6\2\0\1\32\1\0\6\6\1\33"+
    "\2\0\1\34\2\6\1\0\3\6\1\35\12\0\6\6"+
    "\1\0\4\6\1\36\2\0\1\37\1\6\1\0\2\6"+
    "\1\37\41\6\5\37\10\6\3\0\1\5\1\0\1\5"+
    "\30\0\1\21\1\22\26\0\1\6\1\30\1\31\1\0"+
    "\1\31\3\6\4\0\6\6\1\33\2\0\1\34\2\6"+
    "\1\0\3\6\1\35\12\0\6\6\1\0\4\6\12\0"+
    "\1\40\54\0\2\41\1\42\6\41\1\43\53\41\2\44"+
    "\1\45\7\44\1\43\52\44\1\0\1\46\64\0\1\47"+
    "\1\50\3\0\1\47\2\51\4\0\6\51\4\0\2\51"+
    "\1\0\3\51\13\0\5\47\1\51\1\0\4\51\3\0"+
    "\1\6\1\30\1\31\1\0\1\31\3\6\4\0\2\6"+
    "\1\52\3\6\1\33\2\0\1\34\2\6\1\0\3\6"+
    "\1\35\12\0\6\6\1\53\4\6\3\0\1\54\1\55"+
    "\3\0\2\54\5\0\3\54\1\56\2\54\4\0\2\54"+
    "\1\0\1\57\1\60\1\54\13\0\3\54\1\61\1\62"+
    "\1\54\1\0\4\54\5\0\1\21\1\0\1\21\62\0"+
    "\1\22\1\0\1\22\120\0\1\63\66\0\1\64\57\0"+
    "\1\65\74\0\1\66\64\0\1\67\21\0\1\31\1\0"+
    "\1\31\20\0\1\34\6\0\1\35\30\0\1\70\1\71"+
    "\1\34\1\0\1\34\2\70\5\0\6\70\4\0\2\70"+
    "\1\0\3\70\13\0\6\70\1\0\4\70\3\0\1\72"+
    "\1\30\1\6\1\0\1\6\1\72\2\6\4\0\6\6"+
    "\1\33\2\0\1\34\2\6\1\0\3\6\1\35\12\0"+
    "\5\72\1\6\1\0\4\6\46\0\1\73\20\0\2\41"+
    "\1\42\6\41\1\74\53\41\2\44\1\45\7\44\1\75"+
    "\52\44\1\0\1\46\13\0\1\36\1\0\1\76\1\77"+
    "\1\0\1\100\7\0\1\101\1\102\15\0\1\103\1\104"+
    "\1\0\1\105\3\0\1\106\1\0\1\107\1\36\2\0"+
    "\1\110\1\50\3\0\1\110\2\51\4\0\6\51\4\0"+
    "\2\51\1\0\3\51\13\0\5\110\1\51\1\0\4\51"+
    "\3\0\1\111\1\51\1\0\2\51\1\111\41\51\5\111"+
    "\10\51\1\0\1\51\1\50\3\0\3\51\4\0\6\51"+
    "\4\0\2\51\1\0\3\51\13\0\6\51\1\0\4\51"+
    "\3\0\1\6\1\30\1\31\1\0\1\31\3\6\4\0"+
    "\6\6\1\33\2\0\1\34\1\6\1\112\1\0\3\6"+
    "\1\35\12\0\6\6\1\0\4\6\3\0\1\113\4\0"+
    "\1\113\15\0\1\114\23\0\5\113\10\0\1\115\1\54"+
    "\1\116\3\115\3\54\1\0\3\115\6\54\4\115\2\54"+
    "\1\115\3\54\1\117\1\115\1\117\10\115\6\54\1\115"+
    "\4\54\2\115\1\0\1\120\1\54\1\0\2\54\1\120"+
    "\41\54\5\120\10\54\1\115\1\54\1\116\3\115\3\54"+
    "\1\0\3\115\6\54\4\115\2\54\1\115\1\121\2\54"+
    "\1\117\1\115\1\117\10\115\6\54\1\115\4\54\3\115"+
    "\1\54\1\116\3\115\3\54\1\0\3\115\6\54\4\115"+
    "\2\54\1\115\3\54\1\117\1\115\1\117\10\115\1\54"+
    "\1\122\4\54\1\115\4\54\3\115\1\54\1\116\3\115"+
    "\3\54\1\0\3\115\6\54\4\115\2\54\1\115\3\54"+
    "\1\117\1\115\1\117\10\115\1\123\5\54\1\115\4\54"+
    "\3\115\1\54\1\116\3\115\3\54\1\0\3\115\6\54"+
    "\4\115\2\54\1\115\2\54\1\124\1\117\1\115\1\117"+
    "\10\115\6\54\1\115\4\54\3\115\1\54\1\116\3\115"+
    "\3\54\1\0\3\115\6\54\4\115\2\54\1\115\3\54"+
    "\1\117\1\115\1\117\10\115\6\54\1\115\1\54\1\125"+
    "\2\54\2\115\41\63\1\126\23\63\10\0\1\127\131\0"+
    "\1\130\10\0\1\70\1\71\1\31\1\0\1\31\3\70"+
    "\4\0\6\70\3\0\1\34\2\70\1\0\3\70\1\35"+
    "\12\0\6\70\1\0\4\70\3\0\1\131\1\70\1\0"+
    "\2\70\1\131\41\70\5\131\10\70\1\0\1\132\1\30"+
    "\1\6\1\0\1\6\1\132\2\6\4\0\6\6\1\33"+
    "\2\0\1\34\2\6\1\0\3\6\1\35\12\0\5\132"+
    "\1\6\1\0\4\6\52\0\1\133\35\0\1\36\62\0"+
    "\1\76\62\0\1\36\14\0\1\36\106\0\1\36\2\0"+
    "\1\36\37\0\1\36\24\0\1\36\56\0\1\134\45\0"+
    "\1\36\113\0\1\36\63\0\1\106\5\0\1\135\1\50"+
    "\3\0\1\135\2\51\4\0\6\51\4\0\2\51\1\0"+
    "\3\51\13\0\5\135\1\51\1\0\4\51\3\0\1\136"+
    "\1\50\1\51\1\0\1\51\1\136\2\51\4\0\6\51"+
    "\4\0\2\51\1\0\3\51\13\0\5\136\1\51\1\0"+
    "\4\51\3\0\1\6\1\30\1\31\1\0\1\31\3\6"+
    "\4\0\6\6\1\137\2\0\1\34\2\6\1\0\3\6"+
    "\1\35\12\0\6\6\1\0\4\6\3\0\1\140\4\0"+
    "\1\140\1\0\1\141\13\0\1\142\23\0\5\140\34\0"+
    "\1\142\40\0\11\115\1\0\23\115\1\117\1\115\1\117"+
    "\26\115\1\120\1\54\1\115\2\54\1\120\26\54\1\143"+
    "\1\54\1\143\10\54\5\120\10\54\1\115\1\144\1\116"+
    "\1\54\1\115\1\54\1\144\2\54\1\0\3\115\6\54"+
    "\4\115\2\54\1\115\3\54\1\117\1\115\1\117\10\115"+
    "\5\144\1\54\1\115\4\54\3\115\1\54\1\116\3\115"+
    "\3\54\1\0\3\115\6\54\4\115\2\54\1\115\1\54"+
    "\1\145\1\54\1\117\1\115\1\117\10\115\6\54\1\115"+
    "\4\54\3\115\1\54\1\116\3\115\3\54\1\0\3\115"+
    "\6\54\4\115\2\54\1\115\3\54\1\117\1\115\1\117"+
    "\10\115\2\54\1\146\3\54\1\115\4\54\3\115\1\54"+
    "\1\116\3\115\3\54\1\0\3\115\5\54\1\147\4\115"+
    "\2\54\1\115\3\54\1\117\1\115\1\117\10\115\6\54"+
    "\1\115\4\54\3\115\1\54\1\116\3\115\3\54\1\0"+
    "\3\115\4\54\1\150\1\54\4\115\2\54\1\115\3\54"+
    "\1\117\1\115\1\117\10\115\6\54\1\115\4\54\3\115"+
    "\1\54\1\116\3\115\3\54\1\0\3\115\6\54\4\115"+
    "\2\54\1\115\3\54\1\117\1\115\1\117\10\115\1\151"+
    "\5\54\1\115\4\54\2\115\40\63\1\152\1\126\23\63"+
    "\10\0\1\153\113\0\1\154\26\0\1\155\1\71\1\70"+
    "\1\0\1\70\1\155\2\70\4\0\6\70\3\0\1\34"+
    "\2\70\1\0\3\70\1\35\12\0\5\155\1\70\1\0"+
    "\4\70\3\0\1\156\1\30\1\6\1\0\1\6\1\156"+
    "\2\6\4\0\6\6\1\33\2\0\1\34\2\6\1\0"+
    "\3\6\1\35\12\0\5\156\1\6\1\0\4\6\54\0"+
    "\1\36\34\0\1\36\43\0\1\157\1\50\3\0\1\157"+
    "\2\51\4\0\6\51\4\0\2\51\1\0\3\51\13\0"+
    "\5\157\1\51\1\0\4\51\3\0\1\160\1\50\1\51"+
    "\1\0\1\51\1\160\2\51\4\0\6\51\4\0\2\51"+
    "\1\0\3\51\13\0\5\160\1\51\1\0\4\51\2\0"+
    "\2\161\1\162\1\163\1\161\1\163\3\161\1\164\1\165"+
    "\1\161\1\166\6\161\1\167\41\161\1\0\1\170\4\0"+
    "\1\170\1\0\1\141\13\0\1\171\23\0\5\170\11\0"+
    "\1\172\4\0\1\172\41\0\5\172\34\0\1\171\40\0"+
    "\1\115\1\173\1\116\1\54\1\115\1\54\1\173\2\54"+
    "\1\0\3\115\6\54\4\115\2\54\1\115\3\54\1\117"+
    "\1\115\1\117\10\115\5\173\1\54\1\115\4\54\3\115"+
    "\1\54\1\116\3\115\3\54\1\0\3\115\6\54\4\115"+
    "\2\54\1\115\2\54\1\174\1\117\1\115\1\117\10\115"+
    "\6\54\1\115\4\54\3\115\1\54\1\116\3\115\3\54"+
    "\1\0\3\115\3\54\1\175\2\54\4\115\2\54\1\115"+
    "\3\54\1\117\1\115\1\117\10\115\6\54\1\115\4\54"+
    "\3\115\1\54\1\116\3\115\3\54\1\0\3\115\6\54"+
    "\4\115\2\54\1\115\3\54\1\117\1\115\1\117\10\115"+
    "\1\54\1\176\4\54\1\115\4\54\3\115\1\54\1\116"+
    "\3\115\3\54\1\0\3\115\1\54\1\177\4\54\4\115"+
    "\2\54\1\115\3\54\1\117\1\115\1\117\10\115\6\54"+
    "\1\115\4\54\3\115\1\54\1\116\3\115\3\54\1\0"+
    "\3\115\2\54\1\200\3\54\4\115\2\54\1\115\3\54"+
    "\1\117\1\115\1\117\10\115\6\54\1\115\4\54\2\115"+
    "\20\0\1\201\45\0\1\202\1\71\1\70\1\0\1\70"+
    "\1\202\2\70\4\0\6\70\3\0\1\34\2\70\1\0"+
    "\3\70\1\35\12\0\5\202\1\70\1\0\4\70\3\0"+
    "\1\203\1\30\1\6\1\0\1\6\1\203\2\6\4\0"+
    "\6\6\1\33\2\0\1\34\2\6\1\0\3\6\1\35"+
    "\12\0\5\203\1\6\1\0\4\6\3\0\1\204\1\50"+
    "\3\0\1\204\2\51\4\0\6\51\4\0\2\51\1\0"+
    "\3\51\13\0\5\204\1\51\1\0\4\51\3\0\1\205"+
    "\1\50\1\51\1\0\1\51\1\205\2\51\4\0\6\51"+
    "\4\0\2\51\1\0\3\51\13\0\5\205\1\51\1\0"+
    "\4\51\2\0\2\161\1\162\6\161\2\167\1\161\1\166"+
    "\6\161\1\167\43\161\1\162\11\161\1\206\50\161\2\164"+
    "\1\207\6\164\1\210\2\164\1\211\50\164\2\165\1\212"+
    "\7\165\1\210\1\165\1\213\50\165\2\167\1\214\11\167"+
    "\1\215\50\167\1\0\1\216\4\0\1\216\1\0\1\141"+
    "\13\0\1\217\23\0\5\216\34\0\1\217\41\0\1\220"+
    "\4\0\1\220\41\0\5\220\10\0\1\115\1\221\1\116"+
    "\1\54\1\115\1\54\1\221\2\54\1\0\3\115\6\54"+
    "\4\115\2\54\1\115\3\54\1\117\1\115\1\117\10\115"+
    "\5\221\1\54\1\115\4\54\3\115\1\54\1\116\3\115"+
    "\3\54\1\0\3\115\2\54\1\222\3\54\4\115\2\54"+
    "\1\115\3\54\1\117\1\115\1\117\10\115\6\54\1\115"+
    "\4\54\3\115\1\54\1\116\3\115\3\54\1\0\3\115"+
    "\6\54\4\115\2\54\1\115\3\54\1\117\1\115\1\117"+
    "\10\115\1\223\5\54\1\115\4\54\3\115\1\54\1\116"+
    "\3\115\2\54\1\224\1\0\3\115\6\54\4\115\2\54"+
    "\1\115\3\54\1\117\1\115\1\117\10\115\6\54\1\115"+
    "\4\54\3\115\1\54\1\116\3\115\3\54\1\0\3\115"+
    "\1\225\5\54\4\115\2\54\1\115\3\54\1\117\1\115"+
    "\1\117\10\115\6\54\1\115\4\54\2\115\32\0\1\226"+
    "\33\0\1\227\1\71\1\70\1\0\1\70\1\227\2\70"+
    "\4\0\6\70\3\0\1\34\2\70\1\0\3\70\1\35"+
    "\12\0\5\227\1\70\1\0\4\70\3\0\1\230\1\30"+
    "\1\6\1\0\1\6\1\230\2\6\4\0\6\6\1\33"+
    "\2\0\1\34\2\6\1\0\3\6\1\35\12\0\5\230"+
    "\1\6\1\0\4\6\3\0\1\231\1\50\3\0\1\231"+
    "\2\51\4\0\6\51\4\0\2\51\1\0\3\51\13\0"+
    "\5\231\1\51\1\0\4\51\3\0\1\232\1\50\1\51"+
    "\1\0\1\51\1\232\2\51\4\0\6\51\4\0\2\51"+
    "\1\0\3\51\13\0\5\232\1\51\1\0\4\51\2\0"+
    "\2\164\1\207\6\164\1\233\2\164\1\234\50\164\2\167"+
    "\1\214\1\210\1\167\1\210\6\167\1\166\50\167\2\235"+
    "\1\236\6\235\1\237\53\235\2\165\1\212\7\165\1\240"+
    "\1\165\1\241\50\165\2\242\1\243\7\242\1\237\52\242"+
    "\2\167\1\214\11\167\1\244\50\167\1\0\1\245\4\0"+
    "\1\245\1\0\1\141\13\0\1\246\23\0\5\245\34\0"+
    "\1\246\41\0\1\247\4\0\1\247\41\0\5\247\10\0"+
    "\1\115\1\250\1\116\1\54\1\115\1\54\1\250\2\54"+
    "\1\0\3\115\6\54\4\115\2\54\1\115\3\54\1\117"+
    "\1\115\1\117\10\115\5\250\1\54\1\115\4\54\3\115"+
    "\1\54\1\116\3\115\3\54\1\0\3\115\1\54\1\251"+
    "\4\54\4\115\2\54\1\115\3\54\1\117\1\115\1\117"+
    "\10\115\6\54\1\115\4\54\3\115\1\54\1\116\3\115"+
    "\3\54\1\0\3\115\6\54\4\115\2\54\1\115\3\54"+
    "\1\117\1\115\1\117\10\115\3\54\1\252\2\54\1\115"+
    "\4\54\3\115\1\54\1\116\3\115\3\54\1\0\3\115"+
    "\6\54\4\115\2\54\1\115\3\54\1\117\1\115\1\117"+
    "\10\115\1\54\1\253\4\54\1\115\4\54\2\115\33\0"+
    "\1\254\32\0\1\255\1\71\1\70\1\0\1\70\1\255"+
    "\2\70\4\0\6\70\3\0\1\34\2\70\1\0\3\70"+
    "\1\35\12\0\5\255\1\70\1\0\4\70\3\0\1\6"+
    "\1\30\1\6\1\0\4\6\4\0\6\6\1\33\2\0"+
    "\1\34\2\6\1\0\3\6\1\35\12\0\6\6\1\0"+
    "\4\6\3\0\1\256\1\50\1\51\1\0\1\51\1\256"+
    "\2\51\4\0\6\51\4\0\2\51\1\0\3\51\13\0"+
    "\5\256\1\51\1\0\4\51\2\0\2\164\1\207\1\233"+
    "\1\164\1\233\3\164\1\210\2\164\1\257\50\164\2\235"+
    "\1\236\6\235\1\260\53\235\3\0\1\237\1\0\1\237"+
    "\6\0\1\166\50\0\2\165\1\212\1\240\1\165\1\240"+
    "\4\165\1\210\1\165\1\261\50\165\2\242\1\243\7\242"+
    "\1\262\52\242\1\0\1\263\4\0\1\263\1\0\1\141"+
    "\13\0\1\264\23\0\5\263\34\0\1\264\41\0\1\265"+
    "\4\0\1\265\41\0\5\265\10\0\1\115\1\266\1\116"+
    "\1\54\1\115\1\54\1\266\2\54\1\0\3\115\6\54"+
    "\4\115\2\54\1\115\3\54\1\117\1\115\1\117\10\115"+
    "\5\266\1\54\1\115\4\54\2\115\1\267\1\270\1\271"+
    "\1\272\1\267\1\272\3\270\1\273\1\274\1\267\1\115"+
    "\6\270\1\115\3\267\2\270\1\267\3\270\1\275\1\267"+
    "\1\276\10\267\6\270\1\267\4\270\2\267\1\115\1\54"+
    "\1\116\3\115\3\54\1\0\3\115\6\54\4\115\2\54"+
    "\1\115\3\54\1\117\1\115\1\117\10\115\1\277\5\54"+
    "\1\115\4\54\3\115\1\54\1\116\3\115\3\54\1\0"+
    "\3\115\1\54\1\300\4\54\4\115\2\54\1\115\3\54"+
    "\1\117\1\115\1\117\10\115\6\54\1\115\4\54\2\115"+
    "\34\0\1\301\31\0\1\302\1\71\1\70\1\0\1\70"+
    "\1\302\2\70\4\0\6\70\3\0\1\34\2\70\1\0"+
    "\3\70\1\35\12\0\5\302\1\70\1\0\4\70\3\0"+
    "\1\51\1\50\1\51\1\0\4\51\4\0\6\51\4\0"+
    "\2\51\1\0\3\51\13\0\6\51\1\0\4\51\2\0"+
    "\2\235\1\236\1\260\1\235\1\260\3\235\1\237\2\235"+
    "\1\257\50\235\2\242\1\243\1\262\1\242\1\262\4\242"+
    "\1\237\1\242\1\261\50\242\10\0\1\141\55\0\1\303"+
    "\4\0\1\303\41\0\5\303\10\0\1\115\1\54\1\116"+
    "\1\54\1\115\4\54\1\0\3\115\6\54\4\115\2\54"+
    "\1\115\3\54\1\117\1\115\1\117\10\115\6\54\1\115"+
    "\4\54\2\115\2\267\1\304\6\267\1\0\1\115\1\267"+
    "\1\115\6\267\1\115\11\267\1\275\1\267\1\276\26\267"+
    "\1\270\1\271\3\267\3\270\1\0\1\115\1\267\1\115"+
    "\6\270\1\115\3\267\2\270\1\267\3\270\1\275\1\267"+
    "\1\276\10\267\6\270\1\267\4\270\3\267\1\305\1\306"+
    "\1\267\2\270\1\305\26\270\1\307\1\270\1\310\10\270"+
    "\5\305\10\270\2\267\1\304\1\272\1\267\1\272\3\267"+
    "\1\273\1\274\1\267\1\115\6\267\1\115\11\267\1\275"+
    "\1\267\1\276\25\267\2\273\1\311\6\273\1\312\53\273"+
    "\2\274\1\313\6\274\1\314\1\315\22\274\1\316\1\274"+
    "\1\316\25\274\2\317\1\320\6\317\2\0\1\317\1\0"+
    "\6\317\1\0\11\317\1\275\27\317\1\115\1\54\1\116"+
    "\3\115\3\54\1\0\3\115\6\54\4\115\2\54\1\115"+
    "\3\54\1\117\1\115\1\117\10\115\4\54\1\321\1\54"+
    "\1\115\4\54\3\115\1\54\1\116\1\322\1\115\1\322"+
    "\3\54\1\323\1\324\2\115\6\54\4\115\2\54\1\115"+
    "\3\54\1\117\1\115\1\117\10\115\6\54\1\115\4\54"+
    "\2\115\17\0\1\325\46\0\1\70\1\71\1\70\1\0"+
    "\4\70\4\0\6\70\3\0\1\34\2\70\1\0\3\70"+
    "\1\35\12\0\6\70\1\0\4\70\3\0\1\326\4\0"+
    "\1\326\41\0\5\326\10\0\2\267\1\304\6\267\1\317"+
    "\23\267\1\275\1\267\1\276\26\267\1\327\1\271\1\270"+
    "\1\267\1\270\1\327\2\270\1\0\1\115\1\267\1\115"+
    "\6\270\1\115\3\267\2\270\1\267\3\270\1\275\1\267"+
    "\1\276\10\267\5\327\1\270\1\267\4\270\3\267\1\270"+
    "\1\271\3\267\3\270\1\317\3\267\6\270\4\267\2\270"+
    "\1\267\3\270\1\275\1\267\1\276\10\267\6\270\1\267"+
    "\4\270\2\267\2\273\1\311\6\273\1\330\53\273\1\0"+
    "\1\331\1\332\1\333\1\0\1\333\2\331\5\0\6\331"+
    "\4\0\2\331\1\0\3\331\1\334\12\0\6\331\1\0"+
    "\4\331\2\0\2\274\1\313\6\274\1\314\1\335\22\274"+
    "\1\316\1\274\1\316\25\274\2\314\1\336\7\314\1\312"+
    "\52\314\1\115\1\337\1\340\1\341\1\115\1\341\2\337"+
    "\1\115\1\0\3\115\6\337\4\115\2\337\1\115\3\337"+
    "\1\334\1\115\1\117\10\115\6\337\1\115\4\337\2\115"+
    "\2\317\1\320\32\317\1\275\27\317\1\115\1\54\1\116"+
    "\3\115\3\54\1\0\3\115\6\54\4\115\2\54\1\115"+
    "\3\54\1\117\1\115\1\117\10\115\1\54\1\342\4\54"+
    "\1\115\4\54\5\115\1\322\1\115\1\322\3\115\1\323"+
    "\1\324\22\115\1\117\1\115\1\117\25\115\2\323\1\343"+
    "\6\323\1\344\53\323\2\324\1\345\6\324\1\346\1\115"+
    "\22\324\1\347\1\324\1\347\25\324\16\0\1\350\46\0"+
    "\1\267\1\351\1\271\1\270\1\267\1\270\1\351\2\270"+
    "\1\0\1\115\1\267\1\115\6\270\1\115\3\267\2\270"+
    "\1\267\3\270\1\275\1\267\1\276\10\267\5\351\1\270"+
    "\1\267\4\270\2\267\1\273\1\352\1\353\1\354\1\273"+
    "\1\354\2\352\1\273\1\312\3\273\6\352\4\273\2\352"+
    "\1\273\3\352\1\355\12\273\6\352\1\273\4\352\2\273"+
    "\1\0\1\331\1\332\1\356\1\0\1\356\3\331\4\0"+
    "\6\331\3\0\1\333\2\331\1\0\3\331\1\334\12\0"+
    "\6\331\1\0\4\331\3\0\1\357\1\331\1\0\2\331"+
    "\1\357\41\331\5\357\10\331\1\0\1\331\1\332\1\333"+
    "\1\0\1\333\2\331\5\0\6\331\4\0\2\331\1\0"+
    "\3\331\13\0\6\331\1\0\4\331\2\0\1\274\1\360"+
    "\1\361\1\362\1\274\1\362\2\360\1\274\1\314\1\315"+
    "\2\274\6\360\4\274\2\360\1\274\3\360\1\363\1\274"+
    "\1\316\10\274\6\360\1\274\4\360\2\274\2\314\1\336"+
    "\7\314\1\364\52\314\1\115\1\337\1\340\1\365\1\115"+
    "\1\365\3\337\1\0\3\115\6\337\3\115\1\341\2\337"+
    "\1\115\3\337\1\334\1\115\1\117\10\115\6\337\1\115"+
    "\4\337\3\115\1\366\1\337\1\115\2\337\1\366\2\337"+
    "\1\331\23\337\1\367\1\337\1\367\10\337\5\366\10\337"+
    "\1\115\1\337\1\340\1\341\1\115\1\341\2\337\1\115"+
    "\1\0\3\115\6\337\4\115\2\337\1\115\3\337\1\117"+
    "\1\115\1\117\10\115\6\337\1\115\4\337\2\115\2\323"+
    "\1\343\6\323\1\370\53\323\3\0\1\344\1\0\1\344"+
    "\27\0\1\371\27\0\2\324\1\345\6\324\1\346\23\324"+
    "\1\347\1\324\1\347\25\324\2\346\1\372\7\346\1\344"+
    "\52\346\50\0\1\373\14\0\1\267\1\374\1\271\1\270"+
    "\1\267\1\270\1\374\2\270\1\0\1\115\1\267\1\115"+
    "\6\270\1\115\3\267\2\270\1\267\3\270\1\275\1\267"+
    "\1\276\10\267\5\374\1\270\1\267\4\270\2\267\1\273"+
    "\1\352\1\353\1\375\1\273\1\375\3\352\1\312\3\273"+
    "\6\352\3\273\1\354\2\352\1\273\3\352\1\355\12\273"+
    "\6\352\1\273\4\352\3\273\1\376\1\377\1\273\2\352"+
    "\1\376\2\352\1\u0100\36\352\5\376\10\352\1\273\1\352"+
    "\1\353\1\354\1\273\1\354\2\352\1\273\1\312\3\273"+
    "\6\352\4\273\2\352\1\273\3\352\13\273\6\352\1\273"+
    "\4\352\2\273\3\0\1\356\1\0\1\356\20\0\1\333"+
    "\6\0\1\334\30\0\1\u0101\1\332\1\331\1\0\1\331"+
    "\1\u0101\2\331\4\0\6\331\3\0\1\333\2\331\1\0"+
    "\3\331\1\334\12\0\5\u0101\1\331\1\0\4\331\2\0"+
    "\1\274\1\360\1\361\1\u0102\1\274\1\u0102\3\360\1\314"+
    "\1\315\2\274\6\360\3\274\1\362\2\360\1\274\3\360"+
    "\1\363\1\274\1\316\10\274\6\360\1\274\4\360\3\274"+
    "\1\u0103\1\u0104\1\274\2\360\1\u0103\2\360\1\u0105\1\u0106"+
    "\22\360\1\u0107\1\360\1\u0107\10\360\5\u0103\10\360\1\274"+
    "\1\360\1\361\1\362\1\274\1\362\2\360\1\274\1\314"+
    "\1\315\2\274\6\360\4\274\2\360\1\274\3\360\1\316"+
    "\1\274\1\316\10\274\6\360\1\274\4\360\2\274\1\314"+
    "\1\u0105\1\u0108\1\u0109\1\314\1\u0109\2\u0105\2\314\1\312"+
    "\2\314\6\u0105\4\314\2\u0105\1\314\3\u0105\1\363\12\314"+
    "\6\u0105\1\314\4\u0105\2\314\3\115\1\365\1\115\1\365"+
    "\3\115\1\0\14\115\1\341\6\115\1\334\1\115\1\117"+
    "\26\115\1\u010a\1\340\1\337\1\115\1\337\1\u010a\2\337"+
    "\1\0\3\115\6\337\3\115\1\341\2\337\1\115\3\337"+
    "\1\334\1\115\1\117\10\115\5\u010a\1\337\1\115\4\337"+
    "\2\115\2\323\1\343\1\370\1\323\1\370\3\323\1\344"+
    "\23\323\1\u010b\27\323\2\346\1\372\7\346\1\u010c\52\346"+
    "\21\0\1\u010d\43\0\1\267\1\u010e\1\271\1\270\1\267"+
    "\1\270\1\u010e\2\270\1\0\1\115\1\267\1\115\6\270"+
    "\1\115\3\267\2\270\1\267\3\270\1\275\1\267\1\276"+
    "\10\267\5\u010e\1\270\1\267\4\270\2\267\2\273\1\311"+
    "\1\375\1\273\1\375\3\273\1\312\14\273\1\354\6\273"+
    "\1\355\30\273\1\u010f\1\353\1\352\1\273\1\352\1\u010f"+
    "\2\352\1\312\3\273\6\352\3\273\1\354\2\352\1\273"+
    "\3\352\1\355\12\273\5\u010f\1\352\1\273\4\352\3\273"+
    "\1\352\1\353\1\375\1\273\1\375\3\352\1\330\3\273"+
    "\6\352\3\273\1\354\2\352\1\273\3\352\1\355\12\273"+
    "\6\352\1\273\4\352\3\273\1\352\1\353\1\u0110\1\273"+
    "\1\u0110\3\352\1\312\3\273\6\352\3\273\1\354\2\352"+
    "\1\273\3\352\1\355\12\273\6\352\1\273\4\352\2\273"+
    "\1\0\1\u0111\1\332\1\331\1\0\1\331\1\u0111\2\331"+
    "\4\0\6\331\3\0\1\333\2\331\1\0\3\331\1\334"+
    "\12\0\5\u0111\1\331\1\0\4\331\2\0\2\274\1\313"+
    "\1\u0102\1\274\1\u0102\3\274\1\314\1\315\13\274\1\362"+
    "\6\274\1\363\1\274\1\316\26\274\1\u0112\1\361\1\360"+
    "\1\274\1\360\1\u0112\2\360\1\314\1\315\2\274\6\360"+
    "\3\274\1\362\2\360\1\274\3\360\1\363\1\274\1\316"+
    "\10\274\5\u0112\1\360\1\274\4\360\3\274\1\360\1\361"+
    "\1\u0102\1\274\1\u0102\3\360\1\314\1\335\2\274\6\360"+
    "\3\274\1\362\2\360\1\274\3\360\1\363\1\274\1\316"+
    "\10\274\6\360\1\274\4\360\2\274\1\314\1\u0105\1\u0108"+
    "\1\u0113\1\314\1\u0113\3\u0105\1\314\1\312\2\314\6\u0105"+
    "\3\314\1\u0109\2\u0105\1\314\3\u0105\1\363\12\314\6\u0105"+
    "\1\314\4\u0105\2\314\1\274\1\360\1\361\1\u0114\1\274"+
    "\1\u0114\3\360\1\314\1\315\2\274\6\360\3\274\1\362"+
    "\2\360\1\274\3\360\1\363\1\274\1\316\10\274\6\360"+
    "\1\274\4\360\2\274\1\314\1\u0115\1\u0116\1\314\2\u0105"+
    "\1\u0115\3\u0105\1\u0117\35\u0105\5\u0115\10\u0105\1\314\1\u0105"+
    "\1\u0108\1\u0109\1\314\1\u0109\2\u0105\2\314\1\312\2\314"+
    "\6\u0105\4\314\2\u0105\1\314\3\u0105\13\314\6\u0105\1\314"+
    "\4\u0105\2\314\1\115\1\u0118\1\340\1\337\1\115\1\337"+
    "\1\u0118\2\337\1\0\3\115\6\337\3\115\1\341\2\337"+
    "\1\115\3\337\1\334\1\115\1\117\10\115\5\u0118\1\337"+
    "\1\115\4\337\2\115\2\346\1\372\1\u010c\1\346\1\u010c"+
    "\4\346\1\344\22\346\1\u0119\27\346\16\0\1\u011a\46\0"+
    "\1\267\1\u011b\1\271\1\270\1\267\1\270\1\u011b\2\270"+
    "\1\0\1\115\1\267\1\115\6\270\1\115\3\267\2\270"+
    "\1\267\3\270\1\275\1\267\1\276\10\267\5\u011b\1\270"+
    "\1\267\4\270\2\267\1\273\1\u011c\1\353\1\352\1\273"+
    "\1\352\1\u011c\2\352\1\312\3\273\6\352\3\273\1\354"+
    "\2\352\1\273\3\352\1\355\12\273\5\u011c\1\352\1\273"+
    "\4\352\3\273\1\352\1\353\1\u0110\1\273\1\u0110\2\352"+
    "\1\273\1\312\3\273\6\352\3\273\1\354\2\352\1\273"+
    "\3\352\1\355\12\273\6\352\1\273\4\352\2\273\1\0"+
    "\1\u011d\1\332\1\331\1\0\1\331\1\u011d\2\331\4\0"+
    "\6\331\3\0\1\333\2\331\1\0\3\331\1\334\12\0"+
    "\5\u011d\1\331\1\0\4\331\2\0\1\274\1\u011e\1\361"+
    "\1\360\1\274\1\360\1\u011e\2\360\1\314\1\315\2\274"+
    "\6\360\3\274\1\362\2\360\1\274\3\360\1\363\1\274"+
    "\1\316\10\274\5\u011e\1\360\1\274\4\360\2\274\2\314"+
    "\1\336\1\u0113\1\314\1\u0113\4\314\1\312\13\314\1\u0109"+
    "\6\314\1\363\27\314\1\274\1\360\1\361\1\u0114\1\274"+
    "\1\u0114\2\360\1\274\1\314\1\315\2\274\6\360\3\274"+
    "\1\362\2\360\1\274\3\360\1\363\1\274\1\316\10\274"+
    "\6\360\1\274\4\360\2\274\1\314\1\u011f\1\u0108\1\u0105"+
    "\1\314\1\u0105\1\u011f\2\u0105\1\314\1\312\2\314\6\u0105"+
    "\3\314\1\u0109\2\u0105\1\314\3\u0105\1\363\12\314\5\u011f"+
    "\1\u0105\1\314\4\u0105\3\314\1\u0105\1\u0108\1\u0113\1\314"+
    "\1\u0113\3\u0105\1\314\1\364\2\314\6\u0105\3\314\1\u0109"+
    "\2\u0105\1\314\3\u0105\1\363\12\314\6\u0105\1\314\4\u0105"+
    "\3\314\1\u0105\1\u0108\1\u0120\1\314\1\u0120\3\u0105\1\314"+
    "\1\312\2\314\6\u0105\3\314\1\u0109\2\u0105\1\314\3\u0105"+
    "\1\363\12\314\6\u0105\1\314\4\u0105\2\314\1\115\1\u0121"+
    "\1\340\1\337\1\115\1\337\1\u0121\2\337\1\0\3\115"+
    "\6\337\3\115\1\341\2\337\1\115\3\337\1\334\1\115"+
    "\1\117\10\115\5\u0121\1\337\1\115\4\337\2\115\1\267"+
    "\1\270\1\271\1\270\1\267\4\270\1\0\1\115\1\267"+
    "\1\115\6\270\1\115\3\267\2\270\1\267\3\270\1\275"+
    "\1\267\1\276\10\267\6\270\1\267\4\270\2\267\1\273"+
    "\1\u0122\1\353\1\352\1\273\1\352\1\u0122\2\352\1\312"+
    "\3\273\6\352\3\273\1\354\2\352\1\273\3\352\1\355"+
    "\12\273\5\u0122\1\352\1\273\4\352\2\273\1\0\1\u0123"+
    "\1\332\1\331\1\0\1\331\1\u0123\2\331\4\0\6\331"+
    "\3\0\1\333\2\331\1\0\3\331\1\334\12\0\5\u0123"+
    "\1\331\1\0\4\331\2\0\1\274\1\u0124\1\361\1\360"+
    "\1\274\1\360\1\u0124\2\360\1\314\1\315\2\274\6\360"+
    "\3\274\1\362\2\360\1\274\3\360\1\363\1\274\1\316"+
    "\10\274\5\u0124\1\360\1\274\4\360\2\274\1\314\1\u0125"+
    "\1\u0108\1\u0105\1\314\1\u0105\1\u0125\2\u0105\1\314\1\312"+
    "\2\314\6\u0105\3\314\1\u0109\2\u0105\1\314\3\u0105\1\363"+
    "\12\314\5\u0125\1\u0105\1\314\4\u0105\3\314\1\u0105\1\u0108"+
    "\1\u0120\1\314\1\u0120\2\u0105\2\314\1\312\2\314\6\u0105"+
    "\3\314\1\u0109\2\u0105\1\314\3\u0105\1\363\12\314\6\u0105"+
    "\1\314\4\u0105\2\314\1\115\1\u0126\1\340\1\337\1\115"+
    "\1\337\1\u0126\2\337\1\0\3\115\6\337\3\115\1\341"+
    "\2\337\1\115\3\337\1\334\1\115\1\117\10\115\5\u0126"+
    "\1\337\1\115\4\337\2\115\1\273\1\u0127\1\353\1\352"+
    "\1\273\1\352\1\u0127\2\352\1\312\3\273\6\352\3\273"+
    "\1\354\2\352\1\273\3\352\1\355\12\273\5\u0127\1\352"+
    "\1\273\4\352\2\273\1\0\1\u0128\1\332\1\331\1\0"+
    "\1\331\1\u0128\2\331\4\0\6\331\3\0\1\333\2\331"+
    "\1\0\3\331\1\334\12\0\5\u0128\1\331\1\0\4\331"+
    "\2\0\1\274\1\u0129\1\361\1\360\1\274\1\360\1\u0129"+
    "\2\360\1\314\1\315\2\274\6\360\3\274\1\362\2\360"+
    "\1\274\3\360\1\363\1\274\1\316\10\274\5\u0129\1\360"+
    "\1\274\4\360\2\274\1\314\1\u012a\1\u0108\1\u0105\1\314"+
    "\1\u0105\1\u012a\2\u0105\1\314\1\312\2\314\6\u0105\3\314"+
    "\1\u0109\2\u0105\1\314\3\u0105\1\363\12\314\5\u012a\1\u0105"+
    "\1\314\4\u0105\2\314\1\115\1\u012b\1\340\1\337\1\115"+
    "\1\337\1\u012b\2\337\1\0\3\115\6\337\3\115\1\341"+
    "\2\337\1\115\3\337\1\334\1\115\1\117\10\115\5\u012b"+
    "\1\337\1\115\4\337\2\115\1\273\1\u012c\1\353\1\352"+
    "\1\273\1\352\1\u012c\2\352\1\312\3\273\6\352\3\273"+
    "\1\354\2\352\1\273\3\352\1\355\12\273\5\u012c\1\352"+
    "\1\273\4\352\2\273\1\0\1\331\1\332\1\331\1\0"+
    "\4\331\4\0\6\331\3\0\1\333\2\331\1\0\3\331"+
    "\1\334\12\0\6\331\1\0\4\331\2\0\1\274\1\u012d"+
    "\1\361\1\360\1\274\1\360\1\u012d\2\360\1\314\1\315"+
    "\2\274\6\360\3\274\1\362\2\360\1\274\3\360\1\363"+
    "\1\274\1\316\10\274\5\u012d\1\360\1\274\4\360\2\274"+
    "\1\314\1\u012e\1\u0108\1\u0105\1\314\1\u0105\1\u012e\2\u0105"+
    "\1\314\1\312\2\314\6\u0105\3\314\1\u0109\2\u0105\1\314"+
    "\3\u0105\1\363\12\314\5\u012e\1\u0105\1\314\4\u0105\2\314"+
    "\1\115\1\337\1\340\1\337\1\115\4\337\1\0\3\115"+
    "\6\337\3\115\1\341\2\337\1\115\3\337\1\334\1\115"+
    "\1\117\10\115\6\337\1\115\4\337\2\115\1\273\1\352"+
    "\1\353\1\352\1\273\4\352\1\312\3\273\6\352\3\273"+
    "\1\354\2\352\1\273\3\352\1\355\12\273\6\352\1\273"+
    "\4\352\2\273\1\274\1\360\1\361\1\360\1\274\4\360"+
    "\1\314\1\315\2\274\6\360\3\274\1\362\2\360\1\274"+
    "\3\360\1\363\1\274\1\316\10\274\6\360\1\274\4\360"+
    "\2\274\1\314\1\u012f\1\u0108\1\u0105\1\314\1\u0105\1\u012f"+
    "\2\u0105\1\314\1\312\2\314\6\u0105\3\314\1\u0109\2\u0105"+
    "\1\314\3\u0105\1\363\12\314\5\u012f\1\u0105\1\314\4\u0105"+
    "\3\314\1\u0105\1\u0108\1\u0105\1\314\4\u0105\1\314\1\312"+
    "\2\314\6\u0105\3\314\1\u0109\2\u0105\1\314\3\u0105\1\363"+
    "\12\314\6\u0105\1\314\4\u0105\2\314";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  9,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  9,  1,  1,  9, 
     1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  9,  0,  9,  9,  1,  0, 
     0,  0,  9,  0,  0,  1,  1,  0,  1,  1,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  9,  9,  0,  0,  1,  9,  1,  1,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  0,  0,  9,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  1,  1,  1,  1, 
     0,  1,  1,  0,  0,  0,  0,  0,  0,  9,  9,  0,  0,  1,  1,  1, 
     0,  0,  0,  0,  0,  9,  0,  1,  1,  1,  0,  0,  0,  1,  0,  0, 
     0,  0,  1,  1,  1,  1,  0,  0,  1,  0,  1,  0,  9,  1,  1,  1, 
     0,  0,  1,  0,  0,  0,  0,  1,  1,  1,  0,  1,  0,  0,  0,  0, 
     1,  0,  0,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  1,  1,  0, 
     1,  0,  1,  9,  1,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0, 
     0,  0,  1,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  1,  0,  0, 
     0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0, 
     0,  1,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  1,  0,  0,  0, 
     0,  0,  1,  0,  0,  0,  1,  0,  9,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  1,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  1,  9,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
	// Put stuff to include in the class here
	String detectedCharset;

	// External flag
	boolean paranoidStringCheck = false;
	boolean deleteErrors = true;
	boolean debug = true;
	
	// Internal flags
	boolean postBadImportFlag = false; // both URLs and @import's
	boolean importFlag = false;
	boolean urlFlag = false;

	// Writer
	Writer w = null; // Will NPE if not initialized properly

	public void parse () throws IOException {
		while (yylex() != null);
	}
	
	CSSTokenizerFilter(Reader r, Writer w, boolean paranoidStringCheck) {
		this(r);
		this.w = w;
		this.paranoidStringCheck = paranoidStringCheck;
	}

	void throwError(String s) throws IOException {
		throw new IllegalStateException("You MUST override throwError!");
	}

	String processImportURL(String s) {
		throw new IllegalStateException("You MUST override processImportURL!");
	}

	String processURL(String s) {
		throw new IllegalStateException("You MUST override processURL!");
	}
	
	void log(String s) {
		System.err.println("CSSTokenizerFilter: "+s);
	}

	void logError(String s) {
		System.err.println("CSSTokenizerFilter ERROR: "+s);
	}
	
	static String unquote(String s, char c) {
		if(s.length() > 1) {
			if(s.charAt(s.length()-1) == c) {
				s = s.substring(1, s.length()-1);
				return s;
			} else return "";
		} else return "";
	}
	
	// This is not very efficient. The parser below knows the quoting rules too.
	
	static boolean isHexDigit(char c) {
		return ('a' <= c && c <= 'f' ||
		  	'A' <= c && c <= 'F' ||
			'0' <= c && c <= '9');
	}
	
	class DecodedStringThingy {
		char quote; // " " means not quoted
		boolean url; // in a url() ?
		String data;
		public String suffix; // includes any whitespace
		public DecodedStringThingy(String s) {
			if(s.startsWith("url(")) {
				s = s.substring("url(".length());
				url = true;
			}
			char q = s.charAt(0);
			if(q == '\'' || q == '\"') {
				quote = q;
				s = s.substring(1);
			} else quote = ' ';
			StringBuffer buffer = new StringBuffer();
			int x = 0;
			boolean justEscaping = false;
			boolean stillEscaping = false;
			StringBuffer hexEscape = new StringBuffer();
			while(x < s.length()-1) {
				char c = s.charAt(x);
				x++;
				if(justEscaping) {
					if(c == '\n') {
						buffer.append(c);
						justEscaping = false;
					} else if(isHexDigit(c)) {
						hexEscape.append(c);
						justEscaping = false;
						stillEscaping = true;
					} else {
						buffer.append(c);
						// Will need to be reencoded if quote or \n
						justEscaping = false;
					}
				} else if(stillEscaping) {
					if(isHexDigit(c) && hexEscape.length() < 6) {
						hexEscape.append(c);
					} else if(Character.isWhitespace(c)) {
						// Ignore one whitespace char after an escape
						int d = Integer.parseInt(hexEscape.toString(),
									 16);
						if(d > 0xFFFF) {
							String error = 
							    "UCS-4 CHARACTERS OVER 0xFFFF NOT SUPPORTED!";
							logError(error);
							try {
								w.write("/* "+error+"*/");
							} catch (IOException e) {};
						} else {
							c = (char)d;
							buffer.append(c);
						}
						stillEscaping = false;
						hexEscape = new StringBuffer();
					} else {
						int d = Integer.parseInt(hexEscape.toString(),
									 16);
						if(d > 0xFFFF) {
							String error = 
							    "UCS-4 CHARACTERS OVER 0xFFFF NOT SUPPORTED!";
							logError(error);
							try {
								w.write("/* "+error+"*/");
							} catch (IOException e) {};
						} else {
							char o = (char)d;
							buffer.append(o);
						}
						buffer.append(c);
						stillEscaping = false;
						hexEscape = new StringBuffer();
					}
				} else {
					if(quote != ' ' && c == quote) {
						break;
					} else if (c == '\\') {
						justEscaping = true;
					} else {
						buffer.append(c);
					}
				}
			}
			data = buffer.toString();
			if(s.length() > (x+1))
				suffix = s.substring(x+1);
			else suffix = "";
		}
		
		public String toString() {
			StringBuffer out = new StringBuffer();
			if(url) out.append("url(");
			if(quote != ' ') out.append(quote);
			out.append(unescapeData());
			if(quote != ' ') out.append(quote);
			if(url) out.append(")");
			out.append(suffix);
			return out.toString();
		}
		
		public String unescapeData() {
			StringBuffer sb = new StringBuffer();
			for(int i=0;i<data.length();i++) {
				char c = data.charAt(i);
				if(c == quote || c == '\n') {
					sb.append('\\');
				}
				sb.append(c);
			}
			return sb.toString();
		}
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CSSTokenizerFilter(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CSSTokenizerFilter(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[13303];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 78: 
        case 98: 
        case 189: 
        case 199: 
        case 205: 
        case 230: 
        case 246: 
        case 262: 
          { 
	if(!deleteErrors) {
		throwError("Unknown @identifier "+yytext());
	} else {
		String s = yytext();
		if(debug) log("Discarded identifier: "+s);
		// Ignore
	}
 }
        case 304: break;
        case 117: 
        case 133: 
        case 174: 
        case 176: 
          { 
	// This is horrible. However it seems that there is no other way to do it with either jflex or CUP, as {URL} cannot be an unambiguous token :(
	String s = yytext();
	if(debug) log("Recognized URL: "+s);
	
	DecodedStringThingy dst = new DecodedStringThingy(s);
	
	if(!dst.url) {
		throw new IllegalStateException("parsing url().. isn't a url()");
	}
	if(dst.suffix.length() > 0) {
		yypushback(dst.suffix.length());
		dst.suffix = "";
	}
	
	s = dst.data;
	if(debug) log("URL now: "+s);
	s = processURL(s);
	dst.data = s;
	if(s == null || s.equals("")) {
		if(debug) log("URL invalid");
		w.write("url()");
	} else {
		s = dst.toString();
		if(debug) log("Writing: "+s);
		w.write(s);
	}
 }
        case 305: break;
        case 105: 
          { 
	String s = yytext();
	StringBuffer sb = new StringBuffer(s.length());
	sb.append("/* ");
	boolean inPrefix = true;
	for(int i=2;i<s.length()-2;i++) {
		char c = s.charAt(i);
		if(inPrefix && Character.isWhitespace(c)) {
			continue;
		}
		inPrefix = false;
		if(Character.isDigit(c) || Character.isWhitespace(c) ||
			Character.isLetter(c) || c == '.' || c == '_' || c == '-') {
			// No @, no !, etc; IE has been known to do things with comments
			// in CSS, and other browsers may too
			sb.append(c);
		}
	}
	while(Character.isWhitespace(sb.charAt(sb.length()-1)))
		sb.deleteCharAt(sb.length()-1);
	sb.append(" */");
	w.write(sb.toString());
	if(debug) log("Matched comment: "+s+" -> "+sb.toString());
 }
        case 306: break;
        case 26: 
        case 94: 
          { 
	String s = yytext();
	if(s.startsWith("url")) throwError("Invalid contents of url()");
	w.write(s);
	if(debug) log("Matched function start: "+s);
 }
        case 307: break;
        case 28: 
          { 
	if(postBadImportFlag) {
		// Ignore
		postBadImportFlag = false;
		if(debug) log("Ignoring mediums list because after bad import: "+
			yytext());
	} else {
		String s = yytext();
		w.write(s);
		if(debug) log("Matched and passing on mediums list: "+s);
	}
 }
        case 308: break;
        case 188: 
        case 198: 
        case 219: 
        case 236: 
        case 242: 
          { 
	String s = yytext();
	if(debug) log("Found @import: "+s);
	s = s.substring("@import".length());
	s = s.trim();
	DecodedStringThingy dst = new DecodedStringThingy(s);
	s = dst.data;
	if(debug) log("URL: "+s);
	s = processURL(s);
	if (!(s == null || s.equals(""))) {
		if(debug) log("URL now: "+s);
		s = "@import "+dst.toString();
		if(debug) log("Writing: "+s);
		w.write(s);
	} else
		if(debug) log("Dropped @import");
 }
        case 309: break;
        case 106: 
          {  
	String s = yytext();
	w.write(s);
	if(debug) log("Matched HTML comment: "+s);
 }
        case 310: break;
        case 146: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched @media: "+s);
 }
        case 311: break;
        case 74: 
        case 75: 
        case 95: 
        case 97: 
        case 119: 
        case 120: 
        case 141: 
        case 142: 
        case 164: 
        case 165: 
        case 178: 
        case 179: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched unicode: "+s);
 }
        case 312: break;
        case 37: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched number: "+s);
 }
        case 313: break;
        case 54: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched |=: "+s);
 }
        case 314: break;
        case 125: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched @page: "+s);
 }
        case 315: break;
        case 92: 
        case 152: 
          { 
	String s = yytext();
	if(debug) log("Got hexcolor: "+s);
	w.write(s);
 }
        case 316: break;
        case 2: 
        case 5: 
        case 13: 
        case 30: 
        case 41: 
        case 57: 
        case 73: 
        case 89: 
        case 109: 
        case 130: 
        case 151: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched ident: "+s);
 }
        case 317: break;
        case 34: 
        case 59: 
        case 60: 
          { 
	String s = yytext();
	if(debug) log("Matched string: "+s);
	if(paranoidStringCheck && s.indexOf(':') != -1) {
		w.write("/* Deleted disallowed string */");
		log("Deleted disallowed string: "+s);
	} else {
		w.write(s);
	}
 }
        case 318: break;
        case 38: 
        case 40: 
        case 71: 
        case 72: 
        case 93: 
        case 110: 
        case 111: 
        case 131: 
        case 132: 
        case 153: 
        case 173: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched #name: "+s);
 }
        case 319: break;
        case 281: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched important: "+s);
 }
        case 320: break;
        case 15: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched semicolon: "+s);
 }
        case 321: break;
        case 136: 
        case 138: 
        case 140: 
        case 155: 
        case 160: 
        case 163: 
          { 
	String s = yytext();
	if(debug) log("Ignoring unrecognizable url: "+s);
	w.write("/* Ignoring unmatchable URL */url()");
 }
        case 322: break;
        case 53: 
          {  
	String s = yytext();
	w.write(s); 
	if(debug) log("Matched ~=: "+s);
 }
        case 323: break;
        case 121: 
        case 143: 
        case 166: 
        case 180: 
        case 194: 
        case 213: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched unicode range: "+s);
 }
        case 324: break;
        case 17: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched close braces: "+s);
 }
        case 325: break;
        case 10: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched function end: "+s);
 }
        case 326: break;
        case 248: 
        case 266: 
        case 280: 
          { 
	String s = yytext();
	detectedCharset = s;
	if(debug) log("Matched and ignoring charset: "+s);
	// Ignore
 }
        case 327: break;
        case 1: 
        case 3: 
        case 7: 
        case 8: 
        case 11: 
        case 14: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
          { 
	String s = yytext();
	char c = s.charAt(0);
	log("Matched anything: "+yytext()+" - ignoring");
	w.write("/* ignored unmatched char: "+c+" */"); // single char cannot break out of comment
 }
        case 328: break;
        case 225: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched @font-face: "+s);
 }
        case 329: break;
        case 16: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched open braces: "+s);
 }
        case 330: break;
        case 6: 
        case 9: 
        case 12: 
        case 18: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched single char: "+s);
 }
        case 331: break;
        case 4: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched whitespace: "+s);
 }
        case 332: break;
        case 29: 
          { 
	String s = yytext();
	w.write(s);
	if(debug) log("Matched measurement: "+s);
 }
        case 333: break;
        case 58: 
          { 
	String s = yytext();
	w.write(s); 
	if(debug) log("Matched HTML comment: "+s);
 }
        case 334: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            return null;
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
