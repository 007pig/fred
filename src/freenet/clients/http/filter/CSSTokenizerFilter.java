/* The following code was generated by JFlex 1.4.1 on 28/09/06 17:29 */

package freenet.clients.http.filter;
import java.io.*;
import java.util.*;
/* This class tokenizes a CSS2 Reader stream, writes it out to the output Writer, and filters any URLs found */
// WARNING: this is not as thorough as the HTML parser - new versions of the standard could lead to anonymity risks. See comments in SaferFilter.java
// Mostly from http://www.w3.org/TR/REC-CSS2/grammar.html


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 28/09/06 17:29 from the specification file
 * <tt>freenet/clients/http/filter/CSSTokenizerFilter.jflex</tt>
 */
class CSSTokenizerFilter {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\3\1\0\1\3\1\3\22\0\1\5\1\45\1\11"+
    "\1\27\1\4\1\62\1\4\1\12\1\23\1\14\1\43\1\55\1\30"+
    "\1\10\1\13\1\42\12\1\1\63\1\37\1\44\1\50\1\46\1\26"+
    "\1\33\1\32\1\6\1\54\1\52\1\31\1\53\1\22\1\57\1\20"+
    "\1\7\1\61\1\25\1\34\1\21\1\36\1\35\1\7\1\17\1\15"+
    "\1\16\1\24\2\7\1\56\1\7\1\60\1\4\1\2\4\4\1\32"+
    "\1\6\1\54\1\52\1\31\1\53\1\22\1\57\1\20\1\7\1\61"+
    "\1\25\1\34\1\21\1\36\1\35\1\7\1\17\1\15\1\16\1\24"+
    "\2\7\1\56\1\7\1\60\1\40\1\51\1\41\1\47\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\2\1\4\2\1"+
    "\1\4\1\5\2\2\1\1\1\4\1\1\1\6\1\7"+
    "\1\10\1\4\4\1\3\0\1\11\1\0\1\12\1\13"+
    "\1\2\3\0\1\14\2\0\1\15\2\2\1\0\1\16"+
    "\1\0\1\16\11\0\1\17\1\20\2\0\1\2\1\21"+
    "\2\14\12\0\2\2\2\22\2\16\11\0\1\2\2\0"+
    "\1\2\1\11\1\22\1\0\1\22\1\23\1\16\5\0"+
    "\1\24\1\25\2\0\2\2\2\0\1\26\2\22\1\27"+
    "\2\16\2\0\1\30\4\0\2\2\1\26\2\22\1\27"+
    "\2\16\6\0\1\2\1\31\2\22\1\27\1\23\1\16"+
    "\1\0\1\32\5\0\2\22\1\27\1\16\5\0\1\33"+
    "\2\32\4\0\1\27\4\0\1\32\4\0\1\27\4\0"+
    "\1\33\2\0\1\32\1\34\3\0\1\35\3\0\1\33"+
    "\5\0\1\33\1\0\1\32\1\0\1\36\16\0\1\32"+
    "\2\36\11\0\1\32\6\0\1\33\23\0\1\33\3\0"+
    "\1\33\32\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\64\0\u0208\0\u023c\0\u0270\0\64\0\u02a4"+
    "\0\64\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410"+
    "\0\234\0\u0444\0\u01d4\0\64\0\u0478\0\64\0\64\0\u04ac"+
    "\0\u04e0\0\u016c\0\u0514\0\64\0\u01a0\0\u0548\0\u057c\0\u05b0"+
    "\0\u05e4\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750"+
    "\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u03a8\0\u0854\0\64\0\64"+
    "\0\u0888\0\u08bc\0\u08f0\0\64\0\u016c\0\u01a0\0\u0924\0\u0958"+
    "\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8"+
    "\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98"+
    "\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38"+
    "\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8"+
    "\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\64\0\64"+
    "\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u0f08\0\u1214\0\64\0\u1248"+
    "\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u134c\0\u1380\0\64\0\u13b4"+
    "\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8\0\u0f08\0\u14ec\0\u1520"+
    "\0\u1554\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1658\0\u168c\0\u16c0"+
    "\0\u16f4\0\u1728\0\u0104\0\u175c\0\u1790\0\u17c4\0\u06b4\0\u17f8"+
    "\0\u182c\0\u1860\0\u1894\0\u18c8\0\u18fc\0\u1930\0\u1964\0\u1998"+
    "\0\64\0\u19cc\0\u1a00\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0\0\u1b04"+
    "\0\u1a34\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70"+
    "\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74\0\u1da8\0\u1ddc\0\u1e10"+
    "\0\u1e44\0\64\0\u1e78\0\u1eac\0\u1ee0\0\u1f14\0\64\0\u1f48"+
    "\0\u1f7c\0\u1fb0\0\64\0\u1fe4\0\u2018\0\u204c\0\64\0\u2080"+
    "\0\u20b4\0\u20e8\0\u1a9c\0\u211c\0\u2150\0\u2184\0\u21b8\0\u21ec"+
    "\0\u1ad0\0\u2220\0\u2254\0\u2288\0\64\0\u22bc\0\u22f0\0\u2324"+
    "\0\u2358\0\u238c\0\u23c0\0\u23f4\0\u2428\0\u245c\0\u2490\0\u24c4"+
    "\0\u24f8\0\u252c\0\u2560\0\u2594\0\u1ddc\0\u1e10\0\u25c8\0\u25fc"+
    "\0\u2630\0\u2664\0\u2698\0\u26cc\0\u2700\0\u2734\0\u2768\0\u279c"+
    "\0\u27d0\0\u2804\0\u2838\0\u286c\0\u28a0\0\u28d4\0\u24c4\0\u2908"+
    "\0\u293c\0\u2970\0\u29a4\0\u29d8\0\u2a0c\0\u2a40\0\u2a74\0\u2aa8"+
    "\0\u2adc\0\u2b10\0\u2b44\0\u2b78\0\u2bac\0\u2be0\0\u2c14\0\u2c48"+
    "\0\u2c7c\0\u2cb0\0\u252c\0\u2ce4\0\u2d18\0\u2d4c\0\u2560\0\u2d80"+
    "\0\u2db4\0\u2de8\0\u2e1c\0\u2e50\0\u2e84\0\u2eb8\0\u2eec\0\u2f20"+
    "\0\u2f54\0\u2f88\0\u2fbc\0\u2ff0\0\u3024\0\u3058\0\u308c\0\u30c0"+
    "\0\u30f4\0\u3128\0\u315c\0\u3190\0\u31c4\0\u31f8\0\u322c\0\u3260"+
    "\0\u3294";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\5\2\6\1\7"+
    "\1\10\1\11\1\12\1\13\2\6\1\14\3\6\1\2"+
    "\1\15\1\6\1\2\1\16\1\17\2\6\1\20\3\6"+
    "\1\21\1\22\1\23\1\24\1\17\1\25\1\26\1\17"+
    "\1\27\1\2\1\30\3\6\1\17\4\6\1\2\1\17"+
    "\65\0\1\3\1\31\1\32\1\0\1\32\3\6\2\0"+
    "\1\33\1\0\6\6\1\34\2\6\2\0\1\35\2\6"+
    "\1\0\3\6\1\36\12\0\3\6\1\0\4\6\1\37"+
    "\2\0\1\40\1\6\1\0\2\6\1\40\22\6\2\40"+
    "\17\6\3\40\7\6\3\0\1\5\1\0\1\5\32\0"+
    "\1\22\1\23\23\0\1\6\1\31\1\32\1\0\1\32"+
    "\3\6\4\0\6\6\1\34\2\6\2\0\1\35\2\6"+
    "\1\0\3\6\1\36\12\0\3\6\1\0\4\6\12\0"+
    "\1\41\53\0\2\42\1\43\6\42\1\44\52\42\2\45"+
    "\1\46\7\45\1\44\51\45\1\0\1\47\63\0\1\6"+
    "\1\31\1\32\1\0\1\32\3\6\4\0\6\6\1\34"+
    "\2\6\2\0\1\35\1\50\1\6\1\0\3\6\1\36"+
    "\12\0\3\6\1\0\4\6\3\0\1\6\1\31\1\32"+
    "\1\0\1\32\3\6\4\0\2\6\1\51\3\6\1\34"+
    "\2\6\2\0\1\35\2\6\1\0\3\6\1\36\12\0"+
    "\3\6\1\52\4\6\3\0\1\53\1\54\3\0\1\53"+
    "\2\55\4\0\6\55\1\0\2\55\3\0\2\53\1\0"+
    "\3\55\13\0\3\53\1\0\4\55\22\0\1\56\13\0"+
    "\1\57\1\60\15\0\1\61\1\62\12\0\1\22\1\0"+
    "\1\22\61\0\1\23\1\0\1\23\121\0\1\63\65\0"+
    "\1\64\21\0\1\65\1\0\1\65\12\0\1\66\113\0"+
    "\1\67\63\0\1\70\16\0\1\32\1\0\1\32\22\0"+
    "\1\35\6\0\1\36\25\0\1\71\1\72\1\35\1\0"+
    "\1\35\2\71\5\0\6\71\1\0\2\71\3\0\2\71"+
    "\1\0\3\71\13\0\3\71\1\0\4\71\3\0\1\73"+
    "\1\31\1\6\1\0\1\6\1\73\2\6\4\0\6\6"+
    "\1\34\2\6\2\0\1\35\2\73\1\0\3\6\1\36"+
    "\12\0\3\73\1\0\4\6\50\0\1\74\15\0\2\42"+
    "\1\43\6\42\1\75\52\42\2\45\1\46\7\45\1\76"+
    "\51\45\1\0\1\47\13\0\1\37\1\0\1\77\1\100"+
    "\1\0\1\101\6\0\1\102\2\0\1\103\1\104\14\0"+
    "\1\105\1\0\1\106\2\0\1\107\1\0\1\110\1\37"+
    "\2\0\1\6\1\31\1\32\1\0\1\32\3\6\4\0"+
    "\6\6\1\34\2\6\2\0\1\35\1\6\1\111\1\0"+
    "\3\6\1\36\12\0\3\6\1\0\4\6\3\0\1\6"+
    "\1\31\1\32\1\0\1\32\3\6\4\0\6\6\1\34"+
    "\1\6\1\112\2\0\1\35\2\6\1\0\3\6\1\36"+
    "\12\0\3\6\1\0\4\6\3\0\1\113\4\0\1\113"+
    "\17\0\1\114\2\0\2\113\17\0\3\113\10\0\1\115"+
    "\1\54\3\0\1\115\2\55\4\0\6\55\1\0\2\55"+
    "\3\0\2\115\1\0\3\55\13\0\3\115\1\0\4\55"+
    "\3\0\1\116\1\55\1\0\2\55\1\116\22\55\2\116"+
    "\17\55\3\116\7\55\1\0\1\55\1\54\3\0\3\55"+
    "\4\0\6\55\1\0\2\55\3\0\2\55\1\0\3\55"+
    "\13\0\3\55\1\0\4\55\36\0\1\117\60\0\1\120"+
    "\64\0\1\121\67\0\1\122\104\0\1\123\4\0\43\63"+
    "\1\124\20\63\10\0\1\125\107\0\1\126\30\0\1\71"+
    "\1\72\1\32\1\0\1\32\3\71\4\0\6\71\1\0"+
    "\2\71\2\0\1\35\2\71\1\0\3\71\1\36\12\0"+
    "\3\71\1\0\4\71\3\0\1\127\1\71\1\0\2\71"+
    "\1\127\22\71\2\127\17\71\3\127\7\71\1\0\1\130"+
    "\1\31\1\6\1\0\1\6\1\130\2\6\4\0\6\6"+
    "\1\34\2\6\2\0\1\35\2\130\1\0\3\6\1\36"+
    "\12\0\3\130\1\0\4\6\34\0\1\131\52\0\1\37"+
    "\61\0\1\77\100\0\1\37\21\0\1\37\22\0\1\37"+
    "\16\0\1\37\103\0\1\37\1\0\1\37\36\0\1\132"+
    "\66\0\1\37\107\0\1\37\62\0\1\107\5\0\1\6"+
    "\1\31\1\32\1\0\1\32\3\6\4\0\6\6\1\34"+
    "\1\6\1\133\2\0\1\35\2\6\1\0\3\6\1\36"+
    "\12\0\3\6\1\0\4\6\3\0\1\6\1\31\1\32"+
    "\1\0\1\32\3\6\4\0\6\6\1\134\2\6\2\0"+
    "\1\35\2\6\1\0\3\6\1\36\12\0\3\6\1\0"+
    "\4\6\3\0\1\135\4\0\1\135\1\0\1\136\15\0"+
    "\1\137\2\0\2\135\17\0\3\135\35\0\1\137\36\0"+
    "\1\140\1\54\3\0\1\140\2\55\4\0\6\55\1\0"+
    "\2\55\3\0\2\140\1\0\3\55\13\0\3\140\1\0"+
    "\4\55\3\0\1\141\1\54\1\55\1\0\1\55\1\141"+
    "\2\55\4\0\6\55\1\0\2\55\3\0\2\141\1\0"+
    "\3\55\13\0\3\141\1\0\4\55\37\0\1\142\100\0"+
    "\1\143\33\0\1\144\62\0\1\145\74\0\1\146\31\0"+
    "\42\63\1\147\1\124\20\63\10\0\1\150\110\0\1\151"+
    "\27\0\1\152\1\72\1\71\1\0\1\71\1\152\2\71"+
    "\4\0\6\71\1\0\2\71\2\0\1\35\2\152\1\0"+
    "\3\71\1\36\12\0\3\152\1\0\4\71\3\0\1\153"+
    "\1\31\1\6\1\0\1\6\1\153\2\6\4\0\6\6"+
    "\1\34\2\6\2\0\1\35\2\153\1\0\3\6\1\36"+
    "\12\0\3\153\1\0\4\6\54\0\1\37\33\0\1\37"+
    "\42\0\1\6\1\31\1\32\1\0\1\32\3\6\4\0"+
    "\6\6\1\34\1\154\1\6\2\0\1\35\2\6\1\0"+
    "\3\6\1\36\12\0\3\6\1\0\4\6\2\0\2\155"+
    "\1\156\11\155\1\157\47\155\1\0\1\160\4\0\1\160"+
    "\1\0\1\136\15\0\1\161\2\0\2\160\17\0\3\160"+
    "\10\0\1\162\4\0\1\162\22\0\2\162\17\0\3\162"+
    "\35\0\1\161\36\0\1\163\1\54\3\0\1\163\2\55"+
    "\4\0\6\55\1\0\2\55\3\0\2\163\1\0\3\55"+
    "\13\0\3\163\1\0\4\55\3\0\1\164\1\54\1\55"+
    "\1\0\1\55\1\164\2\55\4\0\6\55\1\0\2\55"+
    "\3\0\2\164\1\0\3\55\13\0\3\164\1\0\4\55"+
    "\40\0\1\165\45\0\1\166\74\0\1\167\50\0\1\170"+
    "\64\0\1\171\102\0\1\172\26\0\1\173\1\72\1\71"+
    "\1\0\1\71\1\173\2\71\4\0\6\71\1\0\2\71"+
    "\2\0\1\35\2\173\1\0\3\71\1\36\12\0\3\173"+
    "\1\0\4\71\3\0\1\174\1\31\1\6\1\0\1\6"+
    "\1\174\2\6\4\0\6\6\1\34\2\6\2\0\1\35"+
    "\2\174\1\0\3\6\1\36\12\0\3\174\1\0\4\6"+
    "\3\0\1\6\1\31\1\32\1\0\1\32\3\6\4\0"+
    "\2\6\1\175\3\6\1\34\2\6\2\0\1\35\2\6"+
    "\1\0\3\6\1\36\12\0\3\6\1\0\4\6\2\0"+
    "\2\155\1\156\11\155\1\176\47\155\1\0\1\177\4\0"+
    "\1\177\1\0\1\136\15\0\1\200\2\0\2\177\17\0"+
    "\3\177\35\0\1\200\36\0\1\201\4\0\1\201\22\0"+
    "\2\201\17\0\3\201\10\0\1\202\1\54\3\0\1\202"+
    "\2\55\4\0\6\55\1\0\2\55\3\0\2\202\1\0"+
    "\3\55\13\0\3\202\1\0\4\55\3\0\1\203\1\54"+
    "\1\55\1\0\1\55\1\203\2\55\4\0\6\55\1\0"+
    "\2\55\3\0\2\203\1\0\3\55\13\0\3\203\1\0"+
    "\4\55\21\0\1\204\76\0\1\205\41\0\1\206\70\0"+
    "\1\207\65\0\1\210\45\0\1\211\1\72\1\71\1\0"+
    "\1\71\1\211\2\71\4\0\6\71\1\0\2\71\2\0"+
    "\1\35\2\211\1\0\3\71\1\36\12\0\3\211\1\0"+
    "\4\71\3\0\1\212\1\31\1\6\1\0\1\6\1\212"+
    "\2\6\4\0\6\6\1\34\2\6\2\0\1\35\2\212"+
    "\1\0\3\6\1\36\12\0\3\212\1\0\4\6\3\0"+
    "\1\6\1\31\1\32\1\0\1\32\3\6\4\0\6\6"+
    "\1\34\1\6\1\213\2\0\1\35\2\6\1\0\3\6"+
    "\1\36\12\0\3\6\1\0\4\6\3\0\1\214\4\0"+
    "\1\214\1\0\1\136\15\0\1\215\2\0\2\214\17\0"+
    "\3\214\35\0\1\215\36\0\1\216\4\0\1\216\22\0"+
    "\2\216\17\0\3\216\10\0\1\217\1\54\3\0\1\217"+
    "\2\55\4\0\6\55\1\0\2\55\3\0\2\217\1\0"+
    "\3\55\13\0\3\217\1\0\4\55\3\0\1\220\1\54"+
    "\1\55\1\0\1\55\1\220\2\55\4\0\6\55\1\0"+
    "\2\55\3\0\2\220\1\0\3\55\13\0\3\220\1\0"+
    "\4\55\20\0\1\221\46\0\1\222\1\223\1\205\1\0"+
    "\1\205\2\222\5\0\6\222\1\0\2\222\3\0\2\222"+
    "\1\0\3\222\13\0\3\222\1\0\4\222\55\0\1\224"+
    "\41\0\1\225\50\0\1\226\46\0\1\227\1\72\1\71"+
    "\1\0\1\71\1\227\2\71\4\0\6\71\1\0\2\71"+
    "\2\0\1\35\2\227\1\0\3\71\1\36\12\0\3\227"+
    "\1\0\4\71\3\0\1\6\1\31\1\6\1\0\4\6"+
    "\4\0\6\6\1\34\2\6\2\0\1\35\2\6\1\0"+
    "\3\6\1\36\12\0\3\6\1\0\4\6\3\0\1\230"+
    "\4\0\1\230\1\0\1\136\15\0\1\231\2\0\2\230"+
    "\17\0\3\230\35\0\1\231\36\0\1\232\4\0\1\232"+
    "\22\0\2\232\17\0\3\232\10\0\1\233\1\54\1\55"+
    "\1\0\1\55\1\233\2\55\4\0\6\55\1\0\2\55"+
    "\3\0\2\233\1\0\3\55\13\0\3\233\1\0\4\55"+
    "\2\0\2\234\1\235\1\221\1\234\1\221\3\234\1\236"+
    "\1\237\1\234\1\0\6\234\1\0\1\240\12\234\1\241"+
    "\24\234\1\0\1\222\1\223\1\242\1\0\1\242\3\222"+
    "\4\0\6\222\1\0\2\222\2\0\1\205\2\222\1\0"+
    "\3\222\13\0\3\222\1\0\4\222\3\0\1\243\1\222"+
    "\1\0\2\222\1\243\22\222\2\243\17\222\3\243\7\222"+
    "\32\0\1\244\47\0\1\245\77\0\1\246\32\0\1\247"+
    "\1\72\1\71\1\0\1\71\1\247\2\71\4\0\6\71"+
    "\1\0\2\71\2\0\1\35\2\247\1\0\3\71\1\36"+
    "\12\0\3\247\1\0\4\71\12\0\1\136\54\0\1\250"+
    "\4\0\1\250\22\0\2\250\17\0\3\250\10\0\1\55"+
    "\1\54\1\55\1\0\4\55\4\0\6\55\1\0\2\55"+
    "\3\0\2\55\1\0\3\55\13\0\3\55\1\0\4\55"+
    "\2\0\2\234\1\235\6\234\2\0\1\234\1\0\6\234"+
    "\1\0\13\234\1\241\26\234\1\235\34\234\1\241\24\234"+
    "\2\236\1\251\6\236\1\252\52\236\2\237\1\253\7\237"+
    "\1\252\51\237\2\234\1\235\6\234\2\0\1\234\1\0"+
    "\2\234\1\254\3\234\1\0\13\234\1\241\24\234\3\0"+
    "\1\242\1\0\1\242\22\0\1\205\34\0\1\255\1\223"+
    "\1\222\1\0\1\222\1\255\2\222\4\0\6\222\1\0"+
    "\2\222\2\0\1\205\2\255\1\0\3\222\13\0\3\255"+
    "\1\0\4\222\56\0\1\256\12\0\1\245\1\0\1\245"+
    "\3\0\1\257\1\260\72\0\1\261\43\0\1\71\1\72"+
    "\1\71\1\0\4\71\4\0\6\71\1\0\2\71\2\0"+
    "\1\35\2\71\1\0\3\71\1\36\12\0\3\71\1\0"+
    "\4\71\3\0\1\262\4\0\1\262\22\0\2\262\17\0"+
    "\3\262\7\0\2\236\1\251\6\236\1\263\52\236\1\0"+
    "\1\264\1\265\1\266\1\0\1\266\2\264\5\0\6\264"+
    "\1\0\2\264\3\0\2\264\1\0\3\264\1\267\12\0"+
    "\3\264\1\0\4\264\2\0\2\237\1\253\7\237\1\270"+
    "\51\237\2\234\1\235\6\234\2\0\1\234\1\0\6\234"+
    "\1\0\1\234\1\271\11\234\1\241\24\234\1\0\1\272"+
    "\1\223\1\222\1\0\1\222\1\272\2\222\4\0\6\222"+
    "\1\0\2\222\2\0\1\205\2\272\1\0\3\222\13\0"+
    "\3\272\1\0\4\222\33\0\1\273\32\0\2\257\1\274"+
    "\6\257\1\275\52\257\2\260\1\276\7\260\1\275\51\260"+
    "\16\0\1\277\45\0\1\236\1\300\1\301\1\302\1\236"+
    "\1\302\2\300\1\236\1\252\3\236\6\300\1\236\2\300"+
    "\3\236\2\300\1\236\3\300\1\303\12\236\3\300\1\236"+
    "\4\300\2\236\1\0\1\264\1\265\1\304\1\0\1\304"+
    "\3\264\4\0\6\264\1\0\2\264\2\0\1\266\2\264"+
    "\1\0\3\264\1\267\12\0\3\264\1\0\4\264\3\0"+
    "\1\305\1\264\1\0\2\264\1\305\22\264\2\305\17\264"+
    "\3\305\7\264\1\0\1\264\1\265\1\266\1\0\1\266"+
    "\2\264\5\0\6\264\1\0\2\264\3\0\2\264\1\0"+
    "\3\264\13\0\3\264\1\0\4\264\2\0\1\237\1\306"+
    "\1\307\1\310\1\237\1\310\2\306\2\237\1\252\2\237"+
    "\6\306\1\237\2\306\3\237\2\306\1\237\3\306\1\311"+
    "\12\237\3\306\1\237\4\306\2\237\2\234\1\235\6\234"+
    "\2\0\1\234\1\0\6\234\1\312\13\234\1\241\24\234"+
    "\1\0\1\313\1\223\1\222\1\0\1\222\1\313\2\222"+
    "\4\0\6\222\1\0\2\222\2\0\1\205\2\313\1\0"+
    "\3\222\13\0\3\313\1\0\4\222\2\0\2\257\1\274"+
    "\6\257\1\314\52\257\3\0\1\275\1\0\1\275\31\0"+
    "\1\315\24\0\2\260\1\276\7\260\1\316\51\260\1\236"+
    "\1\300\1\301\1\317\1\236\1\317\3\300\1\252\3\236"+
    "\6\300\1\236\2\300\2\236\1\302\2\300\1\236\3\300"+
    "\1\303\12\236\3\300\1\236\4\300\3\236\1\320\1\321"+
    "\1\236\2\300\1\320\2\300\1\322\17\300\2\320\17\300"+
    "\3\320\7\300\1\236\1\300\1\301\1\302\1\236\1\302"+
    "\2\300\1\236\1\252\3\236\6\300\1\236\2\300\3\236"+
    "\2\300\1\236\3\300\13\236\3\300\1\236\4\300\2\236"+
    "\3\0\1\304\1\0\1\304\22\0\1\266\6\0\1\267"+
    "\25\0\1\323\1\265\1\264\1\0\1\264\1\323\2\264"+
    "\4\0\6\264\1\0\2\264\2\0\1\266\2\323\1\0"+
    "\3\264\1\267\12\0\3\323\1\0\4\264\2\0\1\237"+
    "\1\306\1\307\1\324\1\237\1\324\3\306\1\237\1\252"+
    "\2\237\6\306\1\237\2\306\2\237\1\310\2\306\1\237"+
    "\3\306\1\311\12\237\3\306\1\237\4\306\3\237\1\325"+
    "\1\326\1\237\2\306\1\325\3\306\1\327\16\306\2\325"+
    "\17\306\3\325\7\306\1\237\1\306\1\307\1\310\1\237"+
    "\1\310\2\306\2\237\1\252\2\237\6\306\1\237\2\306"+
    "\3\237\2\306\1\237\3\306\13\237\3\306\1\237\4\306"+
    "\2\237\2\330\1\331\1\312\1\330\1\312\3\330\1\332"+
    "\1\333\1\330\1\252\6\330\1\0\40\330\1\0\1\334"+
    "\1\223\1\222\1\0\1\222\1\334\2\222\4\0\6\222"+
    "\1\0\2\222\2\0\1\205\2\334\1\0\3\222\13\0"+
    "\3\334\1\0\4\222\2\0\2\257\1\274\1\314\1\257"+
    "\1\314\3\257\1\275\25\257\1\335\24\257\2\260\1\276"+
    "\1\316\1\260\1\316\4\260\1\275\24\260\1\336\24\260"+
    "\2\236\1\251\1\317\1\236\1\317\3\236\1\252\16\236"+
    "\1\302\6\236\1\303\25\236\1\337\1\301\1\300\1\236"+
    "\1\300\1\337\2\300\1\252\3\236\6\300\1\236\2\300"+
    "\2\236\1\302\2\337\1\236\3\300\1\303\12\236\3\337"+
    "\1\236\4\300\3\236\1\300\1\301\1\317\1\236\1\317"+
    "\3\300\1\263\3\236\6\300\1\236\2\300\2\236\1\302"+
    "\2\300\1\236\3\300\1\303\12\236\3\300\1\236\4\300"+
    "\3\236\1\300\1\301\1\340\1\236\1\340\3\300\1\252"+
    "\3\236\6\300\1\236\2\300\2\236\1\302\2\300\1\236"+
    "\3\300\1\303\12\236\3\300\1\236\4\300\2\236\1\0"+
    "\1\341\1\265\1\264\1\0\1\264\1\341\2\264\4\0"+
    "\6\264\1\0\2\264\2\0\1\266\2\341\1\0\3\264"+
    "\1\267\12\0\3\341\1\0\4\264\2\0\2\237\1\253"+
    "\1\324\1\237\1\324\4\237\1\252\15\237\1\310\6\237"+
    "\1\311\25\237\1\342\1\307\1\306\1\237\1\306\1\342"+
    "\2\306\1\237\1\252\2\237\6\306\1\237\2\306\2\237"+
    "\1\310\2\342\1\237\3\306\1\311\12\237\3\342\1\237"+
    "\4\306\3\237\1\306\1\307\1\324\1\237\1\324\3\306"+
    "\1\237\1\270\2\237\6\306\1\237\2\306\2\237\1\310"+
    "\2\306\1\237\3\306\1\311\12\237\3\306\1\237\4\306"+
    "\3\237\1\306\1\307\1\343\1\237\1\343\3\306\1\237"+
    "\1\252\2\237\6\306\1\237\2\306\2\237\1\310\2\306"+
    "\1\237\3\306\1\311\12\237\3\306\1\237\4\306\2\237"+
    "\2\330\1\331\6\330\2\0\1\330\1\252\6\330\1\0"+
    "\42\330\1\331\11\330\1\344\47\330\2\332\1\345\6\332"+
    "\1\346\52\332\2\333\1\347\7\333\1\346\51\333\1\0"+
    "\1\350\1\223\1\222\1\0\1\222\1\350\2\222\4\0"+
    "\6\222\1\0\2\222\2\0\1\205\2\350\1\0\3\222"+
    "\13\0\3\350\1\0\4\222\2\0\1\236\1\351\1\301"+
    "\1\300\1\236\1\300\1\351\2\300\1\252\3\236\6\300"+
    "\1\236\2\300\2\236\1\302\2\351\1\236\3\300\1\303"+
    "\12\236\3\351\1\236\4\300\3\236\1\300\1\301\1\340"+
    "\1\236\1\340\2\300\1\236\1\252\3\236\6\300\1\236"+
    "\2\300\2\236\1\302\2\300\1\236\3\300\1\303\12\236"+
    "\3\300\1\236\4\300\2\236\1\0\1\352\1\265\1\264"+
    "\1\0\1\264\1\352\2\264\4\0\6\264\1\0\2\264"+
    "\2\0\1\266\2\352\1\0\3\264\1\267\12\0\3\352"+
    "\1\0\4\264\2\0\1\237\1\353\1\307\1\306\1\237"+
    "\1\306\1\353\2\306\1\237\1\252\2\237\6\306\1\237"+
    "\2\306\2\237\1\310\2\353\1\237\3\306\1\311\12\237"+
    "\3\353\1\237\4\306\3\237\1\306\1\307\1\343\1\237"+
    "\1\343\2\306\2\237\1\252\2\237\6\306\1\237\2\306"+
    "\2\237\1\310\2\306\1\237\3\306\1\311\12\237\3\306"+
    "\1\237\4\306\2\237\1\330\1\354\1\355\1\356\1\330"+
    "\1\356\2\354\1\330\2\0\1\330\1\252\6\354\1\0"+
    "\2\354\3\330\2\354\1\330\3\354\1\357\12\330\3\354"+
    "\1\330\4\354\2\330\2\332\1\345\6\332\1\360\52\332"+
    "\3\0\1\346\1\0\1\346\6\0\1\252\47\0\2\333"+
    "\1\347\7\333\1\361\51\333\1\0\1\222\1\223\1\222"+
    "\1\0\4\222\4\0\6\222\1\0\2\222\2\0\1\205"+
    "\2\222\1\0\3\222\13\0\3\222\1\0\4\222\2\0"+
    "\1\236\1\362\1\301\1\300\1\236\1\300\1\362\2\300"+
    "\1\252\3\236\6\300\1\236\2\300\2\236\1\302\2\362"+
    "\1\236\3\300\1\303\12\236\3\362\1\236\4\300\2\236"+
    "\1\0\1\363\1\265\1\264\1\0\1\264\1\363\2\264"+
    "\4\0\6\264\1\0\2\264\2\0\1\266\2\363\1\0"+
    "\3\264\1\267\12\0\3\363\1\0\4\264\2\0\1\237"+
    "\1\364\1\307\1\306\1\237\1\306\1\364\2\306\1\237"+
    "\1\252\2\237\6\306\1\237\2\306\2\237\1\310\2\364"+
    "\1\237\3\306\1\311\12\237\3\364\1\237\4\306\2\237"+
    "\1\330\1\354\1\355\1\365\1\330\1\365\3\354\2\0"+
    "\1\330\1\252\6\354\1\0\2\354\2\330\1\356\2\354"+
    "\1\330\3\354\1\357\12\330\3\354\1\330\4\354\3\330"+
    "\1\366\1\367\1\330\2\354\1\366\5\354\1\370\14\354"+
    "\2\366\17\354\3\366\7\354\1\330\1\354\1\355\1\356"+
    "\1\330\1\356\2\354\1\330\2\0\1\330\1\252\6\354"+
    "\1\0\2\354\3\330\2\354\1\330\3\354\13\330\3\354"+
    "\1\330\4\354\2\330\2\332\1\345\1\360\1\332\1\360"+
    "\3\332\1\346\2\332\1\371\47\332\2\333\1\347\1\361"+
    "\1\333\1\361\4\333\1\346\1\333\1\372\47\333\1\236"+
    "\1\373\1\301\1\300\1\236\1\300\1\373\2\300\1\252"+
    "\3\236\6\300\1\236\2\300\2\236\1\302\2\373\1\236"+
    "\3\300\1\303\12\236\3\373\1\236\4\300\2\236\1\0"+
    "\1\374\1\265\1\264\1\0\1\264\1\374\2\264\4\0"+
    "\6\264\1\0\2\264\2\0\1\266\2\374\1\0\3\264"+
    "\1\267\12\0\3\374\1\0\4\264\2\0\1\237\1\375"+
    "\1\307\1\306\1\237\1\306\1\375\2\306\1\237\1\252"+
    "\2\237\6\306\1\237\2\306\2\237\1\310\2\375\1\237"+
    "\3\306\1\311\12\237\3\375\1\237\4\306\2\237\2\330"+
    "\1\331\1\365\1\330\1\365\3\330\2\0\1\330\1\252"+
    "\6\330\1\0\4\330\1\356\6\330\1\357\25\330\1\376"+
    "\1\355\1\354\1\330\1\354\1\376\2\354\2\0\1\330"+
    "\1\252\6\354\1\0\2\354\2\330\1\356\2\376\1\330"+
    "\3\354\1\357\12\330\3\376\1\330\4\354\3\330\1\354"+
    "\1\355\1\365\1\330\1\365\3\354\3\330\1\344\6\354"+
    "\1\330\2\354\2\330\1\356\2\354\1\330\3\354\1\357"+
    "\12\330\3\354\1\330\4\354\3\330\1\354\1\355\1\377"+
    "\1\330\1\377\3\354\2\0\1\330\1\252\6\354\1\0"+
    "\2\354\2\330\1\356\2\354\1\330\3\354\1\357\12\330"+
    "\3\354\1\330\4\354\2\330\1\332\1\u0100\1\u0101\1\u0102"+
    "\1\332\1\u0102\2\u0100\1\332\1\346\3\332\6\u0100\1\332"+
    "\2\u0100\3\332\2\u0100\1\332\3\u0100\1\u0103\12\332\3\u0100"+
    "\1\332\4\u0100\2\332\1\333\1\u0104\1\u0105\1\u0106\1\333"+
    "\1\u0106\2\u0104\2\333\1\346\2\333\6\u0104\1\333\2\u0104"+
    "\3\333\2\u0104\1\333\3\u0104\1\u0107\12\333\3\u0104\1\333"+
    "\4\u0104\2\333\1\236\1\u0108\1\301\1\300\1\236\1\300"+
    "\1\u0108\2\300\1\252\3\236\6\300\1\236\2\300\2\236"+
    "\1\302\2\u0108\1\236\3\300\1\303\12\236\3\u0108\1\236"+
    "\4\300\2\236\1\0\1\264\1\265\1\264\1\0\4\264"+
    "\4\0\6\264\1\0\2\264\2\0\1\266\2\264\1\0"+
    "\3\264\1\267\12\0\3\264\1\0\4\264\2\0\1\237"+
    "\1\u0109\1\307\1\306\1\237\1\306\1\u0109\2\306\1\237"+
    "\1\252\2\237\6\306\1\237\2\306\2\237\1\310\2\u0109"+
    "\1\237\3\306\1\311\12\237\3\u0109\1\237\4\306\2\237"+
    "\1\330\1\u010a\1\355\1\354\1\330\1\354\1\u010a\2\354"+
    "\2\0\1\330\1\252\6\354\1\0\2\354\2\330\1\356"+
    "\2\u010a\1\330\3\354\1\357\12\330\3\u010a\1\330\4\354"+
    "\3\330\1\354\1\355\1\377\1\330\1\377\2\354\1\330"+
    "\2\0\1\330\1\252\6\354\1\0\2\354\2\330\1\356"+
    "\2\354\1\330\3\354\1\357\12\330\3\354\1\330\4\354"+
    "\2\330\1\332\1\u0100\1\u0101\1\u010b\1\332\1\u010b\3\u0100"+
    "\1\346\3\332\6\u0100\1\332\2\u0100\2\332\1\u0102\2\u0100"+
    "\1\332\3\u0100\1\u0103\12\332\3\u0100\1\332\4\u0100\3\332"+
    "\1\u010c\1\u010d\1\332\2\u0100\1\u010c\2\u0100\1\u010e\17\u0100"+
    "\2\u010c\17\u0100\3\u010c\7\u0100\1\332\1\u0100\1\u0101\1\u0102"+
    "\1\332\1\u0102\2\u0100\1\332\1\346\3\332\6\u0100\1\332"+
    "\2\u0100\3\332\2\u0100\1\332\3\u0100\13\332\3\u0100\1\332"+
    "\4\u0100\2\332\1\333\1\u0104\1\u0105\1\u010f\1\333\1\u010f"+
    "\3\u0104\1\333\1\346\2\333\6\u0104\1\333\2\u0104\2\333"+
    "\1\u0106\2\u0104\1\333\3\u0104\1\u0107\12\333\3\u0104\1\333"+
    "\4\u0104\3\333\1\u0110\1\u0111\1\333\2\u0104\1\u0110\3\u0104"+
    "\1\u0112\16\u0104\2\u0110\17\u0104\3\u0110\7\u0104\1\333\1\u0104"+
    "\1\u0105\1\u0106\1\333\1\u0106\2\u0104\2\333\1\346\2\333"+
    "\6\u0104\1\333\2\u0104\3\333\2\u0104\1\333\3\u0104\13\333"+
    "\3\u0104\1\333\4\u0104\2\333\1\236\1\300\1\301\1\300"+
    "\1\236\4\300\1\252\3\236\6\300\1\236\2\300\2\236"+
    "\1\302\2\300\1\236\3\300\1\303\12\236\3\300\1\236"+
    "\4\300\2\236\1\237\1\306\1\307\1\306\1\237\4\306"+
    "\1\237\1\252\2\237\6\306\1\237\2\306\2\237\1\310"+
    "\2\306\1\237\3\306\1\311\12\237\3\306\1\237\4\306"+
    "\2\237\1\330\1\u0113\1\355\1\354\1\330\1\354\1\u0113"+
    "\2\354\2\0\1\330\1\252\6\354\1\0\2\354\2\330"+
    "\1\356\2\u0113\1\330\3\354\1\357\12\330\3\u0113\1\330"+
    "\4\354\2\330\2\332\1\345\1\u010b\1\332\1\u010b\3\332"+
    "\1\346\16\332\1\u0102\6\332\1\u0103\25\332\1\u0114\1\u0101"+
    "\1\u0100\1\332\1\u0100\1\u0114\2\u0100\1\346\3\332\6\u0100"+
    "\1\332\2\u0100\2\332\1\u0102\2\u0114\1\332\3\u0100\1\u0103"+
    "\12\332\3\u0114\1\332\4\u0100\3\332\1\u0100\1\u0101\1\u010b"+
    "\1\332\1\u010b\3\u0100\1\360\3\332\6\u0100\1\332\2\u0100"+
    "\2\332\1\u0102\2\u0100\1\332\3\u0100\1\u0103\12\332\3\u0100"+
    "\1\332\4\u0100\3\332\1\u0100\1\u0101\1\u0115\1\332\1\u0115"+
    "\3\u0100\1\346\2\332\1\371\6\u0100\1\332\2\u0100\2\332"+
    "\1\u0102\2\u0100\1\332\3\u0100\1\u0103\12\332\3\u0100\1\332"+
    "\4\u0100\2\332\2\333\1\347\1\u010f\1\333\1\u010f\4\333"+
    "\1\346\15\333\1\u0106\6\333\1\u0107\25\333\1\u0116\1\u0105"+
    "\1\u0104\1\333\1\u0104\1\u0116\2\u0104\1\333\1\346\2\333"+
    "\6\u0104\1\333\2\u0104\2\333\1\u0106\2\u0116\1\333\3\u0104"+
    "\1\u0107\12\333\3\u0116\1\333\4\u0104\3\333\1\u0104\1\u0105"+
    "\1\u010f\1\333\1\u010f\3\u0104\1\333\1\361\2\333\6\u0104"+
    "\1\333\2\u0104\2\333\1\u0106\2\u0104\1\333\3\u0104\1\u0107"+
    "\12\333\3\u0104\1\333\4\u0104\3\333\1\u0104\1\u0105\1\u0117"+
    "\1\333\1\u0117\3\u0104\1\333\1\346\1\333\1\372\6\u0104"+
    "\1\333\2\u0104\2\333\1\u0106\2\u0104\1\333\3\u0104\1\u0107"+
    "\12\333\3\u0104\1\333\4\u0104\2\333\1\330\1\u0118\1\355"+
    "\1\354\1\330\1\354\1\u0118\2\354\2\0\1\330\1\252"+
    "\6\354\1\0\2\354\2\330\1\356\2\u0118\1\330\3\354"+
    "\1\357\12\330\3\u0118\1\330\4\354\2\330\1\332\1\u0119"+
    "\1\u0101\1\u0100\1\332\1\u0100\1\u0119\2\u0100\1\346\3\332"+
    "\6\u0100\1\332\2\u0100\2\332\1\u0102\2\u0119\1\332\3\u0100"+
    "\1\u0103\12\332\3\u0119\1\332\4\u0100\4\332\1\345\1\u0115"+
    "\1\332\1\u0115\3\332\1\346\2\332\1\371\13\332\1\u0102"+
    "\6\332\1\u0103\24\332\1\333\1\u011a\1\u0105\1\u0104\1\333"+
    "\1\u0104\1\u011a\2\u0104\1\333\1\346\2\333\6\u0104\1\333"+
    "\2\u0104\2\333\1\u0106\2\u011a\1\333\3\u0104\1\u0107\12\333"+
    "\3\u011a\1\333\4\u0104\4\333\1\347\1\u0117\1\333\1\u0117"+
    "\4\333\1\346\1\333\1\372\13\333\1\u0106\6\333\1\u0107"+
    "\24\333\1\330\1\u011b\1\355\1\354\1\330\1\354\1\u011b"+
    "\2\354\2\0\1\330\1\252\6\354\1\0\2\354\2\330"+
    "\1\356\2\u011b\1\330\3\354\1\357\12\330\3\u011b\1\330"+
    "\4\354\2\330\1\332\1\u011c\1\u0101\1\u0100\1\332\1\u0100"+
    "\1\u011c\2\u0100\1\346\3\332\6\u0100\1\332\2\u0100\2\332"+
    "\1\u0102\2\u011c\1\332\3\u0100\1\u0103\12\332\3\u011c\1\332"+
    "\4\u0100\2\332\1\333\1\u011d\1\u0105\1\u0104\1\333\1\u0104"+
    "\1\u011d\2\u0104\1\333\1\346\2\333\6\u0104\1\333\2\u0104"+
    "\2\333\1\u0106\2\u011d\1\333\3\u0104\1\u0107\12\333\3\u011d"+
    "\1\333\4\u0104\2\333\1\330\1\354\1\355\1\354\1\330"+
    "\4\354\2\0\1\330\1\252\6\354\1\0\2\354\2\330"+
    "\1\356\2\354\1\330\3\354\1\357\12\330\3\354\1\330"+
    "\4\354\2\330\1\332\1\u011e\1\u0101\1\u0100\1\332\1\u0100"+
    "\1\u011e\2\u0100\1\346\3\332\6\u0100\1\332\2\u0100\2\332"+
    "\1\u0102\2\u011e\1\332\3\u0100\1\u0103\12\332\3\u011e\1\332"+
    "\4\u0100\2\332\1\333\1\u011f\1\u0105\1\u0104\1\333\1\u0104"+
    "\1\u011f\2\u0104\1\333\1\346\2\333\6\u0104\1\333\2\u0104"+
    "\2\333\1\u0106\2\u011f\1\333\3\u0104\1\u0107\12\333\3\u011f"+
    "\1\333\4\u0104\2\333\1\332\1\u0120\1\u0101\1\u0100\1\332"+
    "\1\u0100\1\u0120\2\u0100\1\346\3\332\6\u0100\1\332\2\u0100"+
    "\2\332\1\u0102\2\u0120\1\332\3\u0100\1\u0103\12\332\3\u0120"+
    "\1\332\4\u0100\2\332\1\333\1\u0121\1\u0105\1\u0104\1\333"+
    "\1\u0104\1\u0121\2\u0104\1\333\1\346\2\333\6\u0104\1\333"+
    "\2\u0104\2\333\1\u0106\2\u0121\1\333\3\u0104\1\u0107\12\333"+
    "\3\u0121\1\333\4\u0104\2\333\1\332\1\u0100\1\u0101\1\u0100"+
    "\1\332\4\u0100\1\346\3\332\6\u0100\1\332\2\u0100\2\332"+
    "\1\u0102\2\u0100\1\332\3\u0100\1\u0103\12\332\3\u0100\1\332"+
    "\4\u0100\2\332\1\333\1\u0104\1\u0105\1\u0104\1\333\4\u0104"+
    "\1\333\1\346\2\333\6\u0104\1\333\2\u0104\2\333\1\u0106"+
    "\2\u0104\1\333\3\u0104\1\u0107\12\333\3\u0104\1\333\4\u0104"+
    "\2\333";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13000];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\1\11\3\1\1\11\1\1\1\11"+
    "\7\1\3\0\1\11\1\0\2\11\1\1\3\0\1\11"+
    "\2\0\3\1\1\0\1\1\1\0\1\1\11\0\2\11"+
    "\2\0\1\1\1\11\2\1\12\0\6\1\11\0\1\1"+
    "\2\0\3\1\1\0\3\1\5\0\2\11\2\0\2\1"+
    "\2\0\1\11\5\1\2\0\1\11\4\0\10\1\6\0"+
    "\7\1\1\0\1\1\5\0\1\1\1\11\2\1\5\0"+
    "\3\1\4\0\1\1\4\0\1\1\4\0\1\11\4\0"+
    "\1\11\2\0\1\1\1\11\3\0\1\11\3\0\1\1"+
    "\5\0\1\1\1\0\1\1\1\0\1\11\16\0\3\1"+
    "\11\0\1\1\6\0\1\1\23\0\1\1\3\0\1\1"+
    "\32\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	// Put stuff to include in the class here
	String detectedCharset;

	// External flag
	boolean paranoidStringCheck = false;
	boolean deleteErrors = true;
	boolean debug = true;
	
	// Internal flags
	boolean postBadImportFlag = false; // both URLs and @import's
	boolean importFlag = false;
	boolean urlFlag = false;

	// Writer
	Writer w = null; // Will NPE if not initialized properly

	public void parse () throws IOException {
		while (yylex() != null);
	}
	
	CSSTokenizerFilter(Reader r, Writer w, boolean paranoidStringCheck) {
		this(r);
		this.w = w;
		this.paranoidStringCheck = paranoidStringCheck;
	}

	void throwError(String s) throws IOException {
		throw new IllegalStateException("You MUST override throwError!");
	}

	String processImportURL(String s) {
		throw new IllegalStateException("You MUST override processImportURL!");
	}

	String processURL(String s) {
		throw new IllegalStateException("You MUST override processURL!");
	}
	
	void log(String s) {
		System.err.println("CSSTokenizerFilter: "+s);
	}

	void logError(String s) {
		System.err.println("CSSTokenizerFilter ERROR: "+s);
	}
	
	static String unquote(String s, char c) {
		if(s.length() > 1) {
			if(s.charAt(s.length()-1) == c) {
				s = s.substring(1, s.length()-1);
				return s;
			} else return "";
		} else return "";
	}
	
	// This is not very efficient. The parser below knows the quoting rules too.
	
	static boolean isHexDigit(char c) {
		return ('a' <= c && c <= 'f' ||
		  	'A' <= c && c <= 'F' ||
			'0' <= c && c <= '9');
	}
	
	class DecodedStringThingy {
		char quote; // " " means not quoted
		boolean url; // in a url() ?
		String data;
		public String suffix; // includes any whitespace
		public DecodedStringThingy(String s) {
			if(s.startsWith("url(")) {
				s = s.substring("url(".length());
				url = true;
			}
			char q = s.charAt(0);
			if(q == '\'' || q == '\"') {
				quote = q;
				s = s.substring(1);
			} else quote = ' ';
			StringBuffer buffer = new StringBuffer();
			int x = 0;
			boolean justEscaping = false;
			boolean stillEscaping = false;
			StringBuffer hexEscape = new StringBuffer();
			while(x < s.length()) {
				char c = s.charAt(x);
				x++;
				if(justEscaping) {
					if(c == '\n') {
						buffer.append(c);
						justEscaping = false;
					} else if(isHexDigit(c)) {
						hexEscape.append(c);
						justEscaping = false;
						stillEscaping = true;
					} else {
						buffer.append(c);
						// Will need to be reencoded if quote or \n
						justEscaping = false;
					}
				} else if(stillEscaping) {
					if(isHexDigit(c) && hexEscape.length() < 6) {
						hexEscape.append(c);
					} else if(Character.isWhitespace(c)) {
						// Ignore one whitespace char after an escape
						int d = Integer.parseInt(hexEscape.toString(),
									 16);
						if(d > 0xFFFF) {
							String error = 
							    "UCS-4 CHARACTERS OVER 0xFFFF NOT SUPPORTED!";
							logError(error);
							try {
								w.write("/* "+error+"*/");
							} catch (IOException e) {};
						} else {
							c = (char)d;
							buffer.append(c);
						}
						stillEscaping = false;
						hexEscape = new StringBuffer();
					} else {
						int d = Integer.parseInt(hexEscape.toString(),
									 16);
						if(d > 0xFFFF) {
							String error = 
							    "UCS-4 CHARACTERS OVER 0xFFFF NOT SUPPORTED!";
							logError(error);
							try {
								w.write("/* "+error+"*/");
							} catch (IOException e) {};
						} else {
							char o = (char)d;
							buffer.append(o);
						}
						buffer.append(c);
						stillEscaping = false;
						hexEscape = new StringBuffer();
					}
				} else {
					if(quote != ' ' && c == quote) {
						break;
					} else if (c == '\\') {
						justEscaping = true;
					} else {
						buffer.append(c);
					}
				}
			}
			data = buffer.toString();
			if(s.length() > x)
				suffix = s.substring(x);
			else suffix = "";
		}
		
		public String toString() {
			StringBuffer out = new StringBuffer();
			if(url) out.append("url(");
			if(quote != ' ') out.append(quote);
			out.append(unescapeData());
			if(quote != ' ') out.append(quote);
			if(url) out.append(")");
			out.append(suffix);
			return out.toString();
		}
		
		public String unescapeData() {
			StringBuffer sb = new StringBuffer();
			for(int i=0;i<data.length();i++) {
				char c = data.charAt(i);
				if(c == quote || c == '\n') {
					sb.append('\\');
				}
				sb.append(c);
			}
			return sb.toString();
		}
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CSSTokenizerFilter(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CSSTokenizerFilter(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 18: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched unicode: "+s);
          }
        case 31: break;
        case 8: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched close braces: "+s);
          }
        case 32: break;
        case 21: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched HTML comment: "+s);
          }
        case 33: break;
        case 15: 
          { String s = yytext();
	w.write(s); 
	if(debug) log("Matched ~=: "+s);
          }
        case 34: break;
        case 12: 
          { String s = yytext();
	if(debug) log("Matched string: "+s);
	if(paranoidStringCheck && s.indexOf(':') != -1) {
		w.write("/* Deleted disallowed string */");
		log("Deleted disallowed string: "+s);
	} else {
		w.write(s);
	}
          }
        case 35: break;
        case 24: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched @page: "+s);
          }
        case 36: break;
        case 13: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched number: "+s);
          }
        case 37: break;
        case 1: 
          { String s = yytext();
	char c = s.charAt(0);
	log("Matched anything: "+yytext()+" - ignoring");
	w.write("/* ignored unmatched char: "+c+" */"); // single char cannot break out of comment
          }
        case 38: break;
        case 6: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched semicolon: "+s);
          }
        case 39: break;
        case 19: 
          { String s = yytext();
	if(debug) log("Got hexcolor: "+s);
	w.write(s);
          }
        case 40: break;
        case 7: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched open braces: "+s);
          }
        case 41: break;
        case 2: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched ident: "+s);
          }
        case 42: break;
        case 23: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched unicode range: "+s);
          }
        case 43: break;
        case 28: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched @font-face: "+s);
          }
        case 44: break;
        case 9: 
          { String s = yytext();
	if(s.startsWith("url")) throwError("Invalid contents of url()");
	w.write(s);
	if(debug) log("Matched function start: "+s);
          }
        case 45: break;
        case 17: 
          { String s = yytext();
	w.write(s); 
	if(debug) log("Matched HTML comment: "+s);
          }
        case 46: break;
        case 3: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched whitespace: "+s);
          }
        case 47: break;
        case 22: 
          { String s = yytext();
	if(debug) log("Ignoring unrecognizable url: "+s);
	w.write("/* Ignoring unmatchable URL */url()");
          }
        case 48: break;
        case 27: 
          { String s = yytext();
	if(debug) log("Found @import: "+s);
	s = s.substring("@import".length());
	s = s.trim();
	DecodedStringThingy dst = new DecodedStringThingy(s);
	s = dst.data;
	if(debug) log("URL: "+s);
	s = processImportURL(s);
	dst.data = s;
	if(debug) log("Processed URL: "+s);
	if(dst.quote == ' ') dst.quote = '\"';
	if (!(s == null || s.equals(""))) {
		if(debug) log("URL now: "+s);
		s = "@import "+dst.toString();
		if(debug) log("Writing: "+s);
		w.write(s);
	} else
		if(debug) log("Dropped @import");
          }
        case 49: break;
        case 29: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched important: "+s);
          }
        case 50: break;
        case 20: 
          { String s = yytext();
	StringBuffer sb = new StringBuffer(s.length());
	sb.append("/* ");
	boolean inPrefix = true;
	for(int i=2;i<s.length()-2;i++) {
		char c = s.charAt(i);
		if(inPrefix && Character.isWhitespace(c)) {
			continue;
		}
		inPrefix = false;
		if(Character.isDigit(c) || Character.isWhitespace(c) ||
			Character.isLetter(c) || c == '.' || c == '_' || c == '-') {
			// No @, no !, etc; IE has been known to do things with comments
			// in CSS, and other browsers may too
			sb.append(c);
		}
	}
	while(Character.isWhitespace(sb.charAt(sb.length()-1)))
		sb.deleteCharAt(sb.length()-1);
	sb.append(" */");
	w.write(sb.toString());
	if(debug) log("Matched comment: "+s+" -> "+sb.toString());
          }
        case 51: break;
        case 25: 
          { // This is horrible. However it seems that there is no other way to do it with either jflex or CUP, as {URL} cannot be an unambiguous token :(
	String s = yytext();
	if(debug) log("Recognized URL: "+s);
	
	DecodedStringThingy dst = new DecodedStringThingy(s);
	
	if(!dst.url) {
		throw new IllegalStateException("parsing url().. isn't a url()");
	}
	if(dst.suffix.length() > 0) {
		yypushback(dst.suffix.length());
		dst.suffix = "";
	}
	
	s = dst.data;
	if(debug) log("URL now: "+s);
	s = processURL(s);
	dst.data = s;
	if(s == null || s.equals("")) {
		if(debug) log("URL invalid");
		w.write("url()");
	} else {
		s = dst.toString();
		if(debug) log("Writing: "+s);
		w.write(s);
	}
          }
        case 52: break;
        case 11: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched measurement: "+s);
          }
        case 53: break;
        case 16: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched |=: "+s);
          }
        case 54: break;
        case 30: 
          { String s = yytext();
	detectedCharset = s;
	if(debug) log("Matched and ignoring charset: "+s);
	// Ignore
          }
        case 55: break;
        case 10: 
          { if(postBadImportFlag) {
		// Ignore
		postBadImportFlag = false;
		if(debug) log("Ignoring mediums list because after bad import: "+
			yytext());
	} else {
		String s = yytext();
		w.write(s);
		if(debug) log("Matched and passing on mediums list: "+s);
	}
          }
        case 56: break;
        case 26: 
          { String s = yytext();
	s = s.substring("@media".length()).trim();
	w.write("@media "+s);
	if(debug) log("Matched @media: "+s);
          }
        case 57: break;
        case 4: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched single char: "+s);
          }
        case 58: break;
        case 14: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched #name: "+s);
          }
        case 59: break;
        case 5: 
          { String s = yytext();
	w.write(s);
	if(debug) log("Matched function end: "+s);
          }
        case 60: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
