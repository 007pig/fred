<?xml version="1.0" encoding="UTF-8"?>
<project name="Freenet" default="dist" basedir=".">
	<description>
Freenet is free software that lets you publish and retrieve information without
fear of censorship. To achieve this, the network is entirely decentralized, and
all actions are anonymous. Without anonymity, there can never be true freedom
of speech, and without decentralization the network would be vulnerable to attack.
	</description>

	<!-- =================================================================== -->
	<!-- Global properties                                                   -->
	<!-- =================================================================== -->

	<!-- user overrides (properties are immutable, so OK to set these here) -->
	<property file="build.properties" />
	<property name="javac.args" value="-Xlint"/>
	<property name="java.class.dirs" value="/usr/share/java"/>

	<property name="main.src" value="src"/>
	<property name="main.make" value="build/main"/>
	<property name="main.dst" value="dist"/><!--UNUSED-->

	<property name="test.src" value="test"/>
	<property name="test.make" value="build/test"/>
	<property name="test.dst" value="run"/><!--UNUSED-->

	<property name="doc.dst" value="javadoc"/>
	<property name="doc.api" value="javadoc"/>

	<property name="version.src" value="freenet/node/Version.java" />
	<property name="version.make" value="freenet/node/Version.class" />

	<property name="lib" value="lib"/>
	<property name="lib.contrib" location="${lib}/freenet-ext.jar"/>
	<path id="lib.path">
		<fileset dir="${lib}" includes="**/*.jar"/>
		<fileset dir="${java.class.dirs}">
			<include name="junit.jar"/>
		</fileset>
	</path>

	<property name="contrib.version.min" value="-1"/>
	<property name="contrib.version.rec" value="-1"/>

	<property name="gjs.dst" value="${main.src}/freenet/clients/http/staticfiles/freenetjs"/>
	<property name="gjs.base" value="generator/js"/>
	<property name="gjs.lib" value="${gjs.base}/lib"/>
	<path id="gjs.lib.path">
		<fileset dir="${gjs.lib}" includes="*.jar"/>
		<pathelement location="${gjs.base}/war/WEB-INF/classes"/>
		<fileset dir="${java.class.dirs}">
			<include name="gwt-dev-linux.jar"/>
			<include name="gwt-user.jar"/>
			<include name="commons-collections3.jar"/>
			<include name="ant.jar"/>
			<include name="eclipse-ecj.jar"/>
		</fileset>
	</path>

	<assertions><enable/></assertions>

	<!-- set version string based on git-describe -->
	<exec executable="git" failifexecutionfails="false"
		errorProperty="git.errror" outputproperty="git.describe" resultproperty="git.result">
		<arg value="describe" />
		<arg value="--always" />
		<arg value="--abbrev=4" />
	</exec>
	<condition property="git.revision" value="${git.describe}" else="@unknown@">
		<and>
			<equals arg1="${git.result}" arg2="0" />
			<isset property="git.describe" />
		</and>
	</condition>

	<!-- =================================================================== -->
	<!-- Miscellaneous                                                       -->
	<!-- =================================================================== -->

	<target name="all" depends="clean-all, dist, doc" description="clean-builds everything"/>

	<target name="clean-all" depends="clean, clean-doc, clean-gjs, clean-ext" description="clean all build products, including dependency builds"/>

	<target name="help" description="display help on parameters">
		<echo message="For main build targets, see `ant -p`"/>
		<echo message=""/>
		<echo message="Test parameters (-Dtest.PARAM=true)"/>
		<echo message=""/>
		<echo message="  skip        Skip all tests"/>
		<echo message="  verbose     Report additional information"/>
		<echo message="  benchmark   Run benchmark tests"/>
		<echo message="  extensive   Run extensive tests"/>
		<echo message=""/>
		<echo message="Rebuild parameters (-Drebuild.PARAM=true)"/>
		<echo message=""/>
		<echo message="  ext         Rebuild ext if possible, otherwise download"/>
		<echo message="  gjs         Rebuild gjs if possible, otherwise checkout"/>
		<echo message=""/>
	</target>

	<!-- =================================================================== -->
	<!-- Standard build                                                      -->
	<!-- =================================================================== -->

	<target name="init">
		<mkdir dir="${main.make}"/>
		<mkdir dir="${test.make}"/>
		<mkdir dir="${lib}"/>
	</target>

	<target name="dep" depends="dep-ext, dep-gjs"/>

	<target name="dep-junit">
		<trydep property="lib.junit.present" name="JUnit">
			<condition><available classname="junit.framework.Test" classpathref="lib.path"/></condition>
		</trydep>
	</target>

	<target name="build" depends="dep">
		<!-- Create the time stamp -->
		<tstamp/>

		<!-- Create the Version file with patched revision number in ${main.make} -->
		<copy file="${main.src}/${version.src}" tofile="${main.make}/${version.src}" overwrite="true" />
		<delete file="${main.make}/${version.make}" quiet="true" />
		<replace file="${main.make}/${version.src}">
			<replacefilter token="@custom@" value="${git.revision}"/>
		</replace>
		<echo message="Updated build version to ${git.revision} in ${main.make}/${version.src}"/>

		<!-- Create the build directory structure used by compile -->
		<javac srcdir="${main.src}" destdir="${main.make}" debug="on" optimize="on" source="1.5" target="1.5">
			<compilerarg line="${javac.args}"/>
			<!-- tell javac to find Version.java in ${main.make}, not ${main.src} -->
			<sourcepath>
				<pathelement path="${main.make}"/>
			</sourcepath>
			<classpath>
				<path refid="lib.path"/>
			</classpath>
			<!-- following a very temporary list of files to be build -->
			<include name="freenet/**/*.java"/>
			<include name="net/i2p/util/*.java"/>
			<include name="org/**/*.java"/>
			<exclude name="**/package-info.java"/>
			<exclude name="${version.src}"/>
		</javac>

		<!-- Force compile of Version.java in case compile of ${main.src} didn't trigger it -->
		<javac srcdir="${main.make}" destdir="${main.make}" debug="on" optimize="on" source="1.5" target="1.5">
			<compilerarg line="${javac.args}"/>
			<classpath>
				<path refid="lib.path"/>
			</classpath>
			<include name="${version.src}"/>
		</javac>

		<!-- Copy web interface static files to the build dir -->
		<copy todir="${main.make}/freenet/clients/http/staticfiles">
			<fileset dir="${main.src}/freenet/clients/http/staticfiles"/>
		</copy>
		<!-- Copy translation files to the build dir -->
		<copy todir="${main.make}/freenet/l10n">
			<fileset dir="${main.src}/freenet/l10n">
				<include name="freenet.l10n.*.properties"/>
				<include name="freenet.l10n.*.tab"/>
			</fileset>
		</copy>
	</target>

	<target name="dist" depends="build, unit" description="build standard components (Freenet daemon)" >
		<jar jarfile="${lib}/freenet-cvs-snapshot.jar" basedir="${main.make}">
			<manifest>
				<attribute name="Main-Class" value="freenet/node/Node"/>
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Required-Ext-Version" value="${contrib.version.min}"/>
				<attribute name="Recommended-Ext-Version" value="${contrib.version.rec}"/>
				<attribute name="Class-Path" value="freenet-ext.jar" />
				<section name="common">
					<attribute name="Specification-Title" value="Freenet"/>
					<attribute name="Specification-Version" value="0.7.5"/>
					<attribute name="Specification-Vendor" value="freenetproject.org"/>
					<attribute name="Implementation-Title" value="Freenet"/>
					<attribute name="Implementation-Version" value="0.7.5 ${TODAY} ${git.revision}"/>
					<attribute name="Implementation-Vendor" value="Freenetproject.org"/>
				</section>
			</manifest>
			<exclude name="${version.src}"/>
		</jar>
	</target>

	<target name="unit-build" depends="build, dep-junit" unless="${test.skip}">
		<delete dir="${test.make}"/>
		<mkdir dir="${test.make}"/>

		<javac srcdir="${test.src}" destdir="${test.make}" debug="on" optimize="on" source="1.5" target="1.5">
			<compilerarg line="${javac.args}"/>
			<classpath>
				<path refid="lib.path"/>
				<pathelement path="${main.make}"/>
			</classpath>
			<include name="**/*.java"/>
			<exclude name="*.java"/>
		</javac>
		<copy todir="${test.make}/freenet/client/filter/png">
			<fileset dir="${test.src}/freenet/client/filter/png"/>
		</copy>
		<copy todir="${test.make}/freenet/client/filter/bmp">
			<fileset dir="${test.src}/freenet/client/filter/bmp"/>
		</copy>
	</target>

	<target name="unit" depends="unit-build" unless="${test.skip}">
		<junit printsummary="yes" fork="yes" haltonfailure="yes">
			<classpath>
				<path refid="lib.path"/>
				<pathelement path="${main.make}"/>
				<pathelement path="${test.make}"/>
			</classpath>

			<formatter type="plain" usefile="false"/>

			<batchtest fork="yes">
				<fileset dir="${test.make}">
					<include name="**/*Test.class"/>
				</fileset>
			</batchtest>
			<sysproperty key="test.verbose" value="${test.verbose}"/>
			<sysproperty key="test.benchmark" value="${test.benchmark}"/>
			<sysproperty key="test.extensive" value="${test.extensive}"/>
			<!-- TODO source needs to be edited too; the old variables were "benchmark" and "extensiveTesting" -->
			<assertions><enable/></assertions>
		</junit>
	</target>

	<target name="clean" description="clean standard build products">
		<delete dir="${main.make}"/>
		<delete dir="${main.dst}"/>
		<delete dir="${test.make}"/>
		<delete dir="${test.dst}"/>
	</target>

	<!-- =================================================================== -->
	<!-- Dependencies (contrib, ie. freenet-ext.jar)                         -->
	<!-- =================================================================== -->

	<target name="dep-ext" description="ensure that the Freenet dependencies are available">
		<trydep property="contrib.present">
			<condition><available classname="freenet.node.ExtVersion" classpathref="lib.path"/></condition>
			<tasks>
				<antcall target="build-ext"/>
				<antcall target="get-ext"/>
			</tasks>
			<fail message="could neither build nor download freenet-ext.jar"/>
		</trydep>
	</target>

	<target name="get-ext">
		<get src="http://checksums.freenetproject.org/cc/freenet-ext.jar" dest="${lib.contrib}"
			verbose="true" usetimestamp="true"/>
	</target>

	<target name="build-ext" if="${rebuild.ext}">
		<!-- TODO -->
		<fail message="build-ext not implemented TODO"/>
	</target>

	<target name="clean-ext">
		<!-- TODO -->
		<fail message="clean-ext not implemented TODO"/>
	</target>

	<!-- =================================================================== -->
	<!-- Generate GWT code                                                   -->
	<!-- =================================================================== -->

	<target name="dep-gjs" description="ensure that GWT-generated javascript is available">
		<trydep property="gjs.present">
			<condition><available file="${gjs.dst}" type="dir"/></condition>
			<tasks>
				<antcall target="build-gjs"/>
				<antcall target="checkout-gjs"/>
			</tasks>
			<fail message="could neither build nor checkout generated javascript"/>
		</trydep>
	</target>

	<target name="dep-gwt">
		<trydep property="gjs.lib.gwt-user.present" name="GWT-user">
			<condition><available classname="com.google.gwt.user.client.Window" classpathref="gjs.lib.path"/></condition>
		</trydep>
		<trydep property="gjs.lib.gwt-dev.present" name="GWT-dev">
			<condition><available classname="com.google.gwt.dev.About" classpathref="gjs.lib.path"/></condition>
		</trydep>
	</target>

	<target name="build-gjs" if="${rebuild.gjs}">
		<ant antfile="build.xml" dir="${gjs.base}">
			<reference refid="gjs.lib.path" torefid="project.class.path"/>
		</ant>
	</target>

	<target name="checkout-gjs" depends="clean-gjs">
		<exec executable="git">
			<arg value="checkout" />
			<arg value="${gjs.dst}" />
		</exec>
	</target>

	<target name="clean-gjs">
		<ant antfile="build.xml" target="deleteGenerated" dir="${gjs.base}"/>
	</target>

	<!-- =================================================================== -->
	<!-- Documentation                                                       -->
	<!-- =================================================================== -->

	<target name="init-doc">
		<mkdir dir="${doc.api}"/>
	</target>

	<target name="javadoc" depends="init-doc, dep">
		<javadoc classpathref="lib.path" sourcepath="${main.src}" destdir="${doc.api}" use="true">
			<fileset dir="${main.src}" includes="**/*.java" />
			<classpath>
				<pathelement location="${lib.contrib}"/>
			</classpath>
			<link href="http://java.sun.com/j2se/1.5.0/docs/api"/>
		</javadoc>
	</target>

	<target name="doc" depends="javadoc" description="build documentation">
		<!-- currently freenet has no other documentation apart from javadocs -->
	</target>

	<target name="clean-doc">
		<delete dir="${doc.api}"/>
	</target>

	<!-- =================================================================== -->
	<!-- Helper tasks                                                        -->
	<!-- =================================================================== -->

	<scriptdef name="trydep" language="javascript">
		<!-- property to test for to see if the dependency has been satisfied -->
		<attribute name="property"/>
		<!-- "condition" task to maybe set the above property -->
		<element name="condition" type="condition"/>
		<!-- tasks to run, one by one, until the property is set -->
		<element name="tasks" classname="org.apache.tools.ant.Target"/>
		<!-- optional "fail" task to run, if none of the tasks succeeded -->
		<element name="fail" type="fail"/>
		<!-- optional name of dependency, used in the default fail message -->
		<attribute name="name"/>
		<![CDATA[
			var prop = attributes.get("property")
			var cond = elements.get("condition").get(0)
			if (!prop) { self.fail("trydep: property attribute not given"); }
			cond.getProxy().setProperty(prop)

			function condition() {
				cond.execute()
				return project.getProperty(prop)
			}

			var taskel = elements.get("tasks")
			var tasks = taskel? taskel.get(0).getTasks(): []

			var name = attributes.get("name")
			var desc = name? "dependency " + name: "property " + prop
			var failel = elements.get("fail")
			var failtask = failel? failel.get(0): null

			function trydep() {
				if (condition()) { return; }
				for (var i=0; i<tasks.length; ++i) {
					task = tasks[i]
					task.maybeConfigure()
					self.log("trying to satisfy " + desc + "...")
					try {
						task.execute()
					} catch (e) {
						if (!(e.javaException instanceof org.apache.tools.ant.BuildException)) { throw e; }
						self.log("task failed: " + e.javaException)
					}

					if (condition()) { return; }
				}

				if (failtask) {
					failtask.execute();
				} else {
					self.fail("could not satisfy " + desc);
				}
			}

			trydep()
		]]>
	</scriptdef>

</project>
